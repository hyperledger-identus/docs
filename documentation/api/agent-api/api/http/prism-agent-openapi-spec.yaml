openapi: 3.0.1
info:
  title: PrismAgent OpenAPI specification
  description: OpenAPI specification for Decentralized Identifiers (DID) Operations
  version: 0.1.0
  contact:
    name: Core DID
    email: atala-coredid@iohk.io
servers:
  - url: "https://k8s-dev.atalaprism.io/prism-agent/"
  - url: "http://localhost/prism-agent"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey
security:
  - ApiKeyAuth: [ ]
tags:
  # Castor
  - name: DID
    description: Generic DID Endpoints
  - name: DID Authentication
    description: DID Authentication REST API
  - name: DID Registrar
    description: DID Endpoints where keys are managed by PrismAgent
  # Pollux
  - name: Schema Registry
    description: Schema Registry REST API
  - name: Verification
    description: Verification Policies REST API
  - name: Present Proof
    description: Present Proof REST API
  # Connect
  - name: Connections Management
    description: API for driving connection process.


paths:
  # ----------------------------------
  # Castor
  # ----------------------------------
  /dids/{didRef}:
    get:
      tags: [ "DID" ]
      operationId: getDid
      summary: Resolve Prism DID
      description: Resolve Prism DID
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      responses:
        "200":
          description: The DID resource
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDResponse"
        "404":
          description: There is no DID existing for the 'didRef'.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /authentication/challenges:
    post:
      tags: [ "DID Authentication" ]
      operationId: createDidAuthenticationChallenge
      summary: Create a new authentication challenge
      deprecated: true
      description: |
        Create a new authentication challenge that will be later verified
        by Castor for a relying-party.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/CreateAuthenticationChallengeRequest"
      responses:
        "200":
          description: Authentication challenge created successfully
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/CreateAuthenticationChallengeResponse"
        "400":
          description: A create AuthenticationChallenge payload is malformed
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /authentication/challenge-submissions:
    post:
      tags: [ "DID Authentication" ]
      operationId: createDidAuthenticationChallengeSubmission
      summary: Create a verification from challenge
      deprecated: true
      description: |
        Submit a challenge submission that will be verified by Castor for a relying-party.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/AuthenticationChallengeSubmissionRequest"
      responses:
        "200":
          description: Authentication challenge has been successfully verified
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/AuthenticationChallengeSubmissionResponse"
        "400":
          description: ChallengeSubmission is malformed
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /did-registrar/dids:
    get:
      tags: [ "DID Registrar" ]
      operationId: listManagedDid
      summary: List all DIDs stored in PrismAgent's wallet
      description: List all DIDs stored in PrismAgent's wallet
      responses:
        "200":
          description: List managed DIDs
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ListManagedDIDResponse"
        "500":
          description: Internal Error.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

    post:
      tags: [ "DID Registrar" ]
      operationId: createManagedDid
      summary: Create unpublished DID and store it in PrismAgent's wallet
      description: |
        Create unpublished DID and store it inside PrismAgent's wallet. The private keys of the DID is
        managed by PrismAgent. The DID can later be published to blockchain using publications endpoint.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/CreateManagedDidRequest"
      responses:
        "200":
          description: Created unpublished DID.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/CreateManagedDIDResponse"
        "422":
          description: The DID creation failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /did-registrar/dids/{didRef}/publications:
    post:
      tags: [ "DID Registrar" ]
      operationId: publishManagedDid
      summary: Publish the DID stored in PrismAgent's wallet to the blockchain
      description: |
        Publish the DID stored in PrismAgent's wallet to the blockchain.
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      responses:
        "202":
          description: Publishing DID to Blockchain.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDOperationResponse"
        "422":
          description: The DID publication failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  # ----------------------------------
  # Pollux
  # ----------------------------------
  /schema-registry/schemas:
    get:
      tags:
        - Schema Registry
      summary: Lookup schemas by indexed fields
      description: 'Lookup schemas by `author`, `name`, `tags` parameters and control
        the pagination by `offset` and `limit` parameters '
      operationId: lookupSchemasByQuery
      parameters:
        - name: author
          in: query
          required: false
          schema:
            type: string
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: tags
          in: query
          required: false
          schema:
            type: string
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: order
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/VerifiableCredentialSchemaPage
        '400':
          description: 'Invalid value for: query parameter author, Invalid value for:
            query parameter name, Invalid value for: query parameter tags, Invalid
            value for: query parameter offset, Invalid value for: query parameter
            limit, Invalid value for: query parameter order'
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/InternalServerError
    post:
      tags:
        - Schema Registry
      summary: Publish new schema to the schema registry
      description: Publish the new schema with attributes to the schema registry on
        behalf of Cloud Agent. Schema will be signed by the keys of Cloud Agent and
        issued by the DID that corresponds to it
      operationId: createSchema
      requestBody:
        description: Create schema input object with the metadata and attributes
        content:
          application/json:
            schema:
              $ref: ./pollux/schemas.yaml#/components/schemas/VerificationCredentialSchemaInput
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/VerifiableCredentialSchema
        '400':
          description: 'Invalid value for: body'
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/InternalServerError
  /schema-registry/schemas/{id}:
    get:
      tags:
        - Schema Registry
      summary: Fetch the schema from the registry by id
      description: Fetch the schema by the unique identifier. Verifiable Credential
        Schema in json format is returned.
      operationId: getSchemaById
      parameters:
        - name: id
          in: path
          description: Get the schema by id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/VerifiableCredentialSchema
        '400':
          description: 'Invalid value for: path parameter id'
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/NotFound

  # ----------------------------------
  # Verification Policies
  # ----------------------------------
  /verification/policies:
    get:
      tags:
        - Verification
      summary: Lookup verification policies by query
      description: Lookup verification policies by `name`, `attributes`, `issuerDIDs`,
        and `credentialTypes` and control the pagination by `offset` and `limit` parameters
      operationId: lookupVerificationPoliciesByQuery
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: attributes
          in: query
          required: false
          schema:
            type: string
        - name: issuerDIDs
          in: query
          required: false
          schema:
            type: string
        - name: credentialTypes
          in: query
          required: false
          schema:
            type: string
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: order
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: './pollux/schemas.yaml#/components/schemas/VerificationPolicyPage'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: './pollux/schemas.yaml#/components/schemas/BadRequest'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: './pollux/schemas.yaml#/components/schemas/InternalServerError'
    post:
      tags:
        - Verification
      summary: Create the new verification policy
      description: Create the new verification policy
      operationId: createVerificationPolicy
      requestBody:
        description: Create verification policy object
        content:
          application/json:
            schema:
              $ref: './pollux/schemas.yaml#/components/schemas/VerificationPolicyInput'
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: './pollux/schemas.yaml#/components/schemas/VerificationPolicy'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: './pollux/schemas.yaml#/components/schemas/BadRequest'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: './pollux/schemas.yaml#/components/schemas/InternalServerError'
  /verification/policies/{id}:
    get:
      tags:
        - Verification
      summary: Fetch the verification policy by id
      description: Get the verification policy by id
      operationId: getVerificationPolicyById
      parameters:
        - name: id
          in: path
          description: Get the verification policy by id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: './pollux/schemas.yaml#/components/schemas/VerificationPolicy'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: './pollux/schemas.yaml#/components/schemas/BadRequest'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: './pollux/schemas.yaml#/components/schemas/NotFound'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: './pollux/schemas.yaml#/components/schemas/InternalServerError'
    put:
      tags:
        - Verification
      summary: Update the verification policy object by id
      description: 'Update the fields of the verification policy entry: `attributes`,
        `issuerDIDs`, `name`, `credentialTypes`, '
      operationId: updateVerificationPolicy
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Update verification policy object
        content:
          application/json:
            schema:
              $ref: './pollux/schemas.yaml#/components/schemas/VerificationPolicyInput'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: './pollux/schemas.yaml#/components/schemas/VerificationPolicy'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: './pollux/schemas.yaml#/components/schemas/BadRequest'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: './pollux/schemas.yaml#/components/schemas/NotFound'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: './pollux/schemas.yaml#/components/schemas/InternalServerError'
    delete:
      tags:
        - Verification
      summary: Delete the verification policy by id
      description: Delete the verification policy by id
      operationId: deleteVerificationPolicyById
      parameters:
        - name: id
          in: path
          description: Delete the verification policy by id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: './pollux/schemas.yaml#/components/schemas/BadRequest'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: './pollux/schemas.yaml#/components/schemas/NotFound'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: './pollux/schemas.yaml#/components/schemas/InternalServerError'

  ## Issue Credential Protocol

  /issue-credentials/credential-offers:
    post:
      tags: [ "Issue Credentials Protocol" ]
      operationId: createCredentialOffer
      summary: As a VC issuer, create a new credential offer to be sent to a VC holder
      requestBody:
        description: CredentialOffer object with schema identifier and claims
        required: true
        content:
          application/json:
            schema:
              $ref: ./pollux/schemas.yaml#/components/schemas/CreateIssueCredentialRecordRequest
      responses:
        "201":
          description: The issue credential record
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecord
        "422":
          description: The issue credential record creation failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /issue-credentials/records:
    get:
      tags: [ "Issue Credentials Protocol" ]
      operationId: getCredentialRecords
      summary: Get credential records
      responses:
        "200":
          description: The issue credential records
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecordCollection
        "500":
          description: Retrieving the issue credential records failed for an unexpected reason.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /issue-credentials/records/{recordId}:
    get:
      tags: [ "Issue Credentials Protocol" ]
      operationId: getCredentialRecord
      summary: Get a credential record by Id
      parameters:
        - $ref: ./pollux/parameters.yaml#/components/parameters/issueCredentialRecordIdInPath
      responses:
        "200":
          description: The issue credential record
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecord
        "404":
          description: There is no issue credential record matching the given 'recordId'.
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/ErrorResponse"

  /issue-credentials/records/{recordId}/accept-offer:
    post:
      tags: [ "Issue Credentials Protocol" ]
      operationId: acceptCredentialOffer
      summary: As a VC holder, accept a credential offer received from an issuer
      parameters:
        - $ref: ./pollux/parameters.yaml#/components/parameters/issueCredentialRecordIdInPath
      responses:
        "200":
          description: The issue credential offer has been accepted
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecord
        "404":
          description: There is no issue credential record maatching the given 'recordId'.
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/ErrorResponse"

  /issue-credentials/records/{recordId}/issue-credential:
    post:
      tags: [ "Issue Credentials Protocol" ]
      operationId: issueCredential
      summary: As a VC issuer, issue the VC for the specified issue credential record
      parameters:
        - $ref: ./pollux/parameters.yaml#/components/parameters/issueCredentialRecordIdInPath
      responses:
        "200":
          description: The VC has been issued
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecord
        "404":
          description: There is no issue credential record maatching the given 'recordId'.
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/ErrorResponse"

  /revocation-registry/credential-status/{id}:
    get:
      tags: [ "Revocation Registry" ]
      operationId: getCredentialRevocationStatusById
      summary: Get credentials revocation status by credential id
      description: Get credentials revocation status by credential id
      parameters:
        - in: path
          name: id
          description: Verifiable Credential Id
          schema:
            type: string
          required: true
          example: "abcde12345"
      responses:
        "200":
          description: Status request processed successfully
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CCredentialStatus"
  /revocation-registry/revoke:
    post:
      tags: [ "Revocation Registry" ]
      operationId: revokeCredentialById
      summary: Revoke credential by id
      description: Revoke credential by id
      requestBody:
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/W3CCredentialRevocationRequest"
        required: true
      responses:
        "202":
          description: Revocation request successfully submitted
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CCredentialRevocationResponse"
          headers:
            Location:
              schema:
                type: string
              description: URL to access credential revocation status.

  /revocation-registry/operations/{id}:
    get:
      tags: [ "Revocation Registry" ]
      operationId: getRevocationOperationStatusById
      summary: Get revocation operation status by id
      description: Get revocation operation status by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Success, operation status is returned
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/RevocationStatus"

  /present-proof/presentations:
    post:
      tags: ["Present Proof"]
      operationId: requestPresentation
      requestBody:
        description: Request presentation of some type of Proof or Proofs (VC)
        required: true
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/RequestPresentationInput"
      responses:
        "201":
          description: The new presentation is created
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/RequestPresentationOutput"
        "422":
          description: Failed to create a presentation request.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"
    get:
      tags: ["Present Proof"]
      operationId: getAllPresentation
      responses:
        "200":
          description: List of presentations and status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./pollux/schemas.yaml#/components/schemas/PresentationStatus"
        "404":
          description: There is no presentations record
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"
  /present-proof/presentations/{id}:
    patch:
      tags: ["Present Proof"]
      operationId: updatePresentation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique identifier of the presentation
          example: "06e126d1-fa44-4882-a243-1e326fbe21db"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/RequestPresentationAction"
              # oneOf:
              #  - $ref: "./pollux/schemas.yaml#/components/schemas/RequestPresentationActionAccept"
              #  - $ref: "./pollux/schemas.yaml#/components/schemas/RequestPresentationActionReject"
      responses:
        "200":
          description: Update the presentation record
        "404":
          description: There is no presentation record existing with the 'id'
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"
    get:
      tags: [ "Present Proof" ]
      operationId: getPresentation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique identifier of the presentation
          example: "06e126d1-fa44-4882-a243-1e326fbe21db"
      summary: Returns an existing presentation record by id.
      responses:
        "200":
          description: Presentation state record
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/PresentationStatus"
        "404":
          description: There is no presentation record matching the given 'id'.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  # ----------------------------------
  # Connect
  # ----------------------------------
  /connections:
    post:
      tags: [ "Connections Management" ]
      operationId: createConnection
      summary: Creates new connection and returns an invitation.
      description: |-
        Returns new invitation object and creates new connection state record in `pending` state.
        Content of invitation depends on DIDComm protocol used, here is an example of how it would look like for `AIP 1.0 connection/v1` protocol.
        Once connection invitation is accepted, Agent should filter all additional attempts to accept it.
        We consider mult-party connections as out of scope for now.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./connect/schemas.yaml#/components/schemas/CreateConnectionRequest"

      responses:
        "201":
          description: The connection record
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/Connection"
        "422":
          description: The connection record creation failed.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/ErrorResponse"

    get:
      tags: [ "Connections Management" ]
      operationId: getConnections
      summary: Returns a list of connections.
      responses:
        "200":
          description: List of connection state objects
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/ConnectionCollection"
        "500":
          description: Retrieving the connection records failed for an unexpected reason.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/ErrorResponse"

  /connections/{connectionId}:
    get:
      tags: [ "Connections Management" ]
      parameters:
        - $ref: "./connect/schemas.yaml#/components/parameters/connectionId"
      operationId: getConnection
      summary: Returns an existing connection record by id.
      responses:
        "200":
          description: Connection state record
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/Connection"
        "404":
          description: There is no issue credential record matching the given 'recordId'.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/ErrorResponse"
    delete:
      tags: [ "Connections Management" ]
      parameters:
        - $ref: "./connect/schemas.yaml#/components/parameters/connectionId"
      operationId: deleteConnection
      summary: Deletes existing connection record.
      description: Just deletes connection state in the Agent, it does not include notifing other party that connection is deleted. We should consider this feature for the future. If additional action is attempted over deleted connection, it should thow error (no matter which side deleted connection).
      responses:
        "200":
          description: Successful delete
        "404":
          description: Connection state record not found for given `connectionId`

  /connection-invitations:
    post:
      tags: [ "Connections Management" ]
      operationId: acceptConnectionInvitation
      summary: Accepts externally received invitation.
      description: Creates new connection state record in `pending` state. It is assumed that application would first decode and validate the invitation. When it is accepted in the application side, it should be submitted in raw format to this API.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./connect/schemas.yaml#/components/schemas/AcceptConnectionInvitationRequest"

      responses:
        "200":
          description: Invitation successfully accepted.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/Connection"
        "500":
          description: Storing the connection invitation failed for an unexpected reason.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/ErrorResponse"
