"use strict";(self.webpackChunkidentus_documentation_portal=self.webpackChunkidentus_documentation_portal||[]).push([[5664],{16903:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var i=t(74848),s=t(28453);const r={},o="Admin Authorization with External IAM",a={id:"multitenancy/admin-authz-ext-iam",title:"Admin Authorization with External IAM",description:"In the past tutorials, the administrator utilized a static API key for authentication and authorization.",source:"@site/identus-cloud-agent/docs/docusaurus/multitenancy/admin-authz-ext-iam.md",sourceDirName:"multitenancy",slug:"/multitenancy/admin-authz-ext-iam",permalink:"/tutorials/multitenancy/admin-authz-ext-iam",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialsSidebar",previous:{title:"Migration from apikey to JWT authentication",permalink:"/tutorials/multitenancy/tenant-migration"}},l={},c=[{value:"Roles",id:"roles",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Overview",id:"overview",level:2},{value:"Endpoints",id:"endpoints",level:2},{value:"Agent endpoints",id:"agent-endpoints",level:3},{value:"Keycloak endpoints",id:"keycloak-endpoints",level:3},{value:"Keycloak Administrator interactions",id:"keycloak-administrator-interactions",level:2},{value:"1. Configure Keycloak role on the client",id:"1-configure-keycloak-role-on-the-client",level:3},{value:"2. Assign the <code>admin</code> role to the user",id:"2-assign-the-admin-role-to-the-user",level:3},{value:"Agent Administrator interactions",id:"agent-administrator-interactions",level:2},{value:"1. Obtain an access token from Keycloak",id:"1-obtain-an-access-token-from-keycloak",level:3},{value:"2. Perform a simple action to verify admin rights on the Agent",id:"2-perform-a-simple-action-to-verify-admin-rights-on-the-agent",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"admin-authorization-with-external-iam",children:"Admin Authorization with External IAM"}),"\n",(0,i.jsx)(n.p,{children:"In the past tutorials, the administrator utilized a static API key for authentication and authorization.\nThe Agent also features a more sophisticated role-based authorization mechanism using external IAM,\nallowing users to be authorized under different roles and granting access to parts of the Agent."}),"\n",(0,i.jsx)(n.h2,{id:"roles",children:"Roles"}),"\n",(0,i.jsx)(n.p,{children:"For the Agent admin authorization, we need to distinguish the administrator of each component:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/concepts/glossary#administrator",children:"Agent Administrator"})}),"\n",(0,i.jsx)(n.li,{children:"Keycloak Administrator"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The same person may also represent these roles."}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Keycloak is up and running"}),"\n",(0,i.jsxs)(n.li,{children:["Keycloak is configured as follows","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["A realm called ",(0,i.jsx)(n.code,{children:"my-realm"})," is created"]}),"\n",(0,i.jsxs)(n.li,{children:["A client called ",(0,i.jsx)(n.code,{children:"cloud-agent"})," under ",(0,i.jsx)(n.code,{children:"my-realm"})," with ",(0,i.jsx)(n.strong,{children:"authorization"})," feature is created. (See ",(0,i.jsx)(n.a,{href:"https://www.keycloak.org/docs/latest/authorization_services/index.html#_resource_server_create_client",children:"create client instruction"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Make sure the ",(0,i.jsx)(n.code,{children:"cloud-agent"})," client has ",(0,i.jsx)(n.strong,{children:"direct access grants"})," enabled to simplify the login"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"The Cloud Agent is up and running"}),"\n",(0,i.jsxs)(n.li,{children:["The Cloud Agent is configured with the following environment variables:","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"KEYCLOAK_ENABLED=true"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"KEYCLOAK_URL=http://localhost:9980"})," (replace with appropriate value)"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"KEYCLOAK_REALM=my-realm"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"KEYCLOAK_CLIENT_ID=cloud-agent"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"KEYCLOAK_CLIENT_SECRET=<KEYCLOAK_CLIENT_SECRET>"})," (replace with appropriate value)"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"KEYCLOAL_ROLES_CLAIM_PATH=resource_access.cloud-agent.roles"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"This tutorial will guide you through the steps to configure roles in Keycloak and\ndemonstrate the authorization process as an administrator within the agent,\nenabling you to perform various administrative tasks."}),"\n",(0,i.jsx)(n.p,{children:"Once authorized as an admin, the user gains the ability to manage the wallet;\nhowever, the actual utilization of the wallet remains restricted.\nDespite UMA permissions configured for the user, the agent strictly maintains a clear segregation of roles between administrator and tenant."}),"\n",(0,i.jsx)(n.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,i.jsx)(n.h3,{id:"agent-endpoints",children:"Agent endpoints"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Endpoint"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Role"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"GET /wallets"})}),(0,i.jsx)(n.td,{children:"List the wallets on the Cloud Agent"}),(0,i.jsx)(n.td,{children:"Administrator"})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"keycloak-endpoints",children:"Keycloak endpoints"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Endpoint"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Role"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"POST /realms/{realm}/protocol/openid-connect/token"})}),(0,i.jsx)(n.td,{children:"Issue a new JWT token"}),(0,i.jsx)(n.td,{children:"Administrator"})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"keycloak-administrator-interactions",children:"Keycloak Administrator interactions"}),"\n",(0,i.jsx)(n.h3,{id:"1-configure-keycloak-role-on-the-client",children:"1. Configure Keycloak role on the client"}),"\n",(0,i.jsxs)(n.p,{children:["Open the Keycloak admin UI in the browser and navigate to ",(0,i.jsx)(n.code,{children:"my-realm"})," in the admin UI.\nChoose the corresponding client to create a ",(0,i.jsx)(n.code,{children:"ClientRole"}),".\nChoose ",(0,i.jsx)(n.strong,{children:"Role"})," tab in the client menu and create a new role called ",(0,i.jsx)(n.code,{children:"admin"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(19999).A+"",width:"1036",height:"493"})}),"\n",(0,i.jsxs)(n.h3,{id:"2-assign-the-admin-role-to-the-user",children:["2. Assign the ",(0,i.jsx)(n.code,{children:"admin"})," role to the user"]}),"\n",(0,i.jsx)(n.p,{children:"Once the role gets created, the admin user should be assigned this role.\nFor simplicity, we will assign the role to the user without managing any group or other metadata."}),"\n",(0,i.jsxs)(n.p,{children:["Navigate to ",(0,i.jsx)(n.strong,{children:"Users"})," menu on the sidebar in the admin UI.\nClick on the user that should have the ",(0,i.jsx)(n.code,{children:"admin"})," role.\nChoose ",(0,i.jsx)(n.strong,{children:"Role Mapping"})," tab and click ",(0,i.jsx)(n.strong,{children:"Assign Role"}),".\nChoose ",(0,i.jsx)(n.strong,{children:"Filter by clients"})," in the dropdown menu. Then choose the ",(0,i.jsx)(n.code,{children:"admin"})," role."]}),"\n",(0,i.jsxs)(n.p,{children:["Fore more info on role mapping see the ",(0,i.jsx)(n.a,{href:"https://www.keycloak.org/docs/latest/server_admin/#proc-assigning-role-mappings_server_administration_guide",children:"Keycloak official documentation"}),".\nIf a user does not exist, a new user can be created by following this ",(0,i.jsx)(n.a,{href:"https://www.keycloak.org/docs/latest/server_admin/#proc-creating-user_server_administration_guide",children:"Keycloak official guide"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["After this step, the user should have the ",(0,i.jsx)(n.code,{children:"admin"})," role assigned, and after they log in, the ",(0,i.jsx)(n.code,{children:"roles"})," claim should appear in the JWT payload."]}),"\n",(0,i.jsx)(n.h2,{id:"agent-administrator-interactions",children:"Agent Administrator interactions"}),"\n",(0,i.jsx)(n.h3,{id:"1-obtain-an-access-token-from-keycloak",children:"1. Obtain an access token from Keycloak"}),"\n",(0,i.jsxs)(n.p,{children:["The admin user can log in using any configured authorization flow in Keycloak.\nIn this example, the ",(0,i.jsx)(n.strong,{children:"direct access grant"})," is used to login."]}),"\n",(0,i.jsx)(n.p,{children:"Run the command to log in as admin."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl -X \'POST\' \\\n  \'http://localhost:9980/realms/my-realm/protocol/openid-connect/token\' \\\n  -d "grant_type=password" \\\n  -d "client_id=admin-cli" \\\n  -d "username=alice" \\\n  -d "password=1234"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Example token response (some fields omitted for readability)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "access_token": "eyJhbGciOi...7ocDHofUDQ",\n    "refresh_token": "eyJhbGciOi...otsEEi4eQA",\n    ...\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Inspecting the ",(0,i.jsx)(n.code,{children:"access_token"})," payload, it should have the following content"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "resource_access": {\n    "cloud-agent": {\n      "roles": [\n        "admin"\n      ]\n    },\n    "account": {\n      "roles": [\n        "manage-account",\n        "manage-account-links",\n        "view-profile"\n      ]\n    }\n  },\n  ...\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-perform-a-simple-action-to-verify-admin-rights-on-the-agent",children:"2. Perform a simple action to verify admin rights on the Agent"}),"\n",(0,i.jsxs)(n.p,{children:["To prove that the admin can perform admin tasks,\ntry listing all the tenants' wallets using the JWT in the ",(0,i.jsx)(n.code,{children:"Authorization"})," header."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl --location --request GET 'http://localhost:8080/cloud-agent/wallets' \\\n  -H 'Authorization: Bearer eyJhbGciOi...e7H6W8RUvA' \\\n  -H 'Accept: application/json'\n"})}),"\n",(0,i.jsx)(n.p,{children:"The response should return a list of all wallets on the Agent with HTTP status 200.\nTrying to perform prohibited tenant interactions, such as listing the DIDs in the wallet, will result in an authorization error."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},19999:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/create_client_role-3474981c6b9e06d7a8259fb3c1e94374.png"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(96540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);