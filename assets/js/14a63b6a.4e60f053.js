"use strict";(self.webpackChunkidentus_documentation_portal=self.webpackChunkidentus_documentation_portal||[]).push([[29645],{23553:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>h});var i=n(74848),a=n(28453);const s={},o="Authentication and Authorisation",r={id:"identus/cloud-agent/authentication",title:"Authentication and Authorisation",description:"Authentication is the process of verifying an entity's identity and the tenant associated with the entity.",source:"@site/documentation/home/identus/cloud-agent/authentication.md",sourceDirName:"identus/cloud-agent",slug:"/identus/cloud-agent/authentication",permalink:"/docs/home/identus/cloud-agent/authentication",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Building Blocks",permalink:"/docs/home/identus/cloud-agent/building-blocks"},next:{title:"DID management",permalink:"/docs/home/identus/cloud-agent/did-management"}},l={},h=[{value:"Default Entity and Wallet",id:"default-entity-and-wallet",level:2},{value:"API Key Authentication",id:"api-key-authentication",level:2},{value:"Introduction",id:"introduction",level:3},{value:"Security and Restrictions",id:"security-and-restrictions",level:3},{value:"Agent Responsibilities",id:"agent-responsibilities",level:3},{value:"Single Tenant without apikey authentication",id:"single-tenant-without-apikey-authentication",level:3},{value:"Single Tenant with apikey authentication",id:"single-tenant-with-apikey-authentication",level:3},{value:"Multi-Tenant with apikey authentication",id:"multi-tenant-with-apikey-authentication",level:3},{value:"Multi-Tenant with apikey authentication and auto-provisioning",id:"multi-tenant-with-apikey-authentication-and-auto-provisioning",level:3},{value:"Admin-Api-Key Authentications",id:"admin-api-key-authentications",level:2},{value:"JWT Token Authentication and Authorisation with the Keycloak",id:"jwt-token-authentication-and-authorisation-with-the-keycloak",level:2},{value:"Introduction",id:"introduction-1",level:3},{value:"Sequence Diagrams",id:"sequence-diagrams",level:3},{value:"User onboarding and configuration",id:"user-onboarding-and-configuration",level:4},{value:"User Authentication",id:"user-authentication",level:4},{value:"Role-based authorization",id:"role-based-authorization",level:3},{value:"UMA permission configuration",id:"uma-permission-configuration",level:3},{value:"Migration from <code>apikey</code> authentication",id:"migration-from-apikey-authentication",level:3},{value:"Self-Service Wallet Registration",id:"self-service-wallet-registration",level:2}];function c(e){const t={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"authentication-and-authorisation",children:"Authentication and Authorisation"}),"\n",(0,i.jsx)(t.p,{children:"Authentication is the process of verifying an entity's identity and the tenant associated with the entity.\nAuthorization verifies that an entity has the necessary permissions to access the requested information.\nresource."}),"\n",(0,i.jsx)(t.p,{children:"Authentication and authorization are critical to any identity management system, ensuring only authorized\nusers can access the system and its resources."}),"\n",(0,i.jsx)(t.p,{children:"Cloud Agent provides the following authentication and authorization methods to ensure that the identity of the\nentity is verified and authenticated during interactions with the platform:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"apikey authentication with internal IAM service"}),"\n",(0,i.jsx)(t.li,{children:"admin-api-key authentication"}),"\n",(0,i.jsx)(t.li,{children:"JWT token authentication and authorization with external IAM service Keycloak"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"default-entity-and-wallet",children:"Default Entity and Wallet"}),"\n",(0,i.jsxs)(t.p,{children:["The Cloud Agent uses the Default Entity and the Default Wallet for all interactions with the Agent over the REST API and DIDComm in the single-tenant mode.\nA Default Entity is an entity with the id ",(0,i.jsx)(t.code,{children:"00000000-0000-0000-0000-000000000000"}),", and a Default Wallet is a wallet with the id ",(0,i.jsx)(t.code,{children:"00000000-0000-0000-0000-000000000000"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"api-key-authentication",children:"API Key Authentication"}),"\n",(0,i.jsx)(t.h3,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(t.p,{children:["API Key Authentication is a straightforward method used to authenticate entities by utilizing a secret key. This method requires the inclusion of an ",(0,i.jsx)(t.code,{children:"apikey"})," header in HTTP requests, with the value corresponding to the issued secret key. The configuration of API Key Authentication for an entity is managed by the Administrator using the Entity API methods."]}),"\n",(0,i.jsx)(t.h3,{id:"security-and-restrictions",children:"Security and Restrictions"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"API Key Length"}),": To maintain robust security, the length of the API Key value must exceed 16 bytes (128 bits). This length requirement is essential for enhancing the security of your API Key against potential attacks. The max length of the API Key value is limited to 128 bytes. Unique API Keys: Each API Key is unique to a specific entity. It cannot be shared or reused by other entities. If an attempt to assign the same API Key value to another entity, the API Key is considered compromised and must be considered unusable."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Unique API Keys:"})," Each API Key is unique to a specific entity. It cannot be shared or reused by other entities. If an attempt to assign the same APIKey value to another entity, the APIKey is considered compromised and must be considered unusable."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Revocation:"})," In case of a tenant's API Key revocation, it becomes invalid for authentication."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"agent-responsibilities",children:"Agent Responsibilities"}),"\n",(0,i.jsx)(t.p,{children:"The Agent manages API Keys for each tenant and maintains the security of the system:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"API Key Storage:"})," The Agent maintains each tenant's APIKeys list. However, it is essential to note that the original value of the APIKey is not stored in the Agent, ensuring additional security."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Hashing and Authentication:"})," The Agent securely stores the hash of the APIKey in the database and uses it to authenticate the entity. The hashing process employs the ",(0,i.jsx)(t.code,{children:"SHA-256"})," algorithm and a ",(0,i.jsx)(t.code,{children:"salt"})," value to compute the hash value, ensuring data integrity and security during authentication. The length of the ",(0,i.jsx)(t.code,{children:"salt"})," value must exceed 16 bytes (128 bits)"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Based on the configuration API Key authentication, the Cloud Agent can support the following interaction models:"}),"\n",(0,i.jsx)(t.h3,{id:"single-tenant-without-apikey-authentication",children:"Single Tenant without apikey authentication"}),"\n",(0,i.jsx)(t.p,{children:"Disable API key authentication and use the Default Wallet for all interactions with the Cloud Agent over the REST API and DIDComm."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Environment Variable"}),(0,i.jsx)(t.th,{children:"Value"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"API_KEY_ENABLED"}),(0,i.jsx)(t.td,{children:"false"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"single-tenant-with-apikey-authentication",children:"Single Tenant with apikey authentication"}),"\n",(0,i.jsx)(t.p,{children:"Enable API key authentication and use the Default Wallet for all interactions with the Cloud Agent over the REST API and DIDComm."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Environment Variable"}),(0,i.jsx)(t.th,{children:"Value"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"API_KEY_ENABLED"}),(0,i.jsx)(t.td,{children:"true"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"API_KEY_AUTHENTICATE_AS_DEFAULT_USER"}),(0,i.jsx)(t.td,{children:"true"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"multi-tenant-with-apikey-authentication",children:"Multi-Tenant with apikey authentication"}),"\n",(0,i.jsx)(t.p,{children:"Enable APIKey authentication and use the Entity and the Wallet associated with the API-Key for all interactions with the Cloud Agent. The Administrator must register the Entity and Wallet for the tenant before the first interaction with the Cloud Agent over the REST API."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Environment Variable"}),(0,i.jsx)(t.th,{children:"Value"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"API_KEY_ENABLED"}),(0,i.jsx)(t.td,{children:"true"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"API_KEY_AUTHENTICATE_AS_DEFAULT_USER"}),(0,i.jsx)(t.td,{children:"false"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"multi-tenant-with-apikey-authentication-and-auto-provisioning",children:"Multi-Tenant with apikey authentication and auto-provisioning"}),"\n",(0,i.jsx)(t.p,{children:"Enable APIKey authentication and use the Wallet associated with the APIKey for all interactions with the Cloud Agent. Automatically register the tenant's Entity, Wallet, and API key during the first interaction with the Cloud Agent over the REST API."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Environment Variable"}),(0,i.jsx)(t.th,{children:"Value"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"API_KEY_ENABLED"}),(0,i.jsx)(t.td,{children:"true"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"API_KEY_AUTHENTICATE_AS_DEFAULT_USER"}),(0,i.jsx)(t.td,{children:"false"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"AUTO_PROVISIONING_ENABLED"}),(0,i.jsx)(t.td,{children:"true"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"admin-api-key-authentications",children:"Admin-Api-Key Authentications"}),"\n",(0,i.jsxs)(t.p,{children:["Admin-Api-Key authentication is an authentication method that uses a secret key to authenticate the Administrator. Adding the ",(0,i.jsx)(t.code,{children:"x-admin-api-key"})," header to the HTTP request with the value of the issued secret is required. The value of the ",(0,i.jsx)(t.code,{children:"x-admin-api-key"})," header gets configured in the Cloud Agent at the startup."]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Environment Variable"}),(0,i.jsx)(t.th,{children:"Value"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"ADMIN_API_KEY"}),(0,i.jsx)(t.td,{children:"secret"})]})})]}),"\n",(0,i.jsx)(t.p,{children:"The following REST APIs get protected by the Admin-Api-Key authentication methods:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Wallet Management REST API"}),"\n",(0,i.jsx)(t.li,{children:"Entity Management REST API"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"jwt-token-authentication-and-authorisation-with-the-keycloak",children:"JWT Token Authentication and Authorisation with the Keycloak"}),"\n",(0,i.jsx)(t.h3,{id:"introduction-1",children:"Introduction"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://www.keycloak.org/",children:"Keycloak"})," is an open-source identity and access management solution that provides robust\nauthentication, authorization, and user management capabilities.\nIt allows organizations to secure their applications and services by centralizing user authentication and authorization\nprocesses.\nKeycloak supports various identity protocols, including OAuth 2.0 and OpenID Connect, making it a versatile solution for\nsecuring modern web applications."]}),"\n",(0,i.jsx)(t.p,{children:"The Cloud Agent utilizes the following Keycloak features:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Authentication with JWT Token with a configured flow according to\nthe ",(0,i.jsx)(t.a,{href:"https://staging-docs.atalaprism.io/adrs/adr/20230527-use-keycloak-and-jwt-tokens-for-authentication-and-authorisation-to-facilitate-multitenancy-in-cloud-agent/",children:"ADR"})]}),"\n",(0,i.jsxs)(t.li,{children:["Authentication with JWT Token\nusing ",(0,i.jsx)(t.a,{href:"https://www.keycloak.org/docs/latest/securing_apps/index.html#_token-exchange",children:"token exchange"})]}),"\n",(0,i.jsxs)(t.li,{children:["Authorization with ",(0,i.jsx)(t.code,{children:"roles"})," claim supporting both Keycloak ",(0,i.jsx)(t.a,{href:"https://www.keycloak.org/docs/latest/server_admin/#proc-creating-realm-roles_server_administration_guide",children:"RealmRole"})," and ",(0,i.jsx)(t.a,{href:"https://www.keycloak.org/docs/latest/server_admin/#con-client-roles_server_administration_guide",children:"ClientRole"})]}),"\n",(0,i.jsxs)(t.li,{children:["Authorization with JWT Token and RPT according\nto ",(0,i.jsx)(t.a,{href:"https://www.keycloak.org/docs/latest/authorization_services/index.html#authorization-services",children:"authorization services"}),"\nbased\non ",(0,i.jsx)(t.a,{href:"https://docs.kantarainitiative.org/uma/wg/rec-oauth-uma-grant-2.0.html#:~:text=This%20specification%20defines%20a%20means,a%20resource%20owner%20authorizes%20access.",children:"UMA 2.0 specification"}),"\nand ",(0,i.jsx)(t.a,{href:"https://staging-docs.atalaprism.io/adrs/adr/20230926-use-keycloak-authorisation-service-for-managing-wallet-permissions/",children:"ADR"})]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"When the JWT Token authentication is enabled, it includes protection for all multi-tenant and administrative endpoints of the Cloud Agent.\nTwo mechanisms get utilized in JWT authorization:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Role-based authorization"}),(0,i.jsx)(t.br,{}),"\n","It implements this ",(0,i.jsx)(t.a,{href:"https://staging-docs.atalaprism.io/adrs/adr/20240103-use-jwt-claims-for-agent-admin-auth/",children:"ADR"}),", which can authorize both the administrator and tenant role.\nEach role is allowed to operate on different parts of the Agent\nAdministrators are permitted to oversee the wallet management, while tenants are allowed to utilize the wallet and engage in SSI interactions."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"UMA resource permission"}),(0,i.jsx)(t.br,{}),"\n","When the role is tenant, the Agent must know which wallet the tenant can access.\nThe UMA permission model is employed to configure the tenant's permissions for the wallet."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"sequence-diagrams",children:"Sequence Diagrams"}),"\n",(0,i.jsx)(t.p,{children:"The following sequence diagrams illustrate the Cloud Agent and Keycloak interaction during the authentication and authorization processes."}),"\n",(0,i.jsx)(t.h4,{id:"user-onboarding-and-configuration",children:"User onboarding and configuration"}),"\n",(0,i.jsx)(t.mermaid,{value:"sequenceDiagram\n  participant Admin\n  participant Keycloak\n  participant CloudAgent\n\n  Admin->>Keycloak: 1. Creates User\n  Keycloak--\x3e>Admin: 2. User Created\n\n  Admin->>Keycloak: 3. Configures Authentication Flow\n  Keycloak--\x3e>Admin: 4. Authentication Flow Configured\n\n  Admin->>CloudAgent: 5. Creates Wallet in Agent\n  CloudAgent--\x3e>Admin: 6. Sends Wallet ID\n\n  Admin->>Keycloak: 7. Registers Wallet Resource\n  Keycloak--\x3e>Admin: 8. Resource Registered\n\n  Admin->>CloudAgent: 9. Configures UMA Policy\n  CloudAgent--\x3e>Admin: 10. UMA Policy Configured"}),"\n",(0,i.jsx)(t.h4,{id:"user-authentication",children:"User Authentication"}),"\n",(0,i.jsx)(t.mermaid,{value:"sequenceDiagram\n  participant User\n  participant Keycloak\n  participant Agent\n\n  User->>Keycloak: 1. Initiates Authentication\n  Keycloak->>Keycloak: 2. Authenticates User\n  Keycloak--\x3e>User: 3. Sends JWT Token\n  User->>Agent: 4. Requests API with JWT Token\n  Agent->>Agent: 5. Validates JWT Token\n  Agent->>Keycloak: 6. Requests RPT\n  Keycloak->>Keycloak: 7. Validates JWT Token\n  Keycloak--\x3e>Agent: 8. Sends RPT\n  Agent->>Agent: 9. Validates RPT\n  Agent->>Agent: 10. Performs Operation\n  Agent--\x3e>User: 11. Returns Result"}),"\n",(0,i.jsx)(t.h3,{id:"role-based-authorization",children:"Role-based authorization"}),"\n",(0,i.jsxs)(t.p,{children:["The Agent has a simple mechanism for role-based authorization.\nIt expects the JWT to include a ",(0,i.jsx)(t.code,{children:"roles"})," claim in the payload, identifying the role such as ",(0,i.jsx)(t.code,{children:"admin"})," or ",(0,i.jsx)(t.code,{children:"tenant"}),".\nThe user must belong to one of these roles but not both. If unspecified, the Agent infers the ",(0,i.jsx)(t.code,{children:"tenant"})," role.\nThe location of the ",(0,i.jsx)(t.code,{children:"roles"})," claim is also configurable, allowing flexible IAM configuration.\nAs a result, the Agent can support both Keycloak ",(0,i.jsx)(t.code,{children:"RealmRoles"})," and ",(0,i.jsx)(t.code,{children:"ClientRoles"})," based on the configuration.\nUsing the environment variable, set the path as: ",(0,i.jsx)(t.code,{children:"KEYCLOAK_ROLES_CLAIM_PATH"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["If Keycloak ",(0,i.jsx)(t.code,{children:"RealmrRole"})," is used, follow this ",(0,i.jsx)(t.a,{href:"https://www.keycloak.org/docs/latest/server_admin/#proc-creating-realm-roles_server_administration_guide",children:"instruction"})," on Keycloak\nand the ",(0,i.jsx)(t.code,{children:"KEYCLOAK_ROLES_CLAIM_PATH"})," should be set to ",(0,i.jsx)(t.code,{children:"realm_access.roles"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["If Keycloak ",(0,i.jsx)(t.code,{children:"ClientRole"})," is used, follow this ",(0,i.jsx)(t.a,{href:"https://www.keycloak.org/docs/latest/server_admin/#con-client-roles_server_administration_guide",children:"instruction"})," on Keycloak\nand the ",(0,i.jsx)(t.code,{children:"KEYCLOAK_ROLES_CLAIM_PATH"})," should be set to ",(0,i.jsx)(t.code,{children:"resource_access.<KEYCLOAK_CLIENT_ID>.roles"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"uma-permission-configuration",children:"UMA permission configuration"}),"\n",(0,i.jsx)(t.p,{children:"The current authorization logic is built on the UMA specification, configuring permissions as user A controls resource W. In this model, user A is a registered user in Keycloak, and wallet W is a resource registered in Keycloak."}),"\n",(0,i.jsxs)(t.p,{children:["These configurations are managed manually in Keycloak. However, for a better experience, the Agent can execute these actions through the REST API endpoint.\nFor each wallet, a corresponding resource gets created with the name wallet-",(0,i.jsx)(t.code,{children:"wallet_id"})," in Keycloak.\nSimilarly, a corresponding policy is created for each user and resource with the name user ",(0,i.jsx)(t.code,{children:"userId"})," on wallet ",(0,i.jsx)(t.code,{children:"wallet_resource_name"})," permission."]}),"\n",(0,i.jsx)(t.p,{children:"The REST API endpoint to configure permissions in Keycloak is:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"POST /wallets/{walletId}/uma-permissions\n"})}),"\n",(0,i.jsx)(t.p,{children:"with a body containing subject as UUID."}),"\n",(0,i.jsx)(t.p,{children:"Authenticated users (admin or the user owning the wallet) can configure permissions in Keycloak for the wallet."}),"\n",(0,i.jsxs)(t.h3,{id:"migration-from-apikey-authentication",children:["Migration from ",(0,i.jsx)(t.code,{children:"apikey"})," authentication"]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"apikey"})," authentication can work in parallel with the JWT authentication to call the REST API endpoints together with the JWT token."]}),"\n",(0,i.jsx)(t.p,{children:"The migration from API key authentication to JWT authentication is possible using the following steps:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Create a user in Keycloak."}),"\n",(0,i.jsx)(t.li,{children:"Configure the authentication flow in Keycloak."}),"\n",(0,i.jsx)(t.li,{children:"Call the REST API endpoint to configure permissions in Keycloak with a valid API key token."}),"\n",(0,i.jsx)(t.li,{children:"Authenticate with Keycloak and obtain the JWT token."}),"\n",(0,i.jsx)(t.li,{children:"Call the REST API endpoints with a valid JWT token."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"self-service-wallet-registration",children:"Self-Service Wallet Registration"}),"\n",(0,i.jsx)(t.p,{children:"The Cloud Agent supports self-service wallet registration for the users.\nWhen the user is registered in the Keycloak and has the valid JWT token, the user can register the wallet in the Cloud\nAgent.\nYou can use the wallet management endpoints of the REST API for wallet registration:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'POST /wallets \n{\n    "seed": "secured-seed-value",\n    "name": "wallet-name"\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The user can register the wallet only for himself, so the ",(0,i.jsx)(t.code,{children:"x-api-key"})," header is not required and the ",(0,i.jsx)(t.code,{children:"seed"})," value is not\nshared."]}),"\n",(0,i.jsx)(t.p,{children:"The corresponding wallet resource is created in Keycloak, and the user is granted access to this resource."})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(96540);const a={},s=i.createContext(a);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);