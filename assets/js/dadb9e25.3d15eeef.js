"use strict";(self.webpackChunkidentus_documentation_portal=self.webpackChunkidentus_documentation_portal||[]).push([[79545],{79479:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var s=t(74848),i=t(28453);const r={id:"publishing-did",title:"Publishing a did:prism on Cardano (End-to-End Guide)"},o=void 0,a={id:"prism/publishing-did",title:"Publishing a did:prism on Cardano (End-to-End Guide)",description:"Publishing a did:prism DID on the Cardano blockchain allows you to create a short-form DID that can be easily shared and resolved by others. This guide provides an end-to-end example of how to achieve this in a browser-based environment using React and the Mesh SDK.",source:"@site/sdk-ts/docs/prism/publishing-did.md",sourceDirName:"prism",slug:"/prism/publishing-did",permalink:"/docs/sdk-ts/prism/publishing-did",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"publishing-did",title:"Publishing a did:prism on Cardano (End-to-End Guide)"},sidebar:"tutorialsSidebar",previous:{title:"Resolving a did:prism",permalink:"/docs/sdk-ts/prism/resolving-did"},next:{title:"Backup",permalink:"/docs/sdk-ts/examples/Backup"}},l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Required Packages",id:"required-packages",level:2},{value:"Environment Setup",id:"environment-setup",level:2},{value:"End-to-End Example with React and Mesh",id:"end-to-end-example-with-react-and-mesh",level:2},{value:"Explanation of the Code",id:"explanation-of-the-code",level:3}];function d(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:["Publishing a ",(0,s.jsx)(e.code,{children:"did:prism"})," DID on the Cardano blockchain allows you to create a short-form DID that can be easily shared and resolved by others. This guide provides an end-to-end example of how to achieve this in a browser-based environment using React and the Mesh SDK."]}),"\n",(0,s.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"A CIP30-compliant wallet extension installed in your browser (e.g., Eternl, Nami, or Flint)."}),"\n",(0,s.jsx)(e.li,{children:"Some ADA in your wallet to pay for transaction fees."}),"\n",(0,s.jsxs)(e.li,{children:["A ",(0,s.jsx)(e.a,{href:"https://blockfrost.io/dashboard",children:"Blockfrost"})," API key for a project on the Cardano Mainnet."]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"required-packages",children:"Required Packages"}),"\n",(0,s.jsx)(e.p,{children:"First, you need to install the following packages in your project:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install @hyperledger/identus-sdk @meshsdk/core @meshsdk/react\n"})}),"\n",(0,s.jsx)(e.h2,{id:"environment-setup",children:"Environment Setup"}),"\n",(0,s.jsxs)(e.p,{children:["Create a ",(0,s.jsx)(e.code,{children:".env.local"})," file in your project's root directory and add your Blockfrost API key:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"NEXT_PUBLIC_BLOCKFROST_API_KEY=your_blockfrost_api_key\n"})}),"\n",(0,s.jsx)(e.h2,{id:"end-to-end-example-with-react-and-mesh",children:"End-to-End Example with React and Mesh"}),"\n",(0,s.jsxs)(e.p,{children:["The following example demonstrates the complete process of creating and publishing a ",(0,s.jsx)(e.code,{children:"did:prism"})," DID on Cardano using a React component and the Mesh SDK. This approach simplifies wallet interaction and transaction building."]}),"\n",(0,s.jsxs)(e.p,{children:["To use this component, you must wrap your application with the ",(0,s.jsx)(e.code,{children:"MeshProvider"})," from ",(0,s.jsx)(e.code,{children:"@meshsdk/react"}),"."]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsxs)(e.strong,{children:["Example ",(0,s.jsx)(e.code,{children:"pages/_app.tsx"}),":"]})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'import type { AppProps } from "next/app";\nimport { MeshProvider } from "@meshsdk/react";\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return (\n    <MeshProvider>\n      <Component {...pageProps} />\n    </MeshProvider>\n  );\n}\n\nexport default MyApp;\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example Publishing Component:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'import React, { useState, useCallback } from "react";\nimport SDK from "@hyperledger/identus-sdk";\nimport { useWallet, CardWallet } from "@meshsdk/react";\nimport { Transaction } from "@meshsdk/core";\n\n// Helper to split data into chunks for Cardano metadata\nfunction splitStringIntoChunks(input: Uint8Array, chunkSize = 64): Uint8Array[] {\n    const buffer = Buffer.from(input);\n    const chunks: Uint8Array[] = [];\n    for (let i = 0; i < buffer.length; i += chunkSize) {\n        chunks.push(\n            Uint8Array.from(buffer.slice(i, i + chunkSize))\n        );\n    }\n    return chunks;\n}\n\n// Helper to check for transaction confirmation on Blockfrost\nasync function checkTransactionConfirmation(txHash: string) {\n    // NOTE: This requires a Blockfrost API key to be configured in your environment\n    const projectId = process.env.NEXT_PUBLIC_BLOCKFROST_API_KEY;\n    if (!projectId) {\n        throw new Error("Blockfrost API key is not configured.");\n    }\n    try {\n        const response = await fetch(\n            `https://cardano-mainnet.blockfrost.io/api/v0/txs/${txHash}`,\n            {\n                headers: { project_id: projectId },\n            }\n        );\n        return response.ok;\n    } catch (error) {\n        console.error("Error checking transaction confirmation:", error);\n        return false;\n    }\n}\n\nexport function PublishDidComponent() {\n    const { wallet, connected } = useWallet();\n    const [did, setDid] = useState<SDK.Domain.DID | null>(null);\n    const [txHash, setTxHash] = useState<string | null>(null);\n    const [isPublishing, setIsPublishing] = useState(false);\n    const [isConfirmed, setIsConfirmed] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    const publishDid = useCallback(async () => {\n        if (!connected || !wallet) {\n            setError("Please connect a wallet first.");\n            return;\n        }\n\n        setIsPublishing(true);\n        setError(null);\n        setTxHash(null);\n        setIsConfirmed(false);\n\n        try {\n            // 1. Initialize Apollo and Castor\n            const apollo = new SDK.Apollo();\n            const castor = new SDK.Castor(apollo);\n\n            // 2. Create a master key and a DID\n            const masterPrivateKey = apollo.createPrivateKey({\n                type: SDK.Domain.KeyTypes.EC,\n                curve: SDK.Domain.Curve.SECP256K1,\n                seed: Buffer.from(apollo.createRandomSeed().seed.value).toString("hex"),\n            });\n            \n            const services: SDK.Domain.Service[] = []; // Add any services if needed\n            const newDid = await castor.createPrismDID(masterPrivateKey, services);\n            setDid(newDid);\n\n            // 3. Prepare the metadata for the transaction\n            const atalaObject = await castor.createPrismDIDAtalaObject(masterPrivateKey, newDid);\n            const metadataBody = {\n                v: 1,\n                c: splitStringIntoChunks(atalaObject),\n            };\n\n            // 4. Build, sign, and submit the transaction with Mesh\n            const tx = new Transaction({ initiator: wallet })\n                .setMetadata(21325, metadataBody);\n\n            const unsignedTx = await tx.build();\n            const signedTx = await wallet.signTx(unsignedTx);\n            const submittedTxHash = await wallet.submitTx(signedTx);\n            setTxHash(submittedTxHash);\n\n            // 5. Wait for confirmation\n            console.log(`Transaction submitted. Hash: ${submittedTxHash}. Waiting for confirmation...`);\n            let confirmed = false;\n            while (!confirmed) {\n                await new Promise(resolve => setTimeout(resolve, 15000)); // Wait 15s\n                confirmed = await checkTransactionConfirmation(submittedTxHash);\n            }\n            \n            setIsConfirmed(true);\n            console.log("Transaction confirmed! DID published successfully.");\n\n        } catch (err) {\n            console.error(err);\n            setError(err instanceof Error ? err.message : "An unknown error occurred.");\n        } finally {\n            setIsPublishing(false);\n        }\n    }, [wallet, connected]);\n\n    return (\n        <div>\n            <h2>Publish a did:prism DID</h2>\n            {!connected ? (\n                <CardWallet />\n            ) : (\n                <button onClick={publishDid} disabled={isPublishing}>\n                    {isPublishing ? "Publishing..." : "Create and Publish DID"}\n                </button>\n            )}\n\n            {error && <p style={{ color: "red" }}>Error: {error}</p>}\n            \n            {did && <p>DID created: {did.toString()}</p>}\n\n            {txHash && (\n                <div>\n                    <p>Transaction Hash: {txHash}</p>\n                    <p>\n                        <a href={`https://cardanoscan.io/transaction/${txHash}`} target="_blank" rel="noopener noreferrer">\n                            View on Cardanoscan\n                        </a>\n                    </p>\n                </div>\n            )}\n            \n            {isPublishing && !isConfirmed && <p>Waiting for transaction confirmation...</p>}\n            {isConfirmed && <p style={{ color: "green" }}>DID Published Successfully!</p>}\n        </div>\n    );\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"explanation-of-the-code",children:"Explanation of the Code"}),"\n",(0,s.jsxs)(e.p,{children:["This example provides a self-contained React component, ",(0,s.jsx)(e.code,{children:"PublishDidComponent"}),", that handles the entire lifecycle of creating and publishing a ",(0,s.jsx)(e.code,{children:"did:prism"}),"."]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Component Setup and Helpers:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"The component uses React state to manage the DID, transaction status, and any potential errors."}),"\n",(0,s.jsxs)(e.li,{children:["It uses the ",(0,s.jsx)(e.code,{children:"useWallet"})," hook from ",(0,s.jsx)(e.code,{children:"@meshsdk/react"})," to get the connected wallet's state and instance."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"splitStringIntoChunks"})," is a helper function to correctly format the DID operation data for Cardano's transaction metadata."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"checkTransactionConfirmation"})," is a helper to poll the Blockfrost API and verify when the transaction is confirmed on the blockchain."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsxs)(e.strong,{children:[(0,s.jsx)(e.code,{children:"publishDid"})," Function:"]})," This is the core logic, triggered by a button click."]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Initialization:"})," It initializes the ",(0,s.jsx)(e.code,{children:"Apollo"})," and ",(0,s.jsx)(e.code,{children:"Castor"})," modules from the Atala PRISM SDK."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"DID Creation:"})," It creates a new master private key and uses it to generate a new, unpublished ",(0,s.jsx)(e.code,{children:"did:prism"}),"."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Metadata Preparation:"})," It calls ",(0,s.jsx)(e.code,{children:"createPrismDIDAtalaObject"})," to generate the specific data structure required for the publication operation. This data is then chunked for the metadata."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Transaction with Mesh:"})," It uses Mesh's ",(0,s.jsx)(e.code,{children:"Transaction"})," builder, which provides a simple and elegant API. It sets the metadata for the transaction using the standard label for PRISM DID operations (",(0,s.jsx)(e.code,{children:"21325"}),")."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Signing and Submission:"})," The transaction is built, signed by the user through their connected wallet, and submitted to the blockchain."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Confirmation:"})," The component then polls for confirmation and updates the UI to reflect the successful publication."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"User Interface:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["It renders Mesh's ",(0,s.jsx)(e.code,{children:"CardWallet"})," component to allow users to easily connect their CIP30 wallet."]}),"\n",(0,s.jsx)(e.li,{children:"Once connected, it displays a button to initiate the publishing process."}),"\n",(0,s.jsx)(e.li,{children:"It provides real-time feedback to the user, showing the created DID, transaction hash, and final confirmation status."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["After the transaction is confirmed, your ",(0,s.jsx)(e.code,{children:"did:prism"})," is published on the Cardano blockchain, and its short-form DID can be resolved by anyone."]})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>a});var s=t(96540);const i={},r=s.createContext(i);function o(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);