"use strict";(self.webpackChunkidentus_documentation_portal=self.webpackChunkidentus_documentation_portal||[]).push([[7285],{56595:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var a=t(74848),i=t(28453);const s={},o="Creating the Cloud Agent wallet seed",r={id:"secrets/seed-generation",title:"Creating the Cloud Agent wallet seed",description:"Introduction",source:"@site/identus-cloud-agent/docs/docusaurus/secrets/seed-generation.md",sourceDirName:"secrets",slug:"/secrets/seed-generation",permalink:"/tutorials/secrets/seed-generation",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialsSidebar",previous:{title:"Operating an agent with secrets",permalink:"/tutorials/secrets/operation"},next:{title:"Webhook Notifications",permalink:"/tutorials/webhooks/webhook"}},d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"1. Static seed",id:"1-static-seed",level:3},{value:"2. Simple dynamic seed",id:"2-simple-dynamic-seed",level:3},{value:"3. Use BIP39 implementation to generate a seed (recommended)",id:"3-use-bip39-implementation-to-generate-a-seed-recommended",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"creating-the-cloud-agent-wallet-seed",children:"Creating the Cloud Agent wallet seed"}),"\n",(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(n.p,{children:"The Cloud Agent utilizes a hierarchical-deterministic key derivation algorithm for managing PRISM DIDs,\nwhich follows the BIP32 standard. In order to generate the required keys,\nBIP32 uses a master binary seed serving as the root of the derivation tree,\nand all other keys are derived from this seed.\nGiven that the Cloud Agent employs BIP32, it expects a 64-byte binary seed as input.\nVarious methods exist for generating a byte sequence, each serving different purposes."}),"\n",(0,a.jsxs)(n.p,{children:["The Cloud Agent does not have any opinion on how the seed should be generated as long as a valid hex string is provided.\nHowever, it is strongly recommended to use high entropy for generating the master seed.\nThe Cloud Agent allows customizing the default wallet seed by using the environment variable ",(0,a.jsx)(n.code,{children:"DEFAULT_WALLET_SEED"}),".\nOther wallet seeds can also be configured when creating a wallet using REST API.\nThe variable must contain a 64-byte value encoded in hexadecimal format."]}),"\n",(0,a.jsx)(n.h3,{id:"1-static-seed",children:"1. Static seed"}),"\n",(0,a.jsx)(n.p,{children:"The Cloud Agent expects any valid 64-byte input for a wallet seed.\nAny static 128-character hexadecimal string can be used to simplify the testing."}),"\n",(0,a.jsx)(n.p,{children:"For example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"# Any of these are valid\nDEFAULT_WALLET_SEED=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nDEFAULT_WALLET_SEED=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\nDEFAULT_WALLET_SEED=0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Note: Do not use method this in production."})}),"\n",(0,a.jsx)(n.h3,{id:"2-simple-dynamic-seed",children:"2. Simple dynamic seed"}),"\n",(0,a.jsx)(n.p,{children:"Users have the option to create a random hexadecimal string of a desired length using scripting languages\nlike Bash or Python. An example of a Bash script is shown below."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"DEFAULT_WALLET_SEED=$(tr -dc a-f0-9 </dev/urandom | head -c 128 ; echo '')\n"})}),"\n",(0,a.jsx)(n.p,{children:"This approach is suitable for basic testing scenarios requiring dynamically generated seeds.\nHowever, for production use, it is advisable to employ a reputable implementation of BIP39\nwith a high level of entropy. (Refer to the details below for further information.)"}),"\n",(0,a.jsx)(n.h3,{id:"3-use-bip39-implementation-to-generate-a-seed-recommended",children:"3. Use BIP39 implementation to generate a seed (recommended)"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki#user-content-From_mnemonic_to_seed",children:"BIP39"}),"\nprotocol can be utilized to generate a BIP32 master seed, offering a human-friendly approach to seed management.\nInstead of noting down a seemingly random hexadecimal string,\nusers can write down their mnemonic phrase, making it more convenient to keep track of them."]}),"\n",(0,a.jsx)(n.p,{children:"By using BIP39, users have options to choose a mnemonic phrase length as well as a passphrase.\nThere are many tools for generating a BIP39 seed including but not limited to:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://iancoleman.io/bip39/",children:"BIP39"})," (use the BIP39 seed field which provides a 128-chars hex string)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki#other-implementations",children:"BIP39 - implementations section"})," also provides a list of implementations"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var a=t(96540);const i={},s=a.createContext(i);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);