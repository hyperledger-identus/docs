"use strict";(self.webpackChunkidentus_documentation_portal=self.webpackChunkidentus_documentation_portal||[]).push([[8709],{26594:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>o,frontMatter:()=>a,metadata:()=>c,toc:()=>h});var s=i(74848),t=i(28453);const a={},r="Create the credential schema",c={id:"schemas/create",title:"Create the credential schema",description:"The Identus Platform exposes REST API for creation, fetching, and searching the credential schema records.",source:"@site/identus-cloud-agent/docs/docusaurus/schemas/create.md",sourceDirName:"schemas",slug:"/schemas/create",permalink:"/tutorials/schemas/create",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialsSidebar",previous:{title:"Credential Schema Introduction",permalink:"/tutorials/schemas/credential-schema"},next:{title:"Update the credential schema",permalink:"/tutorials/schemas/update"}},d={},h=[{value:"Step-by-step guide",id:"step-by-step-guide",level:2},{value:"1. Define the JSON Schema for the Verifiable Credential",id:"1-define-the-json-schema-for-the-verifiable-credential",level:3},{value:"2. Create the credential schema record",id:"2-create-the-credential-schema-record",level:3},{value:"3. Retrieve the created schema",id:"3-retrieve-the-created-schema",level:3},{value:"4. Update the credential schema",id:"4-update-the-credential-schema",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"create-the-credential-schema",children:"Create the credential schema"}),"\n",(0,s.jsxs)(n.p,{children:["The Identus Platform exposes REST API for creation, fetching, and searching the ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary#credential-schema",children:"credential schema"})," records."]}),"\n",(0,s.jsx)(n.p,{children:"The OpenAPI specification and ReDoc documentation describe the endpoint."}),"\n",(0,s.jsx)(n.p,{children:"In this document, you can find step-by-step instructions for creating the credential schema."}),"\n",(0,s.jsx)(n.h2,{id:"step-by-step-guide",children:"Step-by-step guide"}),"\n",(0,s.jsx)(n.p,{children:"The following guide demonstrates how to create a driving license credential schema."}),"\n",(0,s.jsx)(n.h3,{id:"1-define-the-json-schema-for-the-verifiable-credential",children:"1. Define the JSON Schema for the Verifiable Credential"}),"\n",(0,s.jsxs)(n.p,{children:["Assume that you need a credential schema for the driving license, and the ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary#verifiable-credential",children:"verifiable credential"})," must have the following\nfields:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"emailAddress - the email address of the driver"}),"\n",(0,s.jsx)(n.li,{children:"givenName - the first name of the driver"}),"\n",(0,s.jsx)(n.li,{children:"familyName - the family name of the driver"}),"\n",(0,s.jsx)(n.li,{children:"dateOfIssuance - date of the driver's license issuance"}),"\n",(0,s.jsx)(n.li,{children:"drivingLicenseID - ID of the driving license"}),"\n",(0,s.jsx)(n.li,{children:"drivingClass - driving class that denotes which types of vehicles the driver is allowed to go.\nAlso, let's assume that the driving license might have additional optional claims."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For the above fields, the JSON Schema definition must be:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "$id": "https://example.com/driving-license-1.0.0",\n  "$schema": "https://json-schema.org/draft/2020-12/schema",\n  "description": "Driving License",\n  "type": "object",\n  "properties": {\n    "emailAddress": {\n      "type": "string",\n      "format": "email"\n    },\n    "givenName": {\n      "type": "string"\n    },\n    "familyName": {\n      "type": "string"\n    },\n    "dateOfIssuance": {\n      "type": "string",\n      "format": "date-time"\n    },\n    "drivingLicenseID": {\n      "type": "string"\n    },\n    "drivingClass": {\n      "type": "integer"\n    }\n  },\n  "required": [\n    "emailAddress",\n    "familyName",\n    "dateOfIssuance",\n    "drivingLicenseID",\n    "drivingClass"\n  ],\n  "additionalProperties": true\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The fields ",(0,s.jsx)(n.code,{children:"$id"})," and ",(0,s.jsx)(n.code,{children:"$schema"})," must correspond values that describe"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["the identity of the given JSON Schema as a ",(0,s.jsx)(n.strong,{children:"correctly formatted URL"})," ",(0,s.jsx)(n.code,{children:"https://example.com/driving-license-1.0.0"})," and"]}),"\n",(0,s.jsxs)(n.li,{children:["the meta schema fixed to ",(0,s.jsx)(n.code,{children:"https://json-schema.org/draft/2020-12/schema"})," which is the only supported value"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["All the claims are listed under the ",(0,s.jsx)(n.code,{children:"properties"})," object with corresponding ",(0,s.jsx)(n.code,{children:"type"}),"s and ",(0,s.jsx)(n.code,{children:"format"}),"s according to JSON\nSpecification."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"additionalProperties"})," is set to true, meaning adding other fields to the verifiable credential is possible."]}),"\n",(0,s.jsx)(n.h3,{id:"2-create-the-credential-schema-record",children:"2. Create the credential schema record"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Open your preferred REST API client, such as Postman or Insomnia, or use the client stub generated based on the\nOpenAPI specification."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In the client, create a new POST request to the ",(0,s.jsx)(n.code,{children:"/cloud-agent/schema-registry/schemas"})," endpoint."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Note that the value of the ",(0,s.jsx)(n.code,{children:"author"})," field must match the short form of a PRISM DID that has been created using the same agent. An unpublished DID is sufficient. Please refer to the ",(0,s.jsx)(n.a,{href:"/tutorials/dids/create",children:"Create DID"})," documentation page for more details on how to create a PRISM DID."]}),"\n",(0,s.jsx)(n.p,{children:"In the request body, create a JSON object:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "name": "driving-license",\n  "version": "1.0.0",\n  "description": "Driving License Schema",\n  "type": "https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json",\n  "author": "did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff",\n  "tags": [\n    "driving",\n    "license"\n  ],\n  "schema": {\n    "$id": "https://example.com/driving-license-1.0.0",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "description": "Driving License",\n    "type": "object",\n    "properties": {\n      "emailAddress": {\n        "type": "string",\n        "format": "email"\n      },\n      "givenName": {\n        "type": "string"\n      },\n      "familyName": {\n        "type": "string"\n      },\n      "dateOfIssuance": {\n        "type": "string",\n        "format": "date-time"\n      },\n      "drivingLicenseID": {\n        "type": "string"\n      },\n      "drivingClass": {\n        "type": "integer"\n      }\n    },\n    "required": [\n      "emailAddress",\n      "familyName",\n      "dateOfIssuance",\n      "drivingLicenseID",\n      "drivingClass"\n    ],\n    "additionalProperties": true\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Send the POST request to create the new schema. The response should contain a GUID that uniquely identifies the new\nschema.\nCurl example is the following:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'curl -X \'POST\' \\\n  \'http://localhost:8080/cloud-agent/schema-registry/schemas\' \\\n  -H \'accept: application/json\' \\\n  -H "apikey: $API_KEY" \\\n  -H \'Content-Type: application/json\' \\\n  -d \'{\n  "name": "driving-license",\n  "version": "1.0.0",\n  "description": "Driving License Schema",\n  "type": "https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json",\n  "author": "did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff",\n  "tags": [\n    "driving",\n    "license"\n  ],\n  "schema": {\n    "$id": "https://example.com/driving-license-1.0.0",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "description": "Driving License",\n    "type": "object",\n    "properties": {\n      "emailAddress": {\n        "type": "string",\n        "format": "email"\n      },\n      "givenName": {\n        "type": "string"\n      },\n      "familyName": {\n        "type": "string"\n      },\n      "dateOfIssuance": {\n        "type": "string",\n        "format": "date-time"\n      },\n      "drivingLicenseID": {\n        "type": "string"\n      },\n      "drivingClass": {\n        "type": "integer"\n      }\n    },\n    "required": [\n      "emailAddress",\n      "familyName",\n      "dateOfIssuance",\n      "drivingLicenseID",\n      "drivingClass"\n    ],\n    "additionalProperties": true\n  }\n}\'\n'})}),"\n",(0,s.jsx)(n.p,{children:"...and response might be the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "guid": "3f86a73f-5b78-39c7-af77-0c16123fa9c2",\n  "id": "f2bfbf78-8bd6-4cc6-8b39-b3a25e01e8ea",\n  "longId": "did:prism:agent/f2bfbf78-8bd6-4cc6-8b39-b3a25e01e8ea?version=1.0.0",\n  "name": "driving-license",\n  "version": "1.0.0",\n  "description": "Driving License Schema",\n  "type": "https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json",\n  "author": "did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff",\n  "authored": "2023-03-14T14:41:46.713943Z",\n  "tags": [\n    "driving",\n    "license"\n  ],\n  "schema": {\n    "$id": "https://example.com/driving-license-1.0.0",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "description": "Driving License",\n    "type": "object",\n    "properties": {\n      "emailAddress": {\n        "type": "string",\n        "format": "email"\n      },\n      "givenName": {\n        "type": "string"\n      },\n      "familyName": {\n        "type": "string"\n      },\n      "dateOfIssuance": {\n        "type": "string",\n        "format": "date-time"\n      },\n      "drivingLicenseID": {\n        "type": "string"\n      },\n      "drivingClass": {\n        "type": "integer"\n      }\n    },\n    "required": [\n      "emailAddress",\n      "familyName",\n      "dateOfIssuance",\n      "drivingLicenseID",\n      "drivingClass"\n    ],\n    "additionalProperties": true\n  },\n  "kind": "CredentialSchema",\n  "self": "/schema-registry/schemas/3f86a73f-5b78-39c7-af77-0c16123fa9c2"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-retrieve-the-created-schema",children:"3. Retrieve the created schema"}),"\n",(0,s.jsxs)(n.p,{children:["To retrieve the newly created schema, create a new GET request to the ",(0,s.jsx)(n.code,{children:"/cloud-agent/schema-registry/schemas/{guid}"}),"\nendpoint, where ",(0,s.jsx)(n.code,{children:"{guid}"})," is the GUID returned in the response from the previous step.\nSend the GET request to retrieve the schema. Curl example is the following:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"curl -X 'GET' \\\n  'http://localhost:8080/cloud-agent/schema-registry/schemas/3f86a73f-5b78-39c7-af77-0c16123fa9c2' \\\n  -H 'accept: application/json' \\\n  -H \"apikey: $API_KEY\"\n"})}),"\n",(0,s.jsx)(n.p,{children:"The response should contain the JSON object representing the schema you just created."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "guid": "3f86a73f-5b78-39c7-af77-0c16123fa9c2",\n  "id": "f2bfbf78-8bd6-4cc6-8b39-b3a25e01e8ea",\n  "longId": "did:prism:agent/f2bfbf78-8bd6-4cc6-8b39-b3a25e01e8ea?version=1.0.0",\n  "name": "driving-license",\n  "version": "1.0.0",\n  "description": "Driving License Schema",\n  "type": "https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json",\n  "author": "did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff",\n  "authored": "2023-03-14T14:41:46.713943Z",\n  "tags": [\n    "driving",\n    "license"\n  ],\n  "schema": {\n    "$id": "https://example.com/driving-license-1.0.0",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "description": "Driving License",\n    "type": "object",\n    "properties": {\n      "emailAddress": {\n        "type": "string",\n        "format": "email"\n      },\n      "givenName": {\n        "type": "string"\n      },\n      "familyName": {\n        "type": "string"\n      },\n      "dateOfIssuance": {\n        "type": "string",\n        "format": "date-time"\n      },\n      "drivingLicenseID": {\n        "type": "string"\n      },\n      "drivingClass": {\n        "type": "integer"\n      }\n    },\n    "required": [\n      "emailAddress",\n      "familyName",\n      "dateOfIssuance",\n      "drivingLicenseID",\n      "drivingClass"\n    ],\n    "additionalProperties": true\n  },\n  "kind": "CredentialSchema",\n  "self": "/schema-registry/schemas/3f86a73f-5b78-39c7-af77-0c16123fa9c2"\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The Cloud Agent instance's triple ",(0,s.jsx)(n.code,{children:"author"}),", ",(0,s.jsx)(n.code,{children:"id"}),", and ",(0,s.jsx)(n.code,{children:"version"})," are unique.\nSo, having a single ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary#decentralized-identifier",children:"DID"})," reference that the author uses, creating the credential schema with the same ",(0,s.jsx)(n.code,{children:"id"})," and ",(0,s.jsx)(n.code,{children:"version"}),"\nis impossible."]}),"\n",(0,s.jsx)(n.h3,{id:"4-update-the-credential-schema",children:"4. Update the credential schema"}),"\n",(0,s.jsx)(n.p,{children:"To upgrade the credential schema, you need to perform the following steps:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Start from the first step and change the JSON Schema"}),"\n",(0,s.jsxs)(n.li,{children:["Change the ",(0,s.jsx)(n.code,{children:"version"})," according to the nature of your change"]}),"\n",(0,s.jsx)(n.li,{children:"Create a new credential schema record with a higher version"}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var s=i(96540);const t={},a=s.createContext(t);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);