"use strict";(self.webpackChunkidentus_documentation_portal=self.webpackChunkidentus_documentation_portal||[]).push([[7064],{99272:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>c,toc:()=>h});var s=t(74848),i=t(28453),r=t(11470),a=t(19365);const l={sidebar_position:1},o="Quick Start Guide",c={id:"quick-start",title:"Quick Start Guide",description:"Introduction into Self Sovereign Identity (SSI)",source:"@site/documentation/docs/quick-start.md",sourceDirName:".",slug:"/quick-start",permalink:"/identus-docs/docs/quick-start",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Getting Started",permalink:"/identus-docs/docs/getting-started"},next:{title:"Concepts",permalink:"/identus-docs/docs/category/concepts"}},d={},h=[{value:"Introduction into Self Sovereign Identity (SSI)",id:"introduction-into-self-sovereign-identity-ssi",level:2},{value:"Hyperledger Identus flow",id:"hyperledger-identus-flow",level:2},{value:"An overview of Hyperledger Identus components",id:"an-overview-of-hyperledger-identus-components",level:2},{value:"A Cloud Agent",id:"a-cloud-agent",level:3},{value:"Wallet SDKs",id:"wallet-sdks",level:3},{value:"Mediator",id:"mediator",level:3},{value:"Node for a Verifiable Data Registry (VDR)",id:"node-for-a-verifiable-data-registry-vdr",level:4},{value:"Pre-Requisites",id:"pre-requisites",level:2},{value:"Agent Deployment",id:"agent-deployment",level:3},{value:"Agent configuration",id:"agent-configuration",level:3},{value:"Creating LongForm PrismDID",id:"creating-longform-prismdid",level:4},{value:"Create a credential schema (JWT W3C Credential)",id:"create-a-credential-schema-jwt-w3c-credential",level:4},{value:"Starting Sample App",id:"starting-sample-app",level:3},{value:"Deploy &amp; Establish Mediation",id:"deploy--establish-mediation",level:3},{value:"Preparation",id:"preparation",level:4},{value:"Demo application",id:"demo-application",level:4},{value:"Establish Holder connections",id:"establish-holder-connections",level:2},{value:"Establish a connection - Agent side",id:"establish-a-connection---agent-side",level:3},{value:"Establish connection on the Issuer Cloud Agent",id:"establish-connection-on-the-issuer-cloud-agent",level:4},{value:"Establish connection on the Verifier Cloud Agent",id:"establish-connection-on-the-verifier-cloud-agent",level:4},{value:"Establish a connection - Holder side",id:"establish-a-connection---holder-side",level:3},{value:"Demo application",id:"demo-application-1",level:4},{value:"Issue a Credential from the Issuer to the holder",id:"issue-a-credential-from-the-issuer-to-the-holder",level:2},{value:"Create a Credential Offer with an existing connection <strong>Issuer Agent</strong>",id:"create-a-credential-offer-with-an-existing-connection-issuer-agent",level:3},{value:"Create a Credential Offer as Invitation for connectionless issuance <strong>Issuer Agent</strong>",id:"create-a-credential-offer-as-invitation-for-connectionless-issuance-issuer-agent",level:3},{value:"Accept Credential Offer Invitation for connectionless issuance <strong>Holder</strong>",id:"accept-credential-offer-invitation-for-connectionless-issuance-holder",level:3},{value:"Demo application",id:"demo-application-2",level:4},{value:"Create CredentialRequest from CredentialOffer <strong>Holder</strong>",id:"create-credentialrequest-from-credentialoffer-holder",level:3},{value:"Demo application",id:"demo-application-3",level:4},{value:"Store the Issued Credential [Holder]",id:"store-the-issued-credential-holder",level:3},{value:"Request a verification from the Verifier Cloud Agent to the Holder (JWT W3C Credential)",id:"request-a-verification-from-the-verifier-cloud-agent-to-the-holder-jwt-w3c-credential",level:2},{value:"Verifier Agent",id:"verifier-agent",level:3},{value:"Accept Request Presentation invitation for connectionless verification <strong>Holder</strong>",id:"accept-request-presentation-invitation-for-connectionless-verification-holder",level:3},{value:"Demo application",id:"demo-application-4",level:4},{value:"Holder: Receives the Presentation proof request",id:"holder-receives-the-presentation-proof-request",level:3},{value:"Verifier: Will then check on the API if the Presentation Request has been completed or not.",id:"verifier-will-then-check-on-the-api-if-the-presentation-request-has-been-completed-or-not",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"quick-start-guide",children:"Quick Start Guide"}),"\n",(0,s.jsx)(n.h2,{id:"introduction-into-self-sovereign-identity-ssi",children:"Introduction into Self Sovereign Identity (SSI)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#self-sovereign-identity",children:"Self-sovereign identity (SSI)"})," is complex. This Quick Start Guide explains the fundamental concepts to get up and running with Hyperledger Identus. This guide will familiarize you with the general concepts and how to create ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#decentralized-identifier",children:"decentralized identifiers (DIDs)"}),", issue credentials, make connections, and verify credentials with ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#verifiable-presentation",children:"verifiable presentations"}),". Refer to the Concepts and Components sections for a more in-depth explanation."]}),"\n",(0,s.jsxs)(n.p,{children:["The trust triangle is the most basic process for conveying trust in the digital world. There are three roles in an SSI ecosystem: ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#holder",children:"Holders"}),", ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#issuer",children:"Issuers"}),", and ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#verifier",children:"Verifiers"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Component Diagram",src:t(87248).A+"",width:"4811",height:"3241"})}),"\n",(0,s.jsxs)(n.p,{children:["Holders can be any entity, such as individuals, organizations, and digital or physical things. They will hold ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#verifiable-credential",children:"verifiable credentials (VCs)"})," and use a verifiable presentation to share their VCs."]}),"\n",(0,s.jsxs)(n.p,{children:["Issuers can also be any entity that makes ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#claim",children:"claims"})," about an ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#entity",children:"entity"}),". These claims are attestations, or evidence of something, about the Holder. As an example, an insurance company would provide proof of valid insurance."]}),"\n",(0,s.jsxs)(n.p,{children:["Verifiers are the ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#relying-party",children:"relying party"})," in the triangle. They will request information from the Holder, such as proof of insurance, and the Holder will use a verifiable presentation to share the appropriate VCs with the Verifier. The Holder's digital signature, the issuer DID get verified, and the contents therein to ensure nothing has been tampered with."]}),"\n",(0,s.jsx)(n.h2,{id:"hyperledger-identus-flow",children:"Hyperledger Identus flow"}),"\n",(0,s.jsx)(n.p,{children:"The diagram details how the concepts fit alongside the Identus components in a typical SSI interaction."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Component Diagram",src:t(97354).A+"",width:"4811",height:"3837"})}),"\n",(0,s.jsx)(n.h2,{id:"an-overview-of-hyperledger-identus-components",children:"An overview of Hyperledger Identus components"}),"\n",(0,s.jsxs)(n.p,{children:["Identus consists of core libraries that facilitate typical SSI interactions between ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#issuer",children:"Issuers"}),", ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#holder",children:"Holders"}),", and ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#verifier",children:"Verifiers"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"a-cloud-agent",children:"A Cloud Agent"}),"\n",(0,s.jsxs)(n.p,{children:["A Cloud Agent can issue, hold, and verify ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#verifiable-credentials",children:"verifiable credentials (VCs)"})," for any entity and manage ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#decentralized-identifier",children:"decentralized identifiers (DIDs)"})," and DID-based connections. The Cloud Agent has an easy-to-use REST API to enable easy integration into any solution and uses ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#didcomm",children:"DIDComm V2"})," as a messaging protocol for Cloud Agent-to-Cloud Agent communication."]}),"\n",(0,s.jsxs)(n.p,{children:["It is maintained as an open source through the ",(0,s.jsx)(n.a,{href:"https://www.hyperledger.org/projects/identus",children:"Hyperledger Identus"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["More in depth documentation about ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#cloud-agent",children:"Cloud Agent"})," can be found ",(0,s.jsx)(n.a,{href:"/docs/identus/cloud-agent/overview",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"wallet-sdks",children:"Wallet SDKs"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#wallet-sdk",children:"Wallet SDKs"})," for web and mobile (iOS, Android, TypeScript) enable identity holders to store credentials and respond to proof requests. They are typically used in applications that allow identity holders to interact with issuers and verifiers."]}),"\n",(0,s.jsxs)(n.p,{children:["More in-depth documentation about the different Wallet SDKs can be found here (",(0,s.jsx)(n.a,{href:"https://input-output-hk.github.io/identus-docs/identus-edge-agent-sdk-ts/sdk",children:"TypeScript"}),", ",(0,s.jsx)(n.a,{href:"https://input-output-hk.github.io/atala-prism-wallet-sdk-swift/",children:"Swift"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/hyperledger/identus-edge-agent-sdk-kmp",children:"KMP"}),")"]}),"\n",(0,s.jsx)(n.h3,{id:"mediator",children:"Mediator"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#mediator",children:"Mediators"})," are for storing and relaying messages between Cloud Agents and Wallet SDKs. They act as a proxy that remains connected to the network and receives any message, credential, or proof request on behalf of the Wallet SDKs (which can be offline occasionally)."]}),"\n",(0,s.jsxs)(n.p,{children:["More in-depth documentation about Mediator can be found ",(0,s.jsx)(n.a,{href:"/docs/identus/mediator",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"node-for-a-verifiable-data-registry-vdr",children:"Node for a Verifiable Data Registry (VDR)"}),"\n",(0,s.jsxs)(n.p,{children:["To issue and verify VCs to and from DIDs, we need a ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#verifiable-data-registry",children:"Verifiable Data Registry (VDR)"})," that is globally resolvable and always on. In Identus's case, it is ",(0,s.jsx)(n.code,{children:"prism-node"}),", ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#anchoring",children:"anchoring"})," key information required for issuance and verification on the Distributed Ledger."]}),"\n",(0,s.jsx)(n.h2,{id:"pre-requisites",children:"Pre-Requisites"}),"\n",(0,s.jsx)(n.h3,{id:"agent-deployment",children:"Agent Deployment"}),"\n",(0,s.jsxs)(n.p,{children:["This guide will demonstrate a single-tenant deployment with API Key authentication disabled and an in-memory ledger for published DID storage, which is the simplest configuration to get started as a developer. More advanced configuration options can be found in ",(0,s.jsx)(n.a,{href:"/tutorials/multitenancy/tenant-onboarding",children:"Multi-Tenancy Management"})," and associated ",(0,s.jsx)(n.a,{href:"/docs/identus/cloud-agent/environment-variables",children:"Environment Variables"})," configuration options."]}),"\n",(0,s.jsx)(n.p,{children:"We develop on modern machines equipped with either Intel based x64 processors or Apple ARM processors with a minimum of four cores, 16 GB of memory and 128GB+ of SSD-type storage."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"To spin up an Cloud Agent you must:"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Have Git installed."}),"\n",(0,s.jsx)(n.li,{children:"Have Docker installed."}),"\n",(0,s.jsxs)(n.li,{children:["Clone the ",(0,s.jsx)(n.a,{href:"https://github.com/hyperledger/identus-cloud-agent",children:"Identus Cloud Agent repository"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/hyperledger/identus-cloud-agent\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["Once cloned, create a new file named  ",(0,s.jsx)(n.strong,{children:"./identus-cloud-agent/infrastructure/local/.env-issuer"})," to define the Issuer Agent environment variable configuration with the following content:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"API_KEY_ENABLED=false\nAGENT_VERSION=1.36.1\nPRISM_NODE_VERSION=2.4.1\nPORT=8000\nNETWORK=identus\nVAULT_DEV_ROOT_TOKEN_ID=root\nPG_PORT=5432\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["Create a new file named  ",(0,s.jsx)(n.strong,{children:"./identus-cloud-agent/infrastructure/local/.env-verifier"})," to define the Verifier Agent environment variable configuration with the following content:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"API_KEY_ENABLED=false\nAGENT_VERSION=1.36.1\nPRISM_NODE_VERSION=2.4.1\nPORT=9000\nNETWORK=identus\nVAULT_DEV_ROOT_TOKEN_ID=root\nPG_PORT=5433\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsxs)(n.li,{children:["Setting the ",(0,s.jsx)(n.code,{children:"API_KEY_ENABLED"})," to ",(0,s.jsx)(n.code,{children:"false"})," disables the requirement of using API Keys."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["API_KEY_ENABLED disables API Key authentication. This should ",(0,s.jsx)(n.strong,{children:"not"})," be used beyond Development purposes."]})}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsxs)(n.li,{children:["Start the ",(0,s.jsx)(n.code,{children:"issuer"})," and ",(0,s.jsx)(n.code,{children:"verifier"})," Cloud Agents by running the below commands in the terminal."]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Issuer Cloud Agent:"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Mac OSX  terminal shell"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:" ./infrastructure/local/run.sh -n issuer -b -e ./infrastructure/local/.env-issuer -p 8000 -d \"$(ipconfig getifaddr $(route get default | grep interface | awk '{print $2}'))\"\n"})}),"\n",(0,s.jsx)(n.p,{children:"Linux terminal shell"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:" ./infrastructure/local/run.sh -n issuer -b -e ./infrastructure/local/.env-issuer -p 8000 -d \"$(ip addr show $(ip route show default | awk '/default/ {print $5}') | grep 'inet ' | awk '{print $2}' | cut -d/ -f1)\"\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The Issuer ",(0,s.jsx)(n.a,{href:"http://localhost:8000/cloud-agent/",children:"API endpoint"})," will be accessible on port 8000 ",(0,s.jsx)(n.code,{children:"http://localhost:8000/cloud-agent/"})," with a ",(0,s.jsx)(n.a,{href:"http://localhost:8000/cloud-agent/redoc",children:"Swagger Interface"})," available at ",(0,s.jsx)(n.code,{children:"http://localhost:8000/cloud-agent/redoc"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Verifier Cloud Agent:"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For Mac OSX  terminal shell"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:" ./infrastructure/local/run.sh -n verifier -b -e ./infrastructure/local/.env-verifier -p 9000 -d \"$(ipconfig getifaddr $(route get default | grep interface | awk '{print $2}'))\"\n"})}),"\n",(0,s.jsx)(n.p,{children:"For Linux terminal shell"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:" ./infrastructure/local/run.sh -n verifier -b -e ./infrastructure/local/.env-verifier -p 9000 -d \"$(ip addr show $(ip route show default | awk '/default/ {print $5}') | grep 'inet ' | awk '{print $2}' | cut -d/ -f1)\"\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The Verifier ",(0,s.jsx)(n.a,{href:"http://localhost:9000/cloud-agent/",children:"API endpoint"})," will be accessible on port 9000 ",(0,s.jsx)(n.code,{children:"http://localhost:9000/cloud-agent/"})," with a ",(0,s.jsx)(n.a,{href:"http://localhost:9000/cloud-agent/redoc",children:"Swagger Interface"})," available at ",(0,s.jsx)(n.code,{children:"http://localhost:9000/cloud-agent/redoc"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"agent-configuration",children:"Agent configuration"}),"\n",(0,s.jsx)(n.h4,{id:"creating-longform-prismdid",children:"Creating LongForm PrismDID"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Run the following API request against your Issuer API to create a PRISM DID:"}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["\ud83d\udccc ",(0,s.jsx)(n.strong,{children:"Note:"})," ",(0,s.jsx)(n.a,{href:"/tutorials/dids/create#2-create-the-cloud-agent-managed-did-using-did-registrar-endpoint",children:"To create DIDs with various supported curves"}),"."]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl --location \\\n--request POST \'http://localhost:8000/cloud-agent/did-registrar/dids\' \\\n--header \'Accept: application/json\' \\\n--data-raw \'{\n    "documentTemplate": {\n        "publicKeys": [\n        {\n          "id": "auth-1",\n          "purpose": "authentication"\n        },\n        {\n          "id": "issue-1",\n              "purpose": "assertionMethod"\n        }\n      ],\n      "services": []\n    }\n}\'\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["Publish the DID by replacing ",(0,s.jsx)(n.code,{children:"{didRef}"})," with the ",(0,s.jsx)(n.code,{children:"longFormDid"})," output value from the previous step."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl --location \\\n--request POST 'http://localhost:8000/cloud-agent/did-registrar/dids/{didRef}/publications' \\\n--header 'Accept: application/json'\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"The short version of the DID is the publishedPrismDID."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["\ud83d\udcd6Learn more about PRISM DIDs and why it is necessary to publish specific DIDs ",(0,s.jsx)(n.a,{href:"https://staging-docs.atalaprism.io/tutorials/dids/publish",children:"here"}),"."]})}),"\n",(0,s.jsx)(n.h4,{id:"create-a-credential-schema-jwt-w3c-credential",children:"Create a credential schema (JWT W3C Credential)"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["To create a ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#credential-schema",children:"credential schema"})," on the Issuer API instance, run the following request:"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Replace the ",(0,s.jsx)(n.code,{children:"[[publishedPrismDID]]"})," in the example request with the ",(0,s.jsx)(n.code,{children:"did"})," value from the previous step."]})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"We need to capture the schema's guid as its used in further steps."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl -X \'POST\' \\\n  \'http://localhost:8000/cloud-agent/schema-registry/schemas\' \\\n  -H \'accept: application/json\' \\\n  -H \'Content-Type: application/json\' \\\n  -d \'{\n  "name": "driving-license",\n  "version": "1.0.0",\n  "description": "Driving License Schema",\n  "type": "https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json",\n  "author": [[publishedPrismDID]],\n  "tags": [\n    "driving",\n    "license"\n  ],\n  "schema": {\n    "$id": "https://example.com/driving-license-1.0.0",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "description": "Driving License",\n    "type": "object",\n    "properties": {\n      "emailAddress": {\n        "type": "string",\n        "format": "email"\n      },\n      "givenName": {\n        "type": "string"\n      },\n      "familyName": {\n        "type": "string"\n      },\n      "dateOfIssuance": {\n        "type": "string",\n        "format": "date-time"\n      },\n      "drivingLicenseID": {\n        "type": "string"\n      },\n      "drivingClass": {\n        "type": "integer"\n      }\n    },\n    "required": [\n      "emailAddress",\n      "familyName",\n      "dateOfIssuance",\n      "drivingLicenseID",\n      "drivingClass"\n    ],\n    "additionalProperties": true\n  }\n}\'\n'})}),"\n",(0,s.jsx)(n.h3,{id:"starting-sample-app",children:"Starting Sample App"}),"\n",(0,s.jsx)(n.p,{children:"All wallet SDK's come bundled with a sample application, that cover all the Identus flows, including establishing connections, issuance, and verification flows."}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsxs)(a.A,{value:"js",label:"Typescript Sample APP",children:[(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Clone the ",(0,s.jsx)(n.a,{href:"https://github.com/hyperledger/identus-edge-agent-sdk-ts",children:"TypeScript SDK"})," repository."]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/hyperledger/identus-edge-agent-sdk-ts\n"})}),(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Ensure you have all applications installed for building the SDK and their dependencies"}),"\n"]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.rust-lang.org/tools/install",children:"rust"})," and ",(0,s.jsx)(n.a,{href:"https://rustwasm.github.io/wasm-pack/installer/",children:"wasm-pack"})," are leveraged to build and use the AnonCreds and DIDComm Rust libraries within TypeScript. To build the SDK locally or run demonstration applications, you must have these applications installed."]}),(0,s.jsx)(n.p,{children:"The following should work Linux and MacOS. If you experience any issues, refer to the latest installation instructions for your platform."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\ncurl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh\n"})}),(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Run the following:"}),"\n"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Build the source SDK:"}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd identus-edge-agent-sdk-ts\ngit submodule update --init --recursive\nnpm i\nnpm run build\n"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Start the React demo:"}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd demos/next\nnpm i\nnpm run build\nnpm run start\n"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["This will start the React Wallet SDK TypeScript Demonstration at ",(0,s.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"}),"."]}),"\n"]})]}),(0,s.jsxs)(a.A,{value:"swift",label:"Swift Sample APP",children:[(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Clone the ",(0,s.jsx)(n.a,{href:"https://github.com/hyperledger/identus-edge-agent-sdk-swift",children:"Swift SDK"})," repository."]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/hyperledger/identus-edge-agent-sdk-swift\n"})}),(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["Open the XCode project on ",(0,s.jsx)(n.strong,{children:"./Sample/AtalaPrismWalletDemo/AtalaPrismWalletDemo.xcodeproj"})]}),"\n",(0,s.jsx)(n.li,{children:"On the top left of the XCode window you will see a Play/Run button, click it."}),"\n",(0,s.jsx)(n.li,{children:"The app will start."}),"\n",(0,s.jsx)(n.li,{children:"Click Wallet Demo 2.0"}),"\n"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You will be able to run the rest of the guide here."}),"\n"]})]}),(0,s.jsxs)(a.A,{value:"android",label:"Android Sample APP",children:[(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Clone the ",(0,s.jsx)(n.a,{href:"https://github.com/hyperledger/identus-edge-agent-sdk-kmm",children:"KMM SDK"})," repository."]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/hyperledger/identus-edge-agent-sdk-kmm\n"})}),(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Open the Wallet SDK project on IntelliJ or Android Studio."}),"\n",(0,s.jsxs)(n.li,{children:["In the ",(0,s.jsx)(n.code,{children:"Run configuration"})," dropdown, select SampleApp."]}),"\n",(0,s.jsx)(n.li,{children:"Select the device or emulator you want to use."}),"\n",(0,s.jsx)(n.li,{children:'Click "Run".'}),"\n"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The SampleApp will launch on the applicable device or emulator."}),"\n"]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"deploy--establish-mediation",children:"Deploy & Establish Mediation"}),"\n",(0,s.jsx)(n.p,{children:"Mediation is the process that ensures messages get routed and stored correctly between Issuers, Verifiers and Holders, even if they are offline. The mediator offers a service that is always running and can securely store messages and deliver them to the associated DIDs using DIDComm. This enables use-cases where connectivity to a (mobile) wallet cannot be guaranteed."}),"\n",(0,s.jsx)(n.h4,{id:"preparation",children:"Preparation"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["To get the mediator deployed locally for the demo, clone the ",(0,s.jsx)(n.a,{href:"https://github.com/hyperledger/identus-mediator",children:"Mediator repository"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/hyperledger/identus-mediator\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"With a Docker service running, open a new terminal and run:"}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The latest mediator version can be found at ",(0,s.jsx)(n.a,{href:"https://github.com/hyperledger/identus-mediator/releases",children:"Mediator releases"}),". Change the version in the example if you want to use the latest version."]})}),"\n",(0,s.jsx)(n.p,{children:"Mac OSX  terminal shell"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"MEDIATOR_VERSION=0.15.0 SERVICE_ENDPOINTS=\"http://$(ipconfig getifaddr $(route get default | grep interface | awk '{print $2}')):8080;ws://$(ipconfig getifaddr $(route get default | grep interface | awk '{print $2}')):8080/ws\" docker-compose up\n"})}),"\n",(0,s.jsx)(n.p,{children:"Linux terminal shell"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"MEDIATOR_VERSION=0.15.0 SERVICE_ENDPOINTS=\"http://$(ip addr show $(ip route show default | awk '/default/ {print $5}') | grep 'inet ' | awk '{print $2}' | cut -d/ -f1):8080;ws://$(ip addr show $(ip route show default | awk '/default/ {print $5}') | grep 'inet ' | awk '{print $2}' | cut -d/ -f1):8080/ws\" docker-compose up\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"MEDIATOR_ENDPOINTS"})," is then set to your local IP address:8080."]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["More advanced documentation and configuration options can be found ",(0,s.jsx)(n.a,{href:"https://github.com/hyperledger/identus-mediator",children:"here"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Now you need to capture the Mediator's ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#peer-did",children:"Peer DID"})," in order to start DIDCOMM V2 Mediation protocol, you can do so by opening you browser at the mediators ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#endpoints",children:"endpoint"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"demo-application",children:"Demo application"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"In order to complete this step you'll need to connect to the mediators Peer DID which you can fetch by making the following API request."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl --location \\\n--request GET 'localhost:8080/invitation' \\\n--header 'Content-Type: application/json'\n"})})]}),"\n",(0,s.jsx)(n.p,{children:"Follow the steps in your desired platform as stated below:"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(a.A,{value:"js",label:"Typescript Sample APP",children:(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Open ",(0,s.jsx)(n.a,{href:"http://localhost:3000/debug",children:"http://localhost:3000/debug"})," in your browser,"]}),"\n",(0,s.jsxs)(n.li,{children:["paste the mediator peer DID (obtained from the ",(0,s.jsx)(n.code,{children:"from"})," attribute after fetching from the mediator's invitation endpoint),"]}),"\n",(0,s.jsxs)(n.li,{children:["click ",(0,s.jsx)(n.strong,{children:"Edge Agent"})," tab in the bottom left,"]}),"\n",(0,s.jsxs)(n.li,{children:["click ",(0,s.jsx)(n.strong,{children:"Connect"})," button,"]}),"\n",(0,s.jsxs)(n.li,{children:["click ",(0,s.jsx)(n.strong,{children:"Start"})," button."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"swift",label:"Swift Sample APP",children:(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"In the app, go to Wallet Demo, and on the Mediator tab, insert the mediator DID."}),"\n"]})}),(0,s.jsx)(a.A,{value:"android",label:"Android  Sample APP",children:(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Go back to the Sample app. In the main screen, you can provide the mediator DID of your choice or use what is there already. Proceed and click ",(0,s.jsx)(n.strong,{children:"Start"})," after."]}),"\n"]})})]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["If you are running the SampleApp, click the ",(0,s.jsx)(n.strong,{children:"Start Agent"})," button."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The below code examples show how to establish mediation when building your own application."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("summary",{children:"Code examples"}),"\n3. The following code examples represent establishing mediation and instantiating the Cloud Agent."]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(a.A,{value:"js",label:"Typescript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"  const mediatorDID = SDK.Domain.DID.fromString(\n    [[MEDIATOR DID PEER]]\n  );\n  const api = new SDK.ApiImpl();\n  const apollo = new SDK.Apollo();\n  const castor = new SDK.Castor(apollo);\n  const didcomm = new SDK.DIDCommWrapper(apollo, castor, pluto);\n  const mercury = new SDK.Mercury(castor, didcomm, api);\n  const store = new SDK.PublicMediatorStore(pluto);\n  const handler = new SDK.BasicMediatorHandler(mediatorDID, mercury, store);\n  const manager = new SDK.ConnectionsManager(castor, mercury, pluto, handler);\n  const seed = apollo.createRandomSeed()\n  const agent = new SDK.Agent(\n    apollo,\n    castor,\n    pluto,\n    mercury,\n    handler,\n    manager,\n    seed.seed\n  );\n   /**\n   * This internally will attempt to load an existing mediator from the\n   * database. If it does not exist it will try to achieve mediation\n   * automatically, by creating a PeerDID and sending a MediationRequest.\n   * After this step the mediator starts capturing messages for the PeerDID we specied.\n   */\n  await agent.start()\n"})})}),(0,s.jsx)(a.A,{value:"swift",label:"Swift",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"  let agent = CloudAgent(mediatorDID: did)\n  try await agent.start()\n  agent.startFetchingMessages()\n"})})}),(0,s.jsx)(a.A,{value:"android",label:"Android",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"val apollo = ApolloImpl()\nval castor = CastorImpl(apollo)\nval pluto = Pluto(DbConnection())\n(pluto as PlutoImpl).start(context)\nval mercury = mercury = MercuryImpl(\n    castor,\n    DIDCommWrapper(castor, pluto, apollo),\n    ApiImpl(httpClient())\n)\nval pollux = PolluxImpl(castor)\nval seed = apollo.createRandomSeed()\nval handler = BasicMediatorHandler(\n  mediatorDID = DID(<DID_STRING>),\n  mercury = mercury,\n  store = BasicMediatorHandler.PlutoMediatorRepositoryImpl(pluto)\n)\nagent = CloudAgent(\n    apollo = apollo,\n    castor = castor,\n    pluto = pluto,\n    mercury = mercury,\n    pollux = pollux,\n    seed = seed,\n    mediatorHandler = handler\n)\nagent.start()\nagent.startFetchingMessages()\n\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"establish-holder-connections",children:"Establish Holder connections"}),"\n",(0,s.jsx)(n.p,{children:"To connect the Holder to both Cloud Agent instances, you must run this in both Issuer and Verifier endpoints."}),"\n",(0,s.jsx)(n.h3,{id:"establish-a-connection---agent-side",children:"Establish a connection - Agent side"}),"\n",(0,s.jsx)(n.p,{children:"A connection must be established between the Holder and Cloud Agents to correctly deliver the Issuance + Verification Messages to the Holder."}),"\n",(0,s.jsx)(n.h4,{id:"establish-connection-on-the-issuer-cloud-agent",children:"Establish connection on the Issuer Cloud Agent"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl --location \\\n--request POST 'http://localhost:8000/cloud-agent/connections' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"label\": \"Cloud Agent demo connection with holder\"\n}'\n"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"This request will return a JSON response with an invitation and its URL. The Issuer Cloud Agent would share this URL as a QR code, and the holder would scan it with the wallet app."}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Copy the ",(0,s.jsx)(n.code,{children:"invitationUrl"})," and the ",(0,s.jsx)(n.code,{children:"connectionId"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"establish-connection-on-the-verifier-cloud-agent",children:"Establish connection on the Verifier Cloud Agent"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl --location \\\n--request POST 'http://localhost:9000/cloud-agent/connections' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"label\": \"Cloud Agent demo connection with holder\"\n}'\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"This request will return a JSON response with an invitation and its URL. The Verifier Cloud Agent would share this URL as a QR code, and the holder would scan it with the wallet app."}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Copy the ",(0,s.jsx)(n.code,{children:"invitationUrl"})," and the ",(0,s.jsx)(n.code,{children:"connectionId"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"establish-a-connection---holder-side",children:"Establish a connection - Holder side"}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Now that you have the invitation, it's time for the Holder to accept it."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"demo-application-1",children:"Demo application"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsxs)(a.A,{value:"js",label:"Typescript Sample APP",children:[(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Open a browser at localhost:3000."}),"\n",(0,s.jsx)(n.li,{children:"Start the Edge Agent by clicking the button."}),"\n",(0,s.jsxs)(n.li,{children:["Paste the invitation URL generated in the previous step into the ",(0,s.jsx)(n.code,{children:"CloudAgent"})," connection section and click on Create Connection."]}),"\n"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The application will react when the connection gets established correctly and show a new connection."}),"\n"]})]}),(0,s.jsxs)(a.A,{value:"swift",label:"Swift Sample APP",children:[(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsxs)(n.li,{children:["On the Out of Bounds (OOB) dialog, paste the invitation URL we generated into the ",(0,s.jsx)(n.code,{children:"CloudAgent"})," connection section and click ",(0,s.jsx)(n.strong,{children:"Validate"}),"."]}),"\n"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The application will respond once the connection gets established correctly and show a message under messages."}),"\n"]})]}),(0,s.jsxs)(a.A,{value:"android",label:"Android Sample APP",children:[(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Go back to the Application:"}),"\n",(0,s.jsx)(n.li,{children:"Click the floating button at the bottom right corner of the Contacts tab."}),"\n",(0,s.jsxs)(n.li,{children:["On the dialog, paste the invitation URL we generated into the ",(0,s.jsx)(n.code,{children:"CloudAgent"})," connection section and click ",(0,s.jsx)(n.strong,{children:"Validate"}),"."]}),"\n"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The application will react once the connection gets established correctly and show a message under messages."}),"\n"]})]})]}),"\n",(0,s.jsx)("summary",{children:"Code examples"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(a.A,{value:"js",label:"Typescript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const parsed = await props.agent.parseOOBInvitation(new URL([[OOB URL]]));\nawait props.agent.acceptDIDCommInvitation(parsed);\n"})})}),(0,s.jsx)(a.A,{value:"swift",label:"Swift",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"  let message = try agent.parseOOBInvitation(url: oobUrl)\n  try await agent.acceptDIDCommInvitation(invitation: message)\n"})})}),(0,s.jsx)(a.A,{value:"android",label:"Android",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"val invitation = agent.parseInvitation(oobUrl)\nagent.acceptOutOfBandInvitation(invitation)\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"issue-a-credential-from-the-issuer-to-the-holder",children:"Issue a Credential from the Issuer to the holder"}),"\n",(0,s.jsxs)(n.p,{children:["The credential issuance flow consists of multiple steps, detailed in this section. It starts with the Issuer sending a ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#credential-offer",children:"Credential Offer"})," to the Holder, which would accept or reject this invitation and create a ",(0,s.jsx)(n.code,{children:"credentialRequest"})," from it. The ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary/#credential-request",children:"credential request"})," gets sent through DIDComm to the Issuer, issuing and sending the credential back to the Holder."]}),"\n",(0,s.jsx)(n.p,{children:"The Issuer can create a credential offer in two ways:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"As a direct credential offer DIDComm message for a holder with an existing connection"}),"\n",(0,s.jsx)(n.li,{children:"As an credential offer as attachment in an OOB invitation message for connectionless issuance"}),"\n"]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsxs)(a.A,{value:"existing",label:"With Existing Connection",children:[(0,s.jsxs)(n.h3,{id:"create-a-credential-offer-with-an-existing-connection-issuer-agent",children:["Create a Credential Offer with an existing connection ",(0,s.jsx)(n.strong,{children:"Issuer Agent"})]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"To trigger the creation of a credential-offer, we call the credential-offers-endpoint, as follows:"}),"\n"]}),(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"Please replace the following variables in the example request before sending:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"connectionId"}),": The ID of the connection previously established between agent and holder. This is part of the response of the POST message from the agent when calling the ",(0,s.jsx)(n.code,{children:"cloud-agent/connections"})," endpoint. It is returned in the ",(0,s.jsx)(n.code,{children:"connectionId"})," attribute. There is a unique connection ID for the relationship between issuer and holder and verifier and holder. In this example, please use the ",(0,s.jsx)(n.code,{children:"connectionId"})," returned when creating the connection between issuer and holder"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"publishedPrismDID"}),": The short form of the PRISM DID created when setting up the Issuer agent"]}),"\n"]}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"connectionId"})," is just the ID of the connection we previously established with the issuer."]}),(0,s.jsx)(n.p,{children:"The Issuing DID is the published PRISM DID in its short version which was also used to create and publish the credential schema."}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"``"}),"\n"]})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl --location --request POST \'http://localhost:8000/cloud-agent/issue-credentials/credential-offers\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    "claims": {"emailAddress":"sampleEmail", "familyName":"", "dateOfIssuance":"2023-01-01T02:02:02Z", "drivingLicenseID":"", "drivingClass":1},\n    "connectionId": [[connectionId]],\n    "issuingDID": [[publishedPrismDID]],\n    "automaticIssuance": true\n}\'\n'})})]}),(0,s.jsxs)(a.A,{value:"connectionless",label:"Connectionless Issuance",children:[(0,s.jsxs)(n.h3,{id:"create-a-credential-offer-as-invitation-for-connectionless-issuance-issuer-agent",children:["Create a Credential Offer as Invitation for connectionless issuance ",(0,s.jsx)(n.strong,{children:"Issuer Agent"})]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"To trigger the creation of a credential-offer, we call the credential-offers-invitation-endpoint, as follows:"}),"\n"]}),(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"Please replace the following variables in the example request before sending:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"goalCode"}),": OPTIONAL A self-attested code the receiver may want to display to the user or use in automatically deciding what to do with the out-of-band message,"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"goal"}),": OPTIONAL. A self-attested string that the receiver may want to display to the user about the context-specific goal of the out-of-band message."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"publishedPrismDID"}),": The short form of the PRISM DID created when setting up the Issuer agent"]}),"\n"]}),(0,s.jsx)(n.p,{children:"The Issuing DID is the published PRISM DID in its short version which was also used to create and publish the credential schema."}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"``"}),"\n"]})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl --location --request POST \'http://localhost:8000/cloud-agent/issue-credentials/credential-offers/invitation\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    "claims": {"emailAddress":"sampleEmail", "familyName":"", "dateOfIssuance":"2023-01-01T02:02:02Z", "drivingLicenseID":"", "drivingClass":1},\n    "goalCode": [[goalCode]],\n    "goal": [[goal]],\n    "credentialFormat": "JWT",\n    "issuingDID": [[publishedPrismDID]],\n    "automaticIssuance": true\n}\'\n'})}),(0,s.jsxs)(n.h3,{id:"accept-credential-offer-invitation-for-connectionless-issuance-holder",children:["Accept Credential Offer Invitation for connectionless issuance ",(0,s.jsx)(n.strong,{children:"Holder"})]}),(0,s.jsx)(n.p,{children:"For connectionless issuance, the Holder needs to accept the invitation containing the credential offer. This step is necessary before creating the Credential Request."}),(0,s.jsx)(n.h4,{id:"demo-application-2",children:"Demo application"}),(0,s.jsxs)(r.A,{children:[(0,s.jsx)(a.A,{value:"js",label:"Typescript Sample APP",children:(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:'In the browser at localhost:3000, navigate to the "Credential Offer" section.'}),"\n",(0,s.jsx)(n.li,{children:"Paste the invitation URL received from the Issuer into the provided input field."}),"\n",(0,s.jsx)(n.li,{children:'Click on "Accept Invitation" to process the credential offer.'}),"\n"]})}),(0,s.jsx)(a.A,{value:"swift",label:"Swift Sample APP",children:(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:'In the Swift mobile app, go to the "Credential Offer" section.'}),"\n",(0,s.jsx)(n.li,{children:"Enter the invitation URL received from the Issuer."}),"\n",(0,s.jsx)(n.li,{children:'Tap on "Accept Invitation" to process the credential offer.'}),"\n"]})}),(0,s.jsx)(a.A,{value:"android",label:"Android Sample APP",children:(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:'In the Android mobile app, navigate to the "Credential Offer" section.'}),"\n",(0,s.jsx)(n.li,{children:"Input the invitation URL provided by the Issuer."}),"\n",(0,s.jsx)(n.li,{children:'Tap "Accept Invitation" to process the credential offer.'}),"\n"]})})]}),(0,s.jsx)("summary",{children:"Code examples"}),(0,s.jsxs)(r.A,{children:[(0,s.jsx)(a.A,{value:"js",label:"Typescript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const parsed = await props.agent.parseOOBInvitation(new URL([[OOB URL]]));\nawait props.agent.acceptDIDCommInvitation(parsed);\n"})})}),(0,s.jsx)(a.A,{value:"swift",label:"Swift",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"  let message = try agent.parseOOBInvitation(url: oobUrl)\n  try await agent.acceptDIDCommInvitation(invitation: message)\n"})})}),(0,s.jsx)(a.A,{value:"android",label:"Android",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"val invitation = agent.parseInvitation(oobUrl)\nagent.acceptOutOfBandInvitation(invitation)\n"})})})]})]})]}),"\n",(0,s.jsxs)(n.h3,{id:"create-credentialrequest-from-credentialoffer-holder",children:["Create CredentialRequest from CredentialOffer ",(0,s.jsx)(n.strong,{children:"Holder"})]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["Because this credential Offer was created with the ",(0,s.jsx)(n.code,{children:"automaticIssuance"})," true, as soon as the ",(0,s.jsx)(n.code,{children:"CloudAgent"})," receives this ",(0,s.jsx)(n.code,{children:"credentialRequest"})," it will respond with the ",(0,s.jsx)(n.code,{children:"IssuedCredential"})," message and send this back to the holder."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"automaticIssuance is optional. It can also be manually triggered and confirmed by the Holder.```"})}),"\n",(0,s.jsx)(n.h4,{id:"demo-application-3",children:"Demo application"}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["The holder will at some point receive a ",(0,s.jsx)(n.code,{children:"CredentialOffer"}),", which the holder must accept, and then, a ",(0,s.jsx)(n.code,{children:"CredentialRequest"})," is created and sent back to the Issuer through DIDComm V2 protocols."]}),"\n"]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(a.A,{value:"js",label:"Typescript Sample APP",children:(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)("code",{children:"CredentialOffer"})," message will be automatically accepted as soon as it reaches the browser. In exchange, a ",(0,s.jsx)("code",{children:"CredentialRequest"})," message will get sent back to the ",(0,s.jsx)(n.code,{children:"CloudAgent."})]}),"\n"]})}),(0,s.jsx)(a.A,{value:"swift",label:"Swift Sample APP",children:(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsxs)(n.li,{children:["As soon as the ",(0,s.jsx)("code",{children:"CredentialOffer"})," message reaches the Swift mobile app, it will display to the user to accept or reject, and in exchange, a ",(0,s.jsx)("code",{children:"CredentialRequest"})," message will get sent back to the ",(0,s.jsx)("code",{children:"CloudAgent"}),"."]}),"\n"]})}),(0,s.jsx)(a.A,{value:"android",label:"Android Sample APP",children:(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsxs)(n.li,{children:["As soon as the ",(0,s.jsx)("code",{children:"CredentialOffer"})," message reaches the Android mobile app, it will be automatically accepted, and in exchange, a ",(0,s.jsx)("code",{children:"CredentialRequest"})," message will get sent back to the ",(0,s.jsx)("code",{children:"CloudAgent"}),"."]}),"\n"]})})]}),"\n",(0,s.jsx)("summary",{children:"Code examples"}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsx)(n.li,{children:"The exchange between CredentialOffer and CredentialRequest is demonstrated through more advanced code samples below, showcasing how different platforms handle it."}),"\n"]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(a.A,{value:"js",label:"Typescript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'props.agent.addListener(ListenerKey.MESSAGE,async (newMessages:SDK.Domain.Message[]) => {\n    //newMessages can contain any didcomm message that is received, including\n    //Credential Offers, Issued credentials and Request Presentation Messages\n    const credentialOffers = newMessages.filter((message) => message.piuri === "https://didcomm.org/issue-credential/2.0/offer-credential");\n\n    if (credentialOffers.length) {\n        for(const credentialOfferMessage of credentialOffers) {\n        const credentialOffer = OfferCredential.fromMessage(credentialOfferMessage);\n        const requestCredential = await props.agent.prepareRequestCredentialWithIssuer(credentialOffer);\n        try {\n            await props.agent.sendMessage(requestCredential.makeMessage())\n        } catch (err) {\n            console.log("continue after err", err)\n        }\n        }\n    }\n})\n'})})}),(0,s.jsx)(a.A,{value:"swift",label:"Swift",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"agent\n  .handleMessagesEvents()\n  .sink(receiveCompletion: { _ in }, receiveValue: { [weak self] in\n    guard\n        let message,\n        message.direction == .received,\n        let msgType = ProtocolTypes(rawValue: message.piuri)\n      else { return }\n\n      Task.detached { [weak self] in\n          do {\n            switch msgType {\n             case .didcommOfferCredential:\n                let newPrismDID = try await agent.createNewPrismDID()\n                guard let requestCredential = try await agent.prepareRequestCredentialWithIssuer(\n                    did: newPrismDID,\n                    offer: try OfferCredential(fromMessage: message)\n                ) else { throw UnknownError.somethingWentWrongError() }\n\n                _ = try await agent.sendMessage(message: try requestCredential.makeMessage())\n          } catch {}\n      }\n  })\n\n"})})}),(0,s.jsx)(a.A,{value:"android",label:"Android",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"agent.handleReceivedMessagesEvents().collect { list ->\n    list.forEach { message ->\n        if (message.piuri == ProtocolType.DidcommOfferCredential.value) {\n            val credentials = pluto.getAllCredentials().first()\n            if (credentials.isEmpty()) {\n                val offer = OfferCredential.fromMessage(message)\n                val subjectDID = agent.createNewPrismDID()\n                val request =\n                agent.prepareRequestCredentialWithIssuer(\n                    subjectDID,\n                    offer\n                )\n                mercury.sendMessage(request.makeMessage())\n            }\n        }\n    }\n}\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"store-the-issued-credential-holder",children:"Store the Issued Credential [Holder]"}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"The sample application are using an insecure storage solution which should only be used for testing purposes and not production environments!"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("summary",{children:"Code examples"}),"\n6. Once the Holder receives a credential from the Cloud Agent, it needs to store the credential somewhere:"]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(a.A,{value:"js",label:"Typescript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'props.agent.addListener(ListenerKey.MESSAGE,async (newMessages:SDK.Domain.Message[]) => {\n    //newMessages can contain any didcomm message that is received, including\n    //Credential Offers, Issued credentials and Request Presentation Messages\n    const issuedCredentials = newMessages.filter((message) => message.piuri === "https://didcomm.org/issue-credential/2.0/issue-credential");\n    if (issuedCredentials.length) {\n        for(const issuedCredential of issuedCredentials) {\n            const issueCredential = IssueCredential.fromMessage(issuedCredential);\n            await props.agent.processIssuedCredentialMessage(issueCredential);\n        }\n    }\n})\n'})})}),(0,s.jsx)(a.A,{value:"swift",label:"Swift",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"agent\n  .handleMessagesEvents()\n  .sink(receiveCompletion: { _ in }, receiveValue: { [weak self] in\n    guard\n        let message = $0\n        message.direction == .received,\n        let msgType = ProtocolTypes(rawValue: message.piuri)\n      else { return }\n\n      Task.detached { [weak self] in\n          do {\n            switch msgType {\n              case .didcommIssueCredential:\n                  let issueCredential = try IssueCredential(fromMessage: message)\n                  _ = try await agent.processIssuedCredentialMessage(message: issueCredential)\n            }\n          } catch {}\n      }\n  })\n"})})}),(0,s.jsx)(a.A,{value:"android",label:"Android",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"agent.handleReceivedMessagesEvents().collect { list ->\n    list.forEach { message ->\n        if (message.piuri == ProtocolType.DidcommIssueCredential.value) {\n                agent.processIssuedCredentialMessage(\n                    IssueCredential.fromMessage(\n                    message\n                )\n            )\n        }\n    }\n}\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"request-a-verification-from-the-verifier-cloud-agent-to-the-holder-jwt-w3c-credential",children:"Request a verification from the Verifier Cloud Agent to the Holder (JWT W3C Credential)"}),"\n",(0,s.jsx)(n.p,{children:"Now that the Holder has received a credential, it can be used in a verification workflow between a Holder and a Verifier. This requires the following steps:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Verifier creates a proof request"}),"\n",(0,s.jsx)(n.li,{children:"Holder receives the proof request"}),"\n",(0,s.jsx)(n.li,{children:"Holder creates a proof presentation and shares this with the verifier"}),"\n",(0,s.jsx)(n.li,{children:"Verifier verifies the proof presentation"}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"In the example, we demonstrate two verification flows:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Verification with an established connection between the Holder and the Verifier."}),"\n",(0,s.jsx)(n.li,{children:"Connectionless verification in which the Holder and Verifier do not have a pre-established connection."}),"\n"]})]}),"\n",(0,s.jsx)(n.h3,{id:"verifier-agent",children:"Verifier Agent"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsxs)(a.A,{value:"existing",label:"With Existing Connection",children:[(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsxs)(n.li,{children:["To run this section, we will use ",(0,s.jsx)(n.a,{href:"/docs/quick-start#establish-connection-on-the-verifier-cloud-agent",children:"the connection"})," we created between the Holder and the Verifier."]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl --location \\\n--request POST \'http://localhost:9000/cloud-agent/present-proof/presentations\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    "connectionId": [[connectionId]],\n    "proofs": [\n        {\n            "schemaId": [[schemaId]],\n            "trustIssuers": [\n                [[PUBLISHED PRISM DID FROM THE ISSUER]]\n            ]\n        }\n    ],\n    "options": {\n        "challenge": "A challenge for the holder to sign",\n        "domain": "domain.com"\n    }\n}\'\n'})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["This API request will return a ",(0,s.jsx)(n.code,{children:"presentationRequestId,"})," which the verifier can use later to check the current status  of the request."]}),"\n"]})]}),(0,s.jsxs)(a.A,{value:"connectionless",label:"Connectionless Request Presentation",children:[(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsx)(n.li,{children:"To run this section, we'll use the presentation invitation endpoint to create a request presentation invitation, which the holder can scan to receive the invitation or the verifier can share directly."}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl --location \\\n--request POST \'http://localhost:9000/cloud-agent/present-proof/presentations/invitation\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    "goalCode": [[goalCode]],\n    "goal": [[goal]],\n    "credentialFormat": "JWT",\n    "proofs": [\n        {\n            "schemaId": [[schemaId]],\n            "trustIssuers": [\n                [[PUBLISHED PRISM DID FROM THE ISSUER]]\n            ]\n        }\n    ],\n    "options": {\n        "challenge": "A challenge for the holder to sign",\n        "domain": "domain.com"\n    }\n}\'\n'})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["This API request will return an ",(0,s.jsx)(n.code,{children:"invitationId"})," along with an Out-Of-Band (OOB) message. The OOB message includes a Request Presentation in JSON format as an attachment and is encoded as a base64 URL-encoded string, which can be shared with the holder."]}),"\n"]}),(0,s.jsxs)(n.h3,{id:"accept-request-presentation-invitation-for-connectionless-verification-holder",children:["Accept Request Presentation invitation for connectionless verification ",(0,s.jsx)(n.strong,{children:"Holder"})]}),(0,s.jsx)(n.p,{children:"For connectionless verification, the Holder needs to accept the invitation containing the Request Presentation."}),(0,s.jsx)(n.h4,{id:"demo-application-4",children:"Demo application"}),(0,s.jsxs)(r.A,{children:[(0,s.jsx)(a.A,{value:"js",label:"Typescript Sample APP",children:(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:'In the browser at localhost:3000, navigate to the "Request Presentation" section.'}),"\n",(0,s.jsx)(n.li,{children:"Paste the invitation URL received from the Issuer into the provided input field."}),"\n",(0,s.jsx)(n.li,{children:'Click on "Accept Invitation" to process the request presentation.'}),"\n"]})}),(0,s.jsx)(a.A,{value:"swift",label:"Swift Sample APP",children:(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:'In the Swift mobile app, go to the "Request Presentation" section.'}),"\n",(0,s.jsx)(n.li,{children:"Enter the invitation URL received from the Issuer."}),"\n",(0,s.jsx)(n.li,{children:'Tap on "Accept Invitation" to process the request presentation.'}),"\n"]})}),(0,s.jsx)(a.A,{value:"android",label:"Android Sample APP",children:(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:'In the Android mobile app, navigate to the "Request Presentation" section.'}),"\n",(0,s.jsx)(n.li,{children:"Input the invitation URL provided by the Issuer."}),"\n",(0,s.jsx)(n.li,{children:'Tap "Accept Invitation" to process the request presentation.'}),"\n"]})})]}),(0,s.jsx)("summary",{children:"Code examples"}),(0,s.jsxs)(r.A,{children:[(0,s.jsx)(a.A,{value:"js",label:"Typescript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const parsed = await props.agent.parseOOBInvitation(new URL([[OOB URL]]));\nawait props.agent.acceptDIDCommInvitation(parsed);\n"})})}),(0,s.jsx)(a.A,{value:"swift",label:"Swift",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"  let message = try agent.parseOOBInvitation(url: oobUrl)\n  try await agent.acceptDIDCommInvitation(invitation: message)\n"})})}),(0,s.jsx)(a.A,{value:"android",label:"Android",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"val invitation = agent.parseInvitation(oobUrl)\nagent.acceptOutOfBandInvitation(invitation)\n"})})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"holder-receives-the-presentation-proof-request",children:"Holder: Receives the Presentation proof request"}),"\n",(0,s.jsxs)(n.ol,{start:"6",children:["\n",(0,s.jsx)(n.li,{children:"The Holder needs an Edge Agent running with the message listener active. It will receive the presentation proof request from the Verifier Cloud Agent for the correct type of messages as detailed below:"}),"\n"]}),"\n",(0,s.jsx)("summary",{children:"Code examples"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(a.A,{value:"js",label:"Typescript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'props.agent.addListener(ListenerKey.MESSAGE,async (newMessages:SDK.Domain.Message[]) => {\n    //newMessages can contain any didcomm message that is received, including\n    //Credential Offers, Issued credentials and Request Presentation Messages\n    const requestPresentations = newMessages.filter((message) => message.piuri === "https://didcomm.atalaprism.io/present-proof/3.0/request-presentation");\n\n    if (requestPresentations.length) {\n        for(const requestPresentation of requestPresentations) {\n            const lastCredentials = await props.pluto.getAllCredentials();\n            const lastCredential = lastCredentials.at(-1);\n            const requestPresentationMessage = RequestPresentation.fromMessage(requestPresentation);\n            try {\n            if (lastCredential === undefined) throw new Error("last credential not found");\n\n            const presentation = await props.agent.createPresentationForRequestProof(requestPresentationMessage, lastCredential)\n            await props.agent.sendMessage(presentation.makeMessage())\n            } catch (err) {\n            console.log("continue after err", err)\n            }\n        }\n    }\n})\n'})})}),(0,s.jsx)(a.A,{value:"swift",label:"Swift",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"agent\n  .handleMessagesEvents()\n  .sink(receiveCompletion: { _ in }, receiveValue: { [weak self] in\n    guard\n          let message,\n          message.direction == .received,\n          let msgType = ProtocolTypes(rawValue: message.piuri)\n      else { return }\n\n      Task.detached { [weak self] in\n        do {\n          switch msgType {\n          case .didcommRequestPresentation:\n              let credential = try await agent.verifiableCredentials().map { $0.first }.first().await()\n              guard let credential else {\n                  throw UnknownError.somethingWentWrongError()\n              }\n              let presentation = try await agent.createPresentationForRequestProof(\n                  request: try RequestPresentation(fromMessage: message),\n                  credential: credential\n              )\n              _ = try await agent.sendMessage(message: try presentation.makeMessage())\n          }\n        } catch {}\n      }\n  })\n"})})}),(0,s.jsx)(a.A,{value:"android",label:"Android",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"agent.handleReceivedMessagesEvents().collect { list ->\n    list.forEach { message ->\n        if (message.piuri == ProtocolType.DidcommRequestPresentation.value && !presentationDone) {\n            viewModelScope.launch {\n                presentationDone = true\n                agent.getAllCredentials().collect {\n                    val credential = it.first()\n                    val presentation = agent.preparePresentationForRequestProof(\n                        RequestPresentation.fromMessage(message),\n                        credential\n                    )\n                    mercury.sendMessage(presentation.makeMessage())\n                }\n            }\n        }\n    }\n}\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"verifier-will-then-check-on-the-api-if-the-presentation-request-has-been-completed-or-not",children:"Verifier: Will then check on the API if the Presentation Request has been completed or not."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl --location \\\n--request GET 'http://localhost:9000/cloud-agent/present-proof/presentations/[[presentationRequestId]]' \\\n--header 'Accept: application/json'\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"7",children:["\n",(0,s.jsx)(n.li,{children:"The response body establishes the completion of the request and can be verified for correctness."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var s=t(34164);const i={tabItem:"tabItem_Ymn6"};var r=t(74848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(i.tabItem,a),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>y});var s=t(96540),i=t(34164),r=t(23104),a=t(56347),l=t(205),o=t(57485),c=t(31682),d=t(70679);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:i}}=e;return{value:n,label:t,attributes:s,default:i}}))}(t);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const i=(0,a.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(r),(0,s.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,r=u(e),[a,o]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:r}))),[c,h]=g({queryString:t,groupId:i}),[f,m]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,d.Dv)(t);return[i,(0,s.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:i}),x=(()=>{const e=c??f;return p({value:e,tabValues:r})?e:null})();(0,l.A)((()=>{x&&o(x)}),[x]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),m(e)}),[h,m,r]),tabValues:r}}var m=t(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(74848);function v(e){let{className:n,block:t,selectedValue:s,selectValue:a,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),d=e=>{const n=e.currentTarget,t=o.indexOf(n),i=l[t].value;i!==s&&(c(n),a(i))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>o.push(e),onKeyDown:h,onClick:d,...r,className:(0,i.A)("tabs__item",x.tabItem,r?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function w(e){let{lazy:n,children:t,selectedValue:i}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function b(e){const n=f(e);return(0,j.jsxs)("div",{className:(0,i.A)("tabs-container",x.tabList),children:[(0,j.jsx)(v,{...n,...e}),(0,j.jsx)(w,{...n,...e})]})}function y(e){const n=(0,m.A)();return(0,j.jsx)(b,{...e,children:h(e.children)},String(n))}},97354:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/component-diagram-a45b0d2a1ec970a439e28cbe6409cd75.png"},87248:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/trust-triangle-6772b107a2dfc3279517ca89bc2c999f.png"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(96540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);