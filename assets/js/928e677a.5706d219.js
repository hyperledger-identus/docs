"use strict";(self.webpackChunkidentus_documentation_portal=self.webpackChunkidentus_documentation_portal||[]).push([[7653],{8577:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>c,toc:()=>h});var t=s(74848),i=s(28453),r=s(11470),d=s(19365);const a={},o="Issue credentials (DIDComm)",c={id:"credentials/issue",title:"Issue credentials (DIDComm)",description:"In the Identus Platform, the Issue Credentials Protocol allows you to create, retrieve, and manage issued verifiable credentials (VCs) between a VC issuer and a VC holder.",source:"@site/identus-cloud-agent/docs/docusaurus/credentials/issue.md",sourceDirName:"credentials",slug:"/credentials/issue",permalink:"/identus-docs/tutorials/credentials/issue",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialsSidebar",previous:{title:"Credentials",permalink:"/identus-docs/tutorials/category/credentials"},next:{title:"Issue credentials (OID4VCI)",permalink:"/identus-docs/tutorials/credentials/oid4vci"}},l={},h=[{value:"Roles",id:"roles",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Overview",id:"overview",level:2},{value:"Endpoints",id:"endpoints",level:2},{value:"Issuer interactions",id:"issuer-interactions",level:2},{value:"Creating a Credential Offer",id:"creating-a-credential-offer",level:3},{value:"Sending the Offer to the Holder",id:"sending-the-offer-to-the-holder",level:3},{value:"Issuing the Credential",id:"issuing-the-credential",level:3},{value:"Holder interactions",id:"holder-interactions",level:2},{value:"Receiving the VC Offer",id:"receiving-the-vc-offer",level:3},{value:"Approving the VC Offer",id:"approving-the-vc-offer",level:3},{value:"Receiving the VC Credential",id:"receiving-the-vc-credential",level:3},{value:"Sequence diagram",id:"sequence-diagram",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"issue-credentials-didcomm",children:"Issue credentials (DIDComm)"}),"\n",(0,t.jsxs)(n.p,{children:["In the Identus Platform, the ",(0,t.jsx)(n.a,{href:"/docs/concepts/glossary#issue-credentials-protocol",children:"Issue Credentials Protocol"})," allows you to create, retrieve, and manage issued ",(0,t.jsx)(n.a,{href:"/docs/concepts/glossary#verifiable-credentials",children:"verifiable credentials (VCs)"})," between a VC issuer and a VC holder."]}),"\n",(0,t.jsx)(n.h2,{id:"roles",children:"Roles"}),"\n",(0,t.jsx)(n.p,{children:"In the Issue Credentials Protocol, there are two roles:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.a,{href:"/docs/concepts/glossary#issuer",children:"Issuer"})," is responsible for creating a new credential offer, sending it to a Holder, and issuing the VC once the offer is accepted."]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.a,{href:"/docs/concepts/glossary#holder",children:"Holder"})," is responsible for accepting a credential offer from an issuer and receiving the VC."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The Issuer and Holder interact with the Identus Cloud Agent API to perform the operations defined in the protocol."}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.p,{children:"Before using the Issuing Credentials protocol, the following conditions must be present:"}),"\n",(0,t.jsxs)(r.A,{groupId:"vc-formats",children:[(0,t.jsx)(d.A,{value:"jwt",label:"JWT",children:(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Issuer and Holder Cloud Agents up and running"}),"\n",(0,t.jsxs)(n.li,{children:["A connection must be established between the Issuer and Holder Cloud Agents (see ",(0,t.jsx)(n.a,{href:"/identus-docs/tutorials/connections/connection",children:"Connections"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["The Issuer must have a published PRISM DID, and the ",(0,t.jsx)(n.a,{href:"/docs/concepts/glossary#did-document",children:"DID document"})," must have at least one ",(0,t.jsx)(n.code,{children:"assertionMethod"})," key for issuing credentials (see ",(0,t.jsx)(n.a,{href:"/identus-docs/tutorials/dids/create",children:"Create DID"})," and ",(0,t.jsx)(n.a,{href:"/identus-docs/tutorials/dids/publish",children:"Publish DID"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["The Holder must have a PRISM DID, and the DID document must have at least one ",(0,t.jsx)(n.code,{children:"authentication"})," key for presenting the proof."]}),"\n"]})}),(0,t.jsx)(d.A,{value:"anoncreds",label:"AnonCreds",children:(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Issuer and Holder Cloud Agents up and running"}),"\n",(0,t.jsxs)(n.li,{children:["A connection must be established between the Issuer and Holder Cloud Agents (see ",(0,t.jsx)(n.a,{href:"/identus-docs/tutorials/connections/connection",children:"Connections"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["The Issuer must have created an AnonCreds Credential Definition as described ",(0,t.jsx)(n.a,{href:"/identus-docs/tutorials/credentialdefinition/create",children:"here"}),"."]}),"\n"]})}),(0,t.jsxs)(d.A,{value:"sdjwt",label:"SDJWT",children:[(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\ud83d\udccc ",(0,t.jsx)(n.strong,{children:"Note:"})," Currently we only support ",(0,t.jsx)(n.code,{children:"Ed25519"})," curve"]}),"\n"]}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Issuer and Holder Cloud Agents up and running"}),"\n",(0,t.jsxs)(n.li,{children:["A connection must be established between the Issuer and Holder Cloud Agents (see ",(0,t.jsx)(n.a,{href:"/identus-docs/tutorials/connections/connection",children:"Connections"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["The Issuer must have a published PRISM DID, and the ",(0,t.jsx)(n.a,{href:"/docs/concepts/glossary#did-document",children:"DID document"})," must have at least one ",(0,t.jsx)(n.code,{children:"assertionMethod"})," key for issuing credentials and the curve must be ",(0,t.jsx)(n.code,{children:"Ed25519"})," (see ",(0,t.jsx)(n.a,{href:"/identus-docs/tutorials/dids/create",children:"Create DID"})," and ",(0,t.jsx)(n.a,{href:"/identus-docs/tutorials/dids/publish",children:"Publish DID"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["The Holder must have a PRISM DID, and the DID document must have at least one ",(0,t.jsx)(n.code,{children:"authentication"})," key for presenting the proof and the curve must be ",(0,t.jsx)(n.code,{children:"Ed25519"}),"."]}),"\n"]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The protocol described is a VC issuance process between two Identus Cloud Agents, the Issuer and the Holder."}),"\n",(0,t.jsx)(n.p,{children:"The protocol consists of the following main parts:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["The Issuer creates a new credential offer using the ",(0,t.jsx)(n.a,{href:"/agent-api/#tag/Issue-Credentials-Protocol/operation/createCredentialOffer",children:(0,t.jsx)(n.code,{children:"/issue-credentials/credential-offers"})})," endpoint, which includes information such as the schema identifier and claims."]}),"\n",(0,t.jsxs)(n.li,{children:["The Holder can then retrieve the offer using the ",(0,t.jsx)(n.a,{href:"/agent-api/#tag/Issue-Credentials-Protocol/operation/getCredentialRecords",children:(0,t.jsx)(n.code,{children:"/issue-credentials/records"})})," endpoint and accept the offer using the ",(0,t.jsx)(n.a,{href:"/agent-api/#tag/Issue-Credentials-Protocol/operation/acceptCredentialOffer",children:(0,t.jsx)(n.code,{children:"/issue-credentials/records/{recordId}/accept-offer"})})," endpoint."]}),"\n",(0,t.jsxs)(n.li,{children:["The Issuer then uses the ",(0,t.jsx)(n.a,{href:"/agent-api/#tag/Issue-Credentials-Protocol/operation/issueCredential",children:(0,t.jsx)(n.code,{children:"/issue-credentials/records/{recordId}/issue-credential"})})," endpoint to issue the credential, which gets sent to the Holder via ",(0,t.jsx)(n.a,{href:"/docs/concepts/glossary#didcomm",children:"DIDComm"}),". The Holder receives the credential, and the protocol is complete."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The claims provide specific information about the individual, such as their name or qualifications."}),"\n",(0,t.jsx)(n.p,{children:"This protocol is applicable in various real-life scenarios, such as educational credentialing, employment verification, and more.\nIn these scenarios, the Issuer could be a school, an employer, etc., and the Holder could be a student or an employee.\nThe VCs issued during this protocol could represent a diploma, a certificate of employment, etc."}),"\n",(0,t.jsx)(n.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Endpoint"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Role"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/agent-api/#tag/Issue-Credentials-Protocol/operation/createCredentialOffer",children:(0,t.jsx)(n.code,{children:"/issue-credentials/credential-offers"})})}),(0,t.jsx)(n.td,{children:"This endpoint allows you to create a new credential offer"}),(0,t.jsx)(n.td,{children:"Issuer"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/agent-api/#tag/Issue-Credentials-Protocol/operation/getCredentialRecords",children:(0,t.jsx)(n.code,{children:"/issue-credentials/records"})})}),(0,t.jsx)(n.td,{children:"This endpoint allows you to retrieve a collection of all the existing credential records"}),(0,t.jsx)(n.td,{children:"Issuer, Holder"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/agent-api/#tag/Issue-Credentials-Protocol/operation/getCredentialRecord",children:(0,t.jsx)(n.code,{children:"/issue-credentials/records/{recordId}"})})}),(0,t.jsxs)(n.td,{children:["This endpoint allows you to retrieve a specific credential record by its ",(0,t.jsx)(n.code,{children:"id"})]}),(0,t.jsx)(n.td,{children:"Issuer, Holder"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/agent-api/#tag/Issue-Credentials-Protocol/operation/acceptCredentialOffer",children:(0,t.jsx)(n.code,{children:"/issue-credentials/records/{recordId}/accept-offer"})})}),(0,t.jsx)(n.td,{children:"This endpoint allows you to accept a credential offer"}),(0,t.jsx)(n.td,{children:"Holder"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/agent-api/#tag/Issue-Credentials-Protocol/operation/issueCredential",children:(0,t.jsx)(n.code,{children:"/issue-credentials/records/{recordId}/issue-credential"})})}),(0,t.jsx)(n.td,{children:"This endpoint allows you to issue a VC for a specific credential record."}),(0,t.jsx)(n.td,{children:"Issuer"})]})]})]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Please check the full ",(0,t.jsx)(n.a,{href:"/agent-api",children:"Cloud Agent API"})," specification for more detailed information."]})}),"\n",(0,t.jsx)(n.h2,{id:"issuer-interactions",children:"Issuer interactions"}),"\n",(0,t.jsx)(n.p,{children:"This section describes the Issuer role's available interactions with the Cloud Agent."}),"\n",(0,t.jsx)(n.h3,{id:"creating-a-credential-offer",children:"Creating a Credential Offer"}),"\n",(0,t.jsxs)(n.p,{children:["To start the process, the issuer needs to create a credential offer.\nTo do this, make a ",(0,t.jsx)(n.code,{children:"POST"})," request to the ",(0,t.jsx)(n.a,{href:"/agent-api/#tag/Issue-Credentials-Protocol/operation/createCredentialOffer",children:(0,t.jsx)(n.code,{children:"/issue-credentials/credential-offers"})})," endpoint with a JSON payload that includes the following information:"]}),"\n",(0,t.jsxs)(r.A,{groupId:"vc-formats",children:[(0,t.jsxs)(d.A,{value:"jwt",label:"JWT",children:[(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"claims"}),": The data stored in a verifiable credential. Claims get expressed in a key-value format. The claims contain the data that the issuer attests to, such as name, address, date of birth, and so on."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"issuingDID"}),": The DID referring to the issuer to issue this credential from"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"connectionId"}),": The unique ID of the connection between the holder and the issuer to offer this credential over."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"schemaId"}),": An optional field that, if specified, contains a valid URL to an existing VC schema.\nThe Cloud Agent must be able to dereference the specified URL (i.e. fetch the VC schema content from it), in order to validate the provided claims against it.\nWhen not specified, the claims fields is not validated and can be any valid JSON object.\nPlease refer to the ",(0,t.jsx)(n.a,{href:"/identus-docs/tutorials/schemas/create",children:"Create VC schema"})," doc for details on how to create a VC schema."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"credentialFormat"}),": The format of the credential that will be issued - ",(0,t.jsx)(n.code,{children:"JWT"})," in this case. When not specified, the default value is ",(0,t.jsx)(n.code,{children:"JWT"}),"."]}),"\n"]}),(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"issuingDID"})," and ",(0,t.jsx)(n.code,{children:"connectionId"})," properties come from completing the pre-requisite steps listed above"]})}),(0,t.jsxs)(n.p,{children:["Once the request initiates, a new credential record for the issuer gets created with a unique ID. The state of this record is now ",(0,t.jsx)(n.code,{children:"OfferPending"}),"."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'# Issuer POST request to create a new credential offer\ncurl -X \'POST\' \\\n  \'http://localhost:8080/cloud-agent/issue-credentials/credential-offers\' \\\n    -H \'accept: application/json\' \\\n    -H \'Content-Type: application/json\' \\\n    -H "apikey: $API_KEY" \\\n    -d \'{\n          "claims": {\n            "emailAddress": "alice@wonderland.com",\n            "givenName": "Alice",\n            "familyName": "Wonderland",\n            "dateOfIssuance": "2020-11-13T20:20:39+00:00",\n            "drivingLicenseID": "12345",\n            "drivingClass": 3\n          },\n          "credentialFormat": "JWT",\n          "issuingDID": "did:prism:9f847f8bbb66c112f71d08ab39930d468ccbfe1e0e1d002be53d46c431212c26",\n          "connectionId": "9d075518-f97e-4f11-9d10-d7348a7a0fda",\n          "schemaId": "http://localhost:8080/cloud-agent/schema-registry/schemas/3f86a73f-5b78-39c7-af77-0c16123fa9c2"\n        }\'\n'})})]}),(0,t.jsxs)(d.A,{value:"anoncreds",label:"AnonCreds",children:[(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"claims"}),': The data stored in a verifiable credential. AnonCreds claims get expressed in a flat, "string -> string", key-value pair format. The claims contain the data that the issuer attests to, such as name, address, date of birth, and so on.']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"connectionId"}),": The unique ID of the connection between the holder and the issuer to offer this credential over."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"credentialDefinitionId"}),": The unique ID of the ",(0,t.jsx)(n.a,{href:"/identus-docs/tutorials/credentialdefinition/credential-definition",children:"credential definition"})," that has been created by the issuer as a prerequisite. Please refer to the ",(0,t.jsx)(n.a,{href:"/identus-docs/tutorials/credentialdefinition/credential-definition",children:"Create AnonCreds Credential Definition"})," doc for details on how to create a credential definition."]}),"\n"]}),(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["\ud83d\udccc Note: If the credential definition was created via HTTP URL endpoint, then this credential definition will be referenced to that credential via HTTP URL, and if this credential definition was created via DID URL endpoint, then it will be referenced via DID URL, How to create credential definition for HTTP URL or DID URL is explained in ",(0,t.jsx)(n.a,{href:"/identus-docs/tutorials/credentialdefinition/create",children:"credential definition creation guide"})]})}),(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"credentialFormat"}),": The format of the credential that will be issued - ",(0,t.jsx)(n.code,{children:"AnonCreds"})," in this case."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"issuingDID"}),": The DID referring to the issuer to issue this credential from"]}),"\n"]}),(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"connectionId"})," and ",(0,t.jsx)(n.code,{children:"credentialDefinitionId"})," properties come from completing the pre-requisite steps listed above"]})}),(0,t.jsxs)(n.p,{children:["Once the request initiates, a new credential record for the issuer gets created with a unique ID. The state of this record is now ",(0,t.jsx)(n.code,{children:"OfferPending"}),"."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'# Issuer POST request to create a new credential offer\ncurl -X \'POST\' \\\n  \'http://localhost:8080/cloud-agent/issue-credentials/credential-offers\' \\\n    -H \'accept: application/json\' \\\n    -H \'Content-Type: application/json\' \\\n    -H "apikey: $API_KEY" \\\n    -d \'{\n          "claims": {\n            "emailAddress": "alice@wonderland.com",\n            "givenName": "Alice",\n            "familyName": "Wonderland",\n            "dateOfIssuance": "2020-11-13T20:20:39+00:00",\n            "drivingLicenseID": "12345",\n            "drivingClass": "3"\n          },\n          "credentialFormat": "AnonCreds",\n          "issuingDID": "did:prism:9f847f8bbb66c112f71d08ab39930d468ccbfe1e0e1d002be53d46c431212c26",\n          "connectionId": "9d075518-f97e-4f11-9d10-d7348a7a0fda",\n          "credentialDefinitionId": "5d737816-8fe8-3492-bfe3-1b3e2b67220b"\n        }\'\n'})})]}),(0,t.jsxs)(d.A,{value:"sdjwt",label:"SDJWT",children:[(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"claims"}),": The data stored in a verifiable credential. Claims get expressed in a key-value format. The claims contain the data that the issuer attests to, such as name, address, date of birth, and so on."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"issuingDID"}),": The DID referring to the issuer to issue this credential from"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"connectionId"}),": The unique ID of the connection between the holder and the issuer to offer this credential over."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"schemaId"}),": An optional field that, if specified, contains a valid URL to an existing VC schema.\nThe Cloud Agent must be able to dereference the specified URL (i.e. fetch the VC schema content from it), in order to validate the provided claims against it.\nWhen not specified, the claims fields is not validated and can be any valid JSON object.\nPlease refer to the ",(0,t.jsx)(n.a,{href:"/identus-docs/tutorials/schemas/create",children:"Create VC schema"})," doc for details on how to create a VC schema."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"credentialFormat"}),": The format of the credential that will be issued - ",(0,t.jsx)(n.code,{children:"SDJWT"})," in this case."]}),"\n"]}),(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"issuingDID"})," and ",(0,t.jsx)(n.code,{children:"connectionId"})," properties come from completing the pre-requisite steps listed above"]})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\ud83d\udccc ",(0,t.jsx)(n.strong,{children:"Note:"})," Claims can also include the ",(0,t.jsx)(n.code,{children:"exp"})," Expiration Time attribute, which is part of JWT claims. ",(0,t.jsx)(n.code,{children:"exp"})," attribute is disclosable if specified and can have a value in epoch time (in seconds), indicating when the SDJWT credential expires for more details\n",(0,t.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/html/rfc7519#page-9",children:"RFC5719"})]}),"\n"]}),(0,t.jsxs)(n.p,{children:["Once the request initiates, a new credential record for the issuer gets created with a unique ID. The state of this record is now ",(0,t.jsx)(n.code,{children:"OfferPending"}),"."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'# Issuer POST request to create a new credential offer\ncurl -X \'POST\' \\\n  \'http://localhost:8080/cloud-agent/issue-credentials/credential-offers\' \\\n    -H \'accept: application/json\' \\\n    -H \'Content-Type: application/json\' \\\n    -H "apikey: $API_KEY" \\\n    -d \'{\n          "claims": {\n            "emailAddress": "alice@wonderland.com",\n            "givenName": "Alice",\n            "familyName": "Wonderland",\n            "dateOfIssuance": "2020-11-13T20:20:39+00:00",\n            "drivingLicenseID": "12345",\n            "drivingClass": 3,\n            "exp" : 1883000000\n          },\n          "credentialFormat": "SDJWT",\n          "issuingDID": "did:prism:9f847f8bbb66c112f71d08ab39930d468ccbfe1e0e1d002be53d46c431212c26",\n          "connectionId": "9d075518-f97e-4f11-9d10-d7348a7a0fda",\n          "schemaId": "http://localhost:8080/cloud-agent/schema-registry/schemas/3f86a73f-5b78-39c7-af77-0c16123fa9c2"\n        }\'\n'})})]})]}),"\n",(0,t.jsx)(n.h3,{id:"sending-the-offer-to-the-holder",children:"Sending the Offer to the Holder"}),"\n",(0,t.jsxs)(n.p,{children:["The next step for the Issuer is to send the offer to the holder using DIDComm.\nTo do this, the Issuer agent will process the offer and send it to the holder agent.\nThis process is automatic. The state of the Issuer's record will change to ",(0,t.jsx)(n.code,{children:"OfferSent"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"issuing-the-credential",children:"Issuing the Credential"}),"\n",(0,t.jsxs)(n.p,{children:["Once the holder has approved the offer and sent a request to the Issuer,\nthe Issuer will receive the request via DIDComm and update the record state to ",(0,t.jsx)(n.code,{children:"RequestReceived."})]}),"\n",(0,t.jsxs)(n.p,{children:["The Issuer can then use the ",(0,t.jsx)(n.a,{href:"/agent-api/#tag/Issue-Credentials-Protocol/operation/issueCredential",children:(0,t.jsx)(n.code,{children:"/issue-credentials/records/{recordId}/issue-credential"})})," endpoint to issue the credential to the holder."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'# Issuer POST request to issue the credential\n# make sure you have `issuer_record_id` extracted from created credential offer\n# and the record achieved `RequestReceived` state\ncurl -X POST \\\n    "http://localhost:8080/cloud-agent/issue-credentials/records/$issuer_record_id/issue-credential" \\\n    -H "Content-Type: application/json" \\\n    -H "apikey: $API_KEY"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["When this endpoint gets called, the state of the record will change to ",(0,t.jsx)(n.code,{children:"CredentialPending,"})," and after processing, it will change to ",(0,t.jsx)(n.code,{children:"CredentialGenerated."})]}),"\n",(0,t.jsxs)(n.p,{children:["Finally, the Issuer agent will send the credential to the holder via DIDComm,\nand the state of the record will change to ",(0,t.jsx)(n.code,{children:"CredentialSent"}),".\nAt this point, the Issuer's interactions with the holder are complete."]}),"\n",(0,t.jsx)(n.mermaid,{value:"---\ntitle: Issuer flow\n---\nstateDiagram-v2\n  [*] --\x3e OfferPending: create credential offer (`/issue-credentials/credential-offers`)\n  OfferPending --\x3e OfferSent: send offer (auto via PRISM Agent DIDComm)\n  OfferSent --\x3e RequestReceived: receive request (auto via PRISM Agent DIDComm)\n  RequestReceived --\x3e CredentialPending: issue credential (`/issue-credentials/records/{recordId}/issue-credential`)\n  CredentialPending --\x3e CredentialGenerated: process issued credential (auto via PRISM Agent)\n  CredentialGenerated --\x3e CredentialSent: send credential (auto via PRISM Agent)"}),"\n",(0,t.jsx)(n.h2,{id:"holder-interactions",children:"Holder interactions"}),"\n",(0,t.jsx)(n.p,{children:"This section describes the Holder role's available interactions with the Cloud Agent."}),"\n",(0,t.jsx)(n.h3,{id:"receiving-the-vc-offer",children:"Receiving the VC Offer"}),"\n",(0,t.jsxs)(n.p,{children:["The Holder will receive the offer from the Issuer via DIDComm,\nand a new credential record with a unique ID gets created in the ",(0,t.jsx)(n.code,{children:"OfferReceived"})," state."]}),"\n",(0,t.jsx)(n.p,{children:"This process is automatic for the Cloud Agent."}),"\n",(0,t.jsxs)(n.p,{children:["You could check if a new credential offer is available using ",(0,t.jsx)(n.a,{href:"/#tag/Issue-Credentials-Protocol/operation/getCredentialRecords",children:(0,t.jsx)(n.code,{children:"/issue-credentials/records"})})," request and check for any records available in ",(0,t.jsx)(n.code,{children:"OfferReceived"})," state:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'# Holder GET request to retrieve credential records\ncurl "http://localhost:8090/cloud-agent/issue-credentials/records" \\\n    -H "Content-Type: application/json" \\\n    -H "apikey: $API_KEY"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"approving-the-vc-offer",children:"Approving the VC Offer"}),"\n",(0,t.jsxs)(n.p,{children:["To accept the offer, the Holder can make a ",(0,t.jsx)(n.code,{children:"POST"})," request to the ",(0,t.jsx)(n.a,{href:"/agent-api/#tag/Issue-Credentials-Protocol/operation/acceptCredentialOffer",children:(0,t.jsx)(n.code,{children:"/issue-credentials/records/{recordId}/accept-offer"})})," endpoint with a JSON payload that includes the following information:"]}),"\n",(0,t.jsxs)(r.A,{groupId:"vc-formats",children:[(0,t.jsxs)(d.A,{value:"jwt",label:"JWT",children:[(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"holder_record_id"}),": The unique identifier of the issue credential record known by the holder's Cloud Agent."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"subjectId"}),": This field represents the unique identifier for the subject of the verifiable credential. It is a short-form PRISM ",(0,t.jsx)(n.a,{href:"/docs/concepts/glossary#decentralized-identifier",children:"DID"})," string, such as ",(0,t.jsx)(n.code,{children:"did:prism:subjectIdentifier"}),"."]}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'# Holder POST request to accept the credential offer\ncurl -X POST "http://localhost:8090/cloud-agent/issue-credentials/records/$holder_record_id/accept-offer" \\\n    -H \'accept: application/json\' \\\n    -H \'Content-Type: application/json\' \\\n    -H "apikey: $API_KEY" \\\n    -d \'{\n          "subjectId": "did:prism:subjectIdentifier"\n     }\'\n'})})]}),(0,t.jsxs)(d.A,{value:"anoncreds",labal:"AnonCreds",children:[(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"holder_record_id"}),": The unique identifier of the issue credential record known by the holder's Cloud Agent."]}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"# Holder POST request to accept the credential offer\ncurl -X POST \"http://localhost:8090/cloud-agent/issue-credentials/records/$holder_record_id/accept-offer\" \\\n    -H 'accept: application/json' \\\n    -H 'Content-Type: application/json' \\\n    -H \"apikey: $API_KEY\" \\\n    -d '{}'\n"})})]}),(0,t.jsx)(d.A,{value:"sdjwt",label:"SDJWT",children:(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"holder_record_id"}),": The unique identifier of the issue credential record known by the holder's Cloud Agent."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"subjectId"}),": This field represents the unique identifier for the subject of the verifiable credential. It is a short-form PRISM ",(0,t.jsx)(n.a,{href:"/docs/concepts/glossary#decentralized-identifier",children:"DID"})," string, such as ",(0,t.jsx)(n.code,{children:"did:prism:subjectIdentifier"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"keyId"})," Option parameter"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"when keyId is not provided the SDJWT VC is not binded to Holder/Prover key"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'# Holder POST request to accept the credential offer\ncurl -X POST "http://localhost:8090/cloud-agent/issue-credentials/records/$holder_record_id/accept-offer" \\\n    -H \'accept: application/json\' \\\n    -H \'Content-Type: application/json\' \\\n    -H "apikey: $API_KEY" \\\n    -d \'{\n          "subjectId": "did:prism:subjectIdentifier"\n     }\'\n'})}),"\n",(0,t.jsxs)(n.p,{children:["A SD-JWT Verifiable Credential (VC) without a ",(0,t.jsx)(n.code,{children:"cnf"})," key could possibly look like below"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:' {\n  "_sd": [\n    "CrQe7S5kqBAHt-nMYXgc6bdt2SH5aTY1sU_M-PgkjPI",\n    "JzYjH4svliH0R3PyEMfeZu6Jt69u5qehZo7F7EPYlSE",\n    "PorFbpKuVu6xymJagvkFsFXAbRoc2JGlAUA2BA4o7cI",\n    "TGf4oLbgwd5JQaHyKVQZU9UdGE0w5rtDsrZzfUaomLo",\n    "XQ_3kPKt1XyX7KANkqVR6yZ2Va5NrPIvPYbyMvRKBMM",\n    "XzFrzwscM6Gn6CJDc6vVK8BkMnfG8vOSKfpPIZdAfdE",\n    "gbOsI4Edq2x2Kw-w5wPEzakob9hV1cRD0ATN3oQL9JM",\n    "jsu9yVulwQQlhFlM_3JlzMaSFzglhQG0DpfayQwLUK4"\n  ],\n  "iss": "https://issuer.example.com",\n  "iat": 1683000000,\n  "exp": 1883000000,\n  "sub": "user_42",\n  "_sd_alg": "sha-256"\n}\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"keyId"}),": This is optional field but must be specified to choose which key bounds to the verifiable credential.\nFor more information on key-binding, ",(0,t.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/draft-ietf-oauth-selective-disclosure-jwt",children:"ietf-oauth-selective-disclosure-jwt"}),".\nCurrently, we only support the EdDSA algorithm and curve Ed25519.\nThe specified keyId should be of type Ed25519.\nThe purpose of the keyId should be authentication."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'# Holder POST request to accept the credential offer with keyId\ncurl -X POST "http://localhost:8090/cloud-agent/issue-credentials/records/$holder_record_id/accept-offer" \\\n    -H \'accept: application/json\' \\\n    -H \'Content-Type: application/json\' \\\n    -H "apikey: $API_KEY" \\\n    -d \'{\n          "subjectId": "did:prism:subjectIdentifier",\n          "keyId": "key-1"    \n     }\'\n'})}),"\n",(0,t.jsxs)(n.p,{children:["A SD-JWT Verifiable Credential (VC) that includes a ",(0,t.jsx)(n.code,{children:"cnf"})," key could possibly look like below"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:' {\n  "_sd": [\n    "CrQe7S5kqBAHt-nMYXgc6bdt2SH5aTY1sU_M-PgkjPI",\n    "JzYjH4svliH0R3PyEMfeZu6Jt69u5qehZo7F7EPYlSE",\n    "PorFbpKuVu6xymJagvkFsFXAbRoc2JGlAUA2BA4o7cI",\n    "TGf4oLbgwd5JQaHyKVQZU9UdGE0w5rtDsrZzfUaomLo",\n    "XQ_3kPKt1XyX7KANkqVR6yZ2Va5NrPIvPYbyMvRKBMM",\n    "XzFrzwscM6Gn6CJDc6vVK8BkMnfG8vOSKfpPIZdAfdE",\n    "gbOsI4Edq2x2Kw-w5wPEzakob9hV1cRD0ATN3oQL9JM",\n    "jsu9yVulwQQlhFlM_3JlzMaSFzglhQG0DpfayQwLUK4"\n  ],\n  "iss": "https://issuer.example.com",\n  "iat": 1683000000,\n  "exp": 1883000000,\n  "sub": "user_42",\n  "_sd_alg": "sha-256",\n  "cnf": {\n    "jwk": {\n      "kty": "EC",\n      "crv": "P-256",\n      "x": "TCAER19Zvu3OHF4j4W4vfSVoHIP1ILilDls7vCeGemc",\n      "y": "ZxjiWWbZMQGHVWKVQ4hbSIirsVfuecCE6t4jT9F2HZQ"\n    }\n  }\n}\n'})}),"\n"]}),"\n"]})})]}),"\n",(0,t.jsxs)(n.p,{children:["This request will change the state of the record to ",(0,t.jsx)(n.code,{children:"RequestPending"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"receiving-the-vc-credential",children:"Receiving the VC Credential"}),"\n",(0,t.jsxs)(n.p,{children:["Once the Holder has approved the offer and sent a request to the Issuer, the Holder agent will process the request and send it to the Issuer agent.\nThe state of the Holder's record will change to ",(0,t.jsx)(n.code,{children:"RequestSent"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["After the Issuer has issued the credential, the Holder will receive the credential via DIDComm, and the state of the Holder's record will change to ",(0,t.jsx)(n.code,{children:"CredentialReceived"}),".\nThis process is automatic for the Cloud Agent."]}),"\n",(0,t.jsxs)(n.p,{children:["The Holder can check the achieved credential using a GET request to ",(0,t.jsx)(n.a,{href:"/agent-api/#tag/Issue-Credentials-Protocol/operation/getCredentialRecord",children:(0,t.jsx)(n.code,{children:"/issue-credentials/records/{recordId}/"})})," endpoint."]}),"\n",(0,t.jsx)(n.mermaid,{value:"---\ntitle: Holder Flow\n---\nstateDiagram-v2\n  [*] --\x3e OfferReceived: receive offer (auto via PRISM Agent)\n  OfferReceived --\x3e RequestPending: accept offer (`/issue-credentials/records/{recordId}/accept-offer`)\n  RequestPending --\x3e RequestSent: send request (auto via PRISM Agent)\n  RequestSent --\x3e CredentialReceived: receive credential (auto via PRISM Agent)"}),"\n",(0,t.jsx)(n.h2,{id:"sequence-diagram",children:"Sequence diagram"}),"\n",(0,t.jsx)(n.p,{children:"The following diagram shows the end-to-end flow for an issuer to issue a VC to a holder."}),"\n",(0,t.jsxs)(r.A,{groupId:"vc-formats",children:[(0,t.jsx)(d.A,{value:"jwt",label:"JWT",children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(6527).A+"",width:"1362",height:"2017"})})}),(0,t.jsx)(d.A,{value:"anoncreds",label:"AnonCreds",children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(39637).A+"",width:"1625",height:"2188"})})})]})]})}function f(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},19365:(e,n,s)=>{s.d(n,{A:()=>d});s(96540);var t=s(34164);const i={tabItem:"tabItem_Ymn6"};var r=s(74848);function d(e){let{children:n,hidden:s,className:d}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,d),hidden:s,children:n})}},11470:(e,n,s)=>{s.d(n,{A:()=>C});var t=s(96540),i=s(34164),r=s(23104),d=s(56347),a=s(205),o=s(57485),c=s(31682),l=s(70679);function h(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:s}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:s,attributes:t,default:i}}=e;return{value:n,label:s,attributes:t,default:i}}))}(s);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function f(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:s}=e;const i=(0,d.W6)(),r=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,o.aZ)(r),(0,t.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function j(e){const{defaultValue:n,queryString:s=!1,groupId:i}=e,r=u(e),[d,o]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!f({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=s.find((e=>e.default))??s[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:r}))),[c,h]=p({queryString:s,groupId:i}),[j,x]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,l.Dv)(s);return[i,(0,t.useCallback)((e=>{s&&r.set(e)}),[s,r])]}({groupId:i}),g=(()=>{const e=c??j;return f({value:e,tabValues:r})?e:null})();(0,a.A)((()=>{g&&o(g)}),[g]);return{selectedValue:d,selectValue:(0,t.useCallback)((e=>{if(!f({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),x(e)}),[h,x,r]),tabValues:r}}var x=s(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var m=s(74848);function v(e){let{className:n,block:s,selectedValue:t,selectValue:d,tabValues:a}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),l=e=>{const n=e.currentTarget,s=o.indexOf(n),i=a[s].value;i!==t&&(c(n),d(i))},h=e=>{let n=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const s=o.indexOf(e.currentTarget)+1;n=o[s]??o[0];break}case"ArrowLeft":{const s=o.indexOf(e.currentTarget)-1;n=o[s]??o[o.length-1];break}}n?.focus()};return(0,m.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":s},n),children:a.map((e=>{let{value:n,label:s,attributes:r}=e;return(0,m.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>o.push(e),onKeyDown:h,onClick:l,...r,className:(0,i.A)("tabs__item",g.tabItem,r?.className,{"tabs__item--active":t===n}),children:s??n},n)}))})}function I(e){let{lazy:n,children:s,selectedValue:i}=e;const r=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===i));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,m.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function b(e){const n=j(e);return(0,m.jsxs)("div",{className:(0,i.A)("tabs-container",g.tabList),children:[(0,m.jsx)(v,{...n,...e}),(0,m.jsx)(I,{...n,...e})]})}function C(e){const n=(0,x.A)();return(0,m.jsx)(b,{...e,children:h(e.children)},String(n))}},39637:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/anoncreds-issue-flow-0756e11aed09e7507347ce0ebdbf378e.png"},6527:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/issue-flow-11d234a161e3e9a34314bfaa4ca630f3.png"},28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>a});var t=s(96540);const i={},r=t.createContext(i);function d(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);