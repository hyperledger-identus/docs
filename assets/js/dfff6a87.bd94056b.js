"use strict";(self.webpackChunkidentus_documentation_portal=self.webpackChunkidentus_documentation_portal||[]).push([[2597],{35797:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var o=n(74848),s=n(28453);const i={},r="Pluto",a={id:"pluto/README",title:"Pluto",description:"Pluto is the SDK storage layer, responsible for the saving and retrieval of data within the SDK.",source:"@site/edge-agent-sdk-ts/docs/pluto/README.md",sourceDirName:"pluto",slug:"/pluto/",permalink:"/docs/edge-agent-sdk-ts/pluto/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialsSidebar",previous:{title:"Agent",permalink:"/docs/edge-agent-sdk-ts/sdk/classes/Agent"},next:{title:"Mercury",permalink:"/docs/edge-agent-sdk-ts/sdk/classes/Mercury"}},l={},d=[{value:"Top level interface",id:"top-level-interface",level:2},{value:"Store",id:"store",level:2},{value:"RxDB storage",id:"rxdb-storage",level:2},{value:"Implementing storage for the SDK",id:"implementing-storage-for-the-sdk",level:2},{value:"Community implementations:",id:"community-implementations",level:3}];function c(e){const t={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"pluto",children:"Pluto"}),"\n",(0,o.jsx)(t.p,{children:"Pluto is the SDK storage layer, responsible for the saving and retrieval of data within the SDK.\nAs storage is a complex issue Pluto has been designed to try and enable maximum flexibility balanced with ease-of-use. Multiple levels of abstraction are provided so an implementation can be curated specifically to the use-case.\nIn an effort to reduce the minimum amount of work required to get started with the SDK, implementations of the top-most abstractions are provided, but the underlying data layer is not and will require some work."}),"\n",(0,o.jsx)(t.p,{children:"The levels of abstraction are described below:"}),"\n",(0,o.jsx)(t.h2,{id:"top-level-interface",children:"Top level interface"}),"\n",(0,o.jsx)(t.p,{children:"An SDK specific interface, detailing all the necessary storage functions for operation."}),"\n",(0,o.jsx)(t.p,{children:"This interface defines the specific functions requried by the SDK, and while it's input and output are all Domain classes, it provides no opinion on how they are handled internally.\nThis approach allows for maximum customisation, constrained only by the interface contract."}),"\n",(0,o.jsxs)(t.p,{children:["The top level interface can be found at ",(0,o.jsx)(t.a,{href:"/docs/edge-agent-sdk-ts/sdk/interfaces/Domain.Pluto-1",children:"SDK.Domain.Pluto"})," alongside our other top level interfaces."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-TS",children:'  import SDK from "@hyperledger/identus-edge-agent-sdk";\n\n  class CustomPluto implements SDK.Domain.Pluto {\n    storeMessage(message: SDK.Domain.Message): Promise<void> {\n      // implementation\n    }\n\n    getAllMessages(): Promise<SDK.Domain.Message[]> {\n      // implementation\n    }\n\n    // ...etc\n  }\n\n  const pluto = new CustomPluto();\n  const agent = Agent.initialize({ pluto, ...etc });\n'})}),"\n",(0,o.jsx)(t.h2,{id:"store",children:"Store"}),"\n",(0,o.jsx)(t.p,{children:"A general purpose CRUD interface, with a pre-designed Table structure and significantly smaller footprint than the top level interface."}),"\n",(0,o.jsx)(t.p,{children:"Designed to be used with the existing Pluto implementation, where Pluto handles the logic and orchestration from Domain classes to Storable models, and the Store handles the persistence of those models."}),"\n",(0,o.jsxs)(t.p,{children:["The Store revolves around a storable object, which is an arbitrary object with a ",(0,o.jsx)(t.code,{children:"uuid"})," property that uniquely identifies the object.\nThe interface can be found at ",(0,o.jsx)(t.a,{href:"/docs/edge-agent-sdk-ts/sdk/interfaces/Pluto.Store",children:"SDK.Pluto.Store"})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-TS",children:'  import SDK from "@hyperledger/identus-edge-agent-sdk";\n\n  class CustomStore implements SDK.Pluto.Store {\n    insert<T extends SDK.Domain.Pluto.Storable>(table: string, model: T): Promise<void> {\n      // implementation\n    }\n\n    query<T extends SDK.Domain.Pluto.Storable>(table: string, query?: MangoQuery<T>): Promise<T[]> {\n      // implementation\n    }\n\n    update<T extends SDK.Domain.Pluto.Storable>(table: string, model: T): Promise<void> {\n      // implementation\n    }\n\n    delete(table: string, uuid: string): Promise<void> {\n      // implementation\n    }\n  }\n\n  const store = new CustomStore();\n  const pluto = new SDK.Pluto(store, apollo);\n  const agent = Agent.initialize({ pluto, apollo, ...etc });\n'})}),"\n",(0,o.jsx)(t.h2,{id:"rxdb-storage",children:"RxDB storage"}),"\n",(0,o.jsxs)(t.p,{children:["An implementation of the ",(0,o.jsx)(t.a,{href:"https://rxdb.info/rx-storage.html",children:"RxStorage"})," interface, allowing the choice and customisation of data layer using RxDB implementations.\nThe SDK exports an ",(0,o.jsx)(t.a,{href:"/docs/edge-agent-sdk-ts/sdk/classes/Store",children:"implementation"})," of the Store interface using RxDB, which only requires the storage, name and password to run."]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"Note: the composed storage requires encryption capabilities."}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-TS",children:"  import SDK from \"@hyperledger/identus-edge-agent-sdk\";\n  import { getRxStorageMemory } from 'rxdb/plugins/storage-memory';\n  import { wrappedKeyEncryptionCryptoJsStorage } from 'rxdb/plugins/encryption-crypto-js';\n\n  // custom RxDB inMemory storage\n  const customStorage = wrappedKeyEncryptionCryptoJsStorage({\n    storage: getRxStorageMemory()\n  });\n\n  const store = new SDK.Store({\n    name: `exampledb`,\n    password: 'examplepass',\n    storage: customStorage,\n  });\n  const pluto = new SDK.Pluto(store, apollo);\n  const agent = Agent.initialize({ pluto, apollo, ...etc });\n"})}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["Read more about RxStorage in the RxDB docs ",(0,o.jsx)(t.a,{href:"https://rxdb.info/rx-storage.html",children:"https://rxdb.info/rx-storage.html"})]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"implementing-storage-for-the-sdk",children:"Implementing storage for the SDK"}),"\n",(0,o.jsx)(t.p,{children:"Pluto, the SDK storage layer, is not a complete solution and requires some work. To make this as simple as possible, there are multiple options of different complexity provided. These options are discussed in more detail in the Pluto module.\xa0"}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["[!WARNING]",(0,o.jsx)(t.br,{}),"\n","Provided demo implementations are intentionally oversimplified and ",(0,o.jsx)(t.strong,{children:"should not"})," be used in production."]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"community-implementations",children:"Community implementations:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"https://github.com/atala-community-projects/pluto-encrypted",children:"atala-community-projects/pluto-encrypted"}),": InMemory, IndexDB, LevelDB, as well as a test-suite to help you build your own."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var o=n(96540);const s={},i=o.createContext(s);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);