"use strict";(self.webpackChunkidentus_documentation_portal=self.webpackChunkidentus_documentation_portal||[]).push([[4263],{27295:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>d,toc:()=>o});var s=t(74848),i=t(28453);const a={},r="Update the credential schema",d={id:"schemas/update",title:"Update the credential schema",description:"The Identus Platform exposes REST API for creation, fetching, and searching the credential schema records.",source:"@site/identus-cloud-agent/docs/docusaurus/schemas/update.md",sourceDirName:"schemas",slug:"/schemas/update",permalink:"/identus-docs/tutorials/schemas/update",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialsSidebar",previous:{title:"Create the credential schema",permalink:"/identus-docs/tutorials/schemas/create"},next:{title:"Delete the credential schema",permalink:"/identus-docs/tutorials/schemas/delete"}},c={},o=[{value:"Step-by-step guide",id:"step-by-step-guide",level:2},{value:"1. Define the updated JSON Schema for the Verifiable Credential",id:"1-define-the-updated-json-schema-for-the-verifiable-credential",level:3},{value:"2. Update the credential schema record",id:"2-update-the-credential-schema-record",level:3}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"update-the-credential-schema",children:"Update the credential schema"})}),"\n",(0,s.jsx)(n.p,{children:"The Identus Platform exposes REST API for creation, fetching, and searching the credential schema records."}),"\n",(0,s.jsx)(n.p,{children:"The OpenAPI specification and ReDoc documentation describe the endpoint."}),"\n",(0,s.jsx)(n.p,{children:"In this document, you can find step-by-step instructions for updating the credential schema."}),"\n",(0,s.jsxs)(n.p,{children:["After creation, updating the credential schema record is not possible.\nIf you need to create a similar schema but with additional fields or a different description, or metadata, you need to create the credential schema record with the same ",(0,s.jsx)(n.code,{children:"id"})," and a higher ",(0,s.jsx)(n.code,{children:"version"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"step-by-step-guide",children:"Step-by-step guide"}),"\n",(0,s.jsx)(n.p,{children:"The following guide demonstrates how to update a driving license credential schema."}),"\n",(0,s.jsx)(n.h3,{id:"1-define-the-updated-json-schema-for-the-verifiable-credential",children:"1. Define the updated JSON Schema for the Verifiable Credential"}),"\n",(0,s.jsxs)(n.p,{children:["Assume that you need to update the credential schema from the previous tutorial.\nSo, there is an existing driving license, and the ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary#verifiable-credential",children:"verifiable credential"})," must additionally include two fields:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"bloodType - the blood type of the driver"}),"\n",(0,s.jsx)(n.li,{children:"organDonor - indicates whether or not the person is an organ donor"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The blood type on a driver's license is represented using the ABO blood group system, and\npotentially represented as A+, A-, B+, B-, AB+, AB-, O+, or O-.\nSo, assume that this set of values must be enforced by the schema definition using the following regex:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-regexp",children:"^(A|B|AB|O)[+-]?$\n"})}),"\n",(0,s.jsxs)(n.p,{children:["At the same time, the organ donor must represent a binary value: ",(0,s.jsx)(n.code,{children:"true"}),"/",(0,s.jsx)(n.code,{children:"false"}),", ",(0,s.jsx)(n.code,{children:"yes"}),"/",(0,s.jsx)(n.code,{children:"no"}),", depending on the\njurisdiction, and it also might be ",(0,s.jsx)(n.code,{children:"unknown"})," and must be enforced by the schema definition using the ",(0,s.jsx)(n.code,{children:"enum"})," keyword:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"  enum:\n    - true\n    - false\n    - yes\n    - no\n    - unknown\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": As the original credential schema allows ",(0,s.jsx)(n.code,{children:"additionalProperties"})," to be defined, we assume that two additional claims must get added to the ",(0,s.jsx)(n.code,{children:"required"})," attributes."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["As the change to the credential schema is backward compatible, the next version can be ",(0,s.jsx)(n.code,{children:"1.1.0"})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"The JSON Schema changes must be defined as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n   "$id": "https://example.com/driving-license-1.1.0",\n   "$schema": "https://json-schema.org/draft/2020-12/schema",\n   "description": "Driving License",\n   "type": "object",\n   "properties": {\n      "emailAddress": {\n         "type": "string",\n         "format": "email"\n      },\n      "givenName": {\n         "type": "string"\n      },\n      "familyName": {\n         "type": "string"\n      },\n      "dateOfIssuance": {\n         "type": "string",\n         "format": "date-time"\n      },\n      "drivingLicenseID": {\n         "type": "string"\n      },\n      "drivingClass": {\n         "type": "integer"\n      },\n      "bloodType": {\n         "type": "string",\n         "pattern": "^(A|B|AB|O)[+-]?$"\n      },\n      "donorStatus": {\n         "type": "string",\n         "enum": [\n            "true",\n            "false",\n            "yes",\n            "no"\n         ]\n      }\n   },\n   "required": [\n      "emailAddress",\n      "familyName",\n      "dateOfIssuance",\n      "drivingLicenseID",\n      "drivingClass",\n      "bloodType",\n      "donorStatus"\n   ],\n   "additionalProperties": true\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-update-the-credential-schema-record",children:"2. Update the credential schema record"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Open your preferred REST API client, such as Postman or Insomnia, or use the client stub generated based on the\nOpenAPI specification."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In the client, create a new PUT request to the ",(0,s.jsx)(n.code,{children:"/cloud-agent/schema-registry/schemas/{id}"})," endpoint, where ",(0,s.jsx)(n.code,{children:"id"})," is a\nlocally unique credential schema id, formatted as a URL."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Note that the value of the ",(0,s.jsx)(n.code,{children:"author"})," field must match the short form of a PRISM DID that has been created using the same agent. An unpublished DID is sufficient. Please refer to the ",(0,s.jsx)(n.a,{href:"/identus-docs/tutorials/dids/create",children:"Create DID"})," documentation page for more details on how to create a PRISM DID."]}),"\n",(0,s.jsx)(n.p,{children:"In the request body, create a JSON object:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "name": "driving-license",\n  "version": "1.1.0",\n  "description": "Driving License Schema",\n  "type": "https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json",\n  "author": "did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff",\n  "schema": {\n     "$id": "https://example.com/driving-license-1.1.0",\n     "$schema": "https://json-schema.org/draft/2020-12/schema",\n     "description": "Driving License",\n     "type": "object",\n     "properties": {\n        "emailAddress": {\n           "type": "string",\n           "format": "email"\n        },\n        "givenName": {\n           "type": "string"\n        },\n        "familyName": {\n           "type": "string"\n        },\n        "dateOfIssuance": {\n           "type": "string",\n           "format": "date-time"\n        },\n        "drivingLicenseID": {\n           "type": "string"\n        },\n        "drivingClass": {\n           "type": "integer"\n        },\n        "bloodType": {\n           "type": "string",\n           "pattern": "^(A|B|AB|O)[+-]?$"\n        },\n        "donorStatus": {\n           "type": "string",\n           "enum": [\n              "true",\n              "false",\n              "yes",\n              "no"\n           ]\n        }\n     },\n     "required": [\n        "emailAddress",\n        "familyName",\n        "dateOfIssuance",\n        "drivingLicenseID",\n        "drivingClass",\n        "bloodType",\n        "donorStatus"\n     ],\n     "additionalProperties": true\n  },\n  "tags": [\n    "driving",\n    "license"\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"The curl example might be the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'curl -X \'PUT\' \\\n  \'http://localhost:8080/cloud-agent/schema-registry/schemas/f2bfbf78-8bd6-4cc6-8b39-b3a25e01e8ea\' \\\n  -H \'accept: application/json\' \\\n  -H "apikey: $API_KEY" \\\n  -H \'Content-Type: application/json\' \\\n  -d \'{\n  "name": "driving-license",\n  "version": "1.1.0",\n  "description": "Driving License Schema",\n  "type": "https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json",\n  "author": "did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff",\n  "schema": {\n     "$id": "https://example.com/driving-license-1.1.0",\n     "$schema": "https://json-schema.org/draft/2020-12/schema",\n     "description": "Driving License",\n     "type": "object",\n     "properties": {\n        "emailAddress": {\n           "type": "string",\n           "format": "email"\n        },\n        "givenName": {\n           "type": "string"\n        },\n        "familyName": {\n           "type": "string"\n        },\n        "dateOfIssuance": {\n           "type": "string",\n           "format": "date-time"\n        },\n        "drivingLicenseID": {\n           "type": "string"\n        },\n        "drivingClass": {\n           "type": "integer"\n        },\n        "bloodType": {\n           "type": "string",\n           "pattern": "^(A|B|AB|O)[+-]?$"\n        },\n        "donorStatus": {\n           "type": "string",\n           "enum": [\n              "true",\n              "false",\n              "yes",\n              "no"\n           ]\n        }\n     },\n     "required": [\n        "emailAddress",\n        "familyName",\n        "dateOfIssuance",\n        "drivingLicenseID",\n        "drivingClass",\n        "bloodType",\n        "donorStatus"\n     ],\n     "additionalProperties": true\n  },\n  "tags": [\n    "driving",\n    "license"\n  ]\n}\'\n'})}),"\n",(0,s.jsx)(n.p,{children:"...and response might be the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n   "guid": "3f86a73f-5b78-39c7-af77-0c16123fa9c2",\n   "id": "f2bfbf78-8bd6-4cc6-8b39-b3a25e01e8ea",\n   "longId": "did:prism:agent/f2bfbf78-8bd6-4cc6-8b39-b3a25e01e8ea?version=1.1.0",\n   "name": "driving-license",\n   "version": "1.1.0",\n   "description": "Driving License Schema",\n   "type": "https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json",\n   "author": "did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff",\n   "authored": "2023-03-14T14:41:46.713943Z",\n   "tags": [\n      "driving",\n      "license"\n   ],\n   "schema": {\n      "$id": "https://example.com/driving-license-1.1.0",\n      "$schema": "https://json-schema.org/draft/2020-12/schema",\n      "description": "Driving License",\n      "type": "object",\n      "properties": {\n         "emailAddress": {\n            "type": "string",\n            "format": "email"\n         },\n         "givenName": {\n            "type": "string"\n         },\n         "familyName": {\n            "type": "string"\n         },\n         "dateOfIssuance": {\n            "type": "string",\n            "format": "date-time"\n         },\n         "drivingLicenseID": {\n            "type": "string"\n         },\n         "drivingClass": {\n            "type": "integer"\n         },\n         "bloodType": {\n            "type": "string",\n            "pattern": "^(A|B|AB|O)[+-]?$"\n         },\n         "donorStatus": {\n            "type": "string",\n            "enum": [\n               "true",\n               "false",\n               "yes",\n               "no"\n            ]\n         }\n      },\n      "required": [\n         "emailAddress",\n         "familyName",\n         "dateOfIssuance",\n         "drivingLicenseID",\n         "drivingClass",\n         "bloodType",\n         "donorStatus"\n      ],\n      "additionalProperties": true\n   },\n   "kind": "CredentialSchema",\n   "self": "/schema-registry/schemas/3f86a73f-5b78-39c7-af77-0c16123fa9c2"\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var s=t(96540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);