"use strict";(self.webpackChunkidentus_documentation_portal=self.webpackChunkidentus_documentation_portal||[]).push([[2578],{57857:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>r});var s=t(74848),i=t(28453);const a={},l="Migration from apikey to JWT authentication",c={id:"multitenancy/tenant-migration",title:"Migration from apikey to JWT authentication",description:"The Cloud Agent authentication supports multiple authentication methods simultaneously, which means the user can seamlessly use any available credentials including apikey or JWT to access the wallet.",source:"@site/cloud-agent/docs/docusaurus/multitenancy/tenant-migration.md",sourceDirName:"multitenancy",slug:"/multitenancy/tenant-migration",permalink:"/docs/tutorials/multitenancy/tenant-migration",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialsSidebar",previous:{title:"Tenant Onboarding Self-Service",permalink:"/docs/tutorials/multitenancy/tenant-onboarding-self-service"},next:{title:"Admin Authorization with External IAM",permalink:"/docs/tutorials/multitenancy/admin-authz-ext-iam"}},o={},r=[{value:"Roles",id:"roles",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Overview",id:"overview",level:2},{value:"Endpoints",id:"endpoints",level:2},{value:"Agent endpoints",id:"agent-endpoints",level:3},{value:"Keycloak endpoints",id:"keycloak-endpoints",level:3},{value:"Tenant interactions",id:"tenant-interactions",level:2},{value:"1. Check the existing wallets using <code>apikey</code>",id:"1-check-the-existing-wallets-using-apikey",level:3},{value:"2. Get the access token on keycloak",id:"2-get-the-access-token-on-keycloak",level:3},{value:"3. Extract the subject ID from JWT",id:"3-extract-the-subject-id-from-jwt",level:3},{value:"4. Grant the user permission to the wallet",id:"4-grant-the-user-permission-to-the-wallet",level:3},{value:"5. Perform a simple action to verify access to the Cloud Agent",id:"5-perform-a-simple-action-to-verify-access-to-the-cloud-agent",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"migration-from-apikey-to-jwt-authentication",children:["Migration from ",(0,s.jsx)(n.code,{children:"apikey"})," to ",(0,s.jsx)(n.code,{children:"JWT"})," authentication"]}),"\n",(0,s.jsxs)(n.p,{children:["The Cloud Agent authentication supports multiple authentication methods simultaneously, which means the user can seamlessly use any available credentials including ",(0,s.jsx)(n.code,{children:"apikey"})," or ",(0,s.jsx)(n.code,{children:"JWT"})," to access the wallet.\nThe agent's ",(0,s.jsx)(n.a,{href:"/home/concepts/glossary#uma",children:"UMA"})," permission resource also exposes the self-service permission endpoint, allowing users to manage the permissions for their wallets.\nIt allows users to transition from ",(0,s.jsx)(n.code,{children:"apikey"})," to ",(0,s.jsx)(n.code,{children:"JWT"})," authentication without admin intervention."]}),"\n",(0,s.jsx)(n.h2,{id:"roles",children:"Roles"}),"\n",(0,s.jsxs)(n.p,{children:["In the migration process from ",(0,s.jsx)(n.code,{children:"apikey"})," to ",(0,s.jsx)(n.code,{children:"JWT"}),", there is only one role:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/home/concepts/glossary#tenant",children:"Tenant"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Keycloak up and running"}),"\n",(0,s.jsxs)(n.li,{children:["Keycloak is configured the same as in ",(0,s.jsx)(n.a,{href:"/docs/tutorials/multitenancy/tenant-onboarding-self-service",children:"Tenant Onboarding Self-Service"})]}),"\n",(0,s.jsx)(n.li,{children:"The Cloud Agent is up and running"}),"\n",(0,s.jsxs)(n.li,{children:["The Cloud Agent is configured the same as in ",(0,s.jsx)(n.a,{href:"/docs/tutorials/multitenancy/tenant-onboarding-self-service",children:"Tenant Onboarding Self-Service"})]}),"\n",(0,s.jsxs)(n.li,{children:["The user has access to the wallet using ",(0,s.jsx)(n.code,{children:"apikey"}),". (See ",(0,s.jsx)(n.a,{href:"/docs/tutorials/multitenancy/tenant-onboarding",children:"Tenant Onboarding"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"The user has an account registered on Keycloak"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["This tutorial outlines the steps to transition from ",(0,s.jsx)(n.code,{children:"apikey"})," to ",(0,s.jsx)(n.code,{children:"JWT"})," authentication.\nInitially, users have wallet access through the ",(0,s.jsx)(n.code,{children:"apikey"})," method.\nTo migrate to ",(0,s.jsx)(n.code,{children:"JWT"})," authentication, users can create a new UMA permission for their wallet and grant permission to their Keycloak account."]}),"\n",(0,s.jsx)(n.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,s.jsx)(n.h3,{id:"agent-endpoints",children:"Agent endpoints"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Endpoint"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Role"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"GET /wallets"})}),(0,s.jsx)(n.td,{children:"List the wallets on the Cloud Agent"}),(0,s.jsx)(n.td,{children:"Tenant"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"POST /wallets"})}),(0,s.jsx)(n.td,{children:"Create a new wallet on the Cloud Agent"}),(0,s.jsx)(n.td,{children:"Tenant"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"POST /wallets/{walletId}/uma-permissions"})}),(0,s.jsx)(n.td,{children:"Create a uma-permission for a wallet"}),(0,s.jsx)(n.td,{children:"Tenant"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"GET /did-registrar/dids"})}),(0,s.jsx)(n.td,{children:"List the DIDs inside the wallet"}),(0,s.jsx)(n.td,{children:"Tenant"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"keycloak-endpoints",children:"Keycloak endpoints"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Endpoint"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Role"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"POST /realms/{realm}/protocol/openid-connect/token"})}),(0,s.jsx)(n.td,{children:"Issue a new JWT token"}),(0,s.jsx)(n.td,{children:"Tenant"})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"tenant-interactions",children:"Tenant interactions"}),"\n",(0,s.jsxs)(n.h3,{id:"1-check-the-existing-wallets-using-apikey",children:["1. Check the existing wallets using ",(0,s.jsx)(n.code,{children:"apikey"})]}),"\n",(0,s.jsxs)(n.p,{children:["This tutorial assumes the tenant can access the wallet using ",(0,s.jsx)(n.code,{children:"apikey"}),".\nBefore granting more permission to the wallet, the ",(0,s.jsx)(n.code,{children:"walletId"})," must be identified.\nTo find the wallet, list them using ",(0,s.jsx)(n.code,{children:"apikey"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl -X 'GET' \\\n  'http://localhost:8080/cloud-agent/wallets' \\\n  -H 'accept: application/json' \\\n  -H \"apikey: my-tenant-token\"\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Make sure to use the correct ",(0,s.jsx)(n.code,{children:"apikey"})," from the pre-requisite."]}),"\n",(0,s.jsx)(n.p,{children:"Response Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "self": "/wallets",\n  "kind": "WalletPage",\n  "pageOf": "/wallets",\n  "contents": [\n    {\n      "id": "99734c87-5c9d-4697-b5fd-dea4e9590ba7",\n      "name": "my-wallet",\n      "createdAt": "2023-01-01T00:00:00Z",\n      "updatedAt": "2023-01-01T00:00:00Z"\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-get-the-access-token-on-keycloak",children:"2. Get the access token on keycloak"}),"\n",(0,s.jsx)(n.p,{children:"Run this command to log in and get the access token"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl -X \'POST\' \\\n  \'http://localhost:9980/realms/my-realm/protocol/openid-connect/token\' \\\n  -d "grant_type=password" \\\n  -d "client_id=admin-cli" \\\n  -d "username=alice" \\\n  -d "password=1234"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Make sure to use the correct username and password.\nSpecial attention on the ",(0,s.jsx)(n.code,{children:"client_id"}),"; this should be the actual ",(0,s.jsx)(n.code,{children:"client_id"})," of the frontend application that logs the user in.\nFor this tutorial, it is OK to use ",(0,s.jsx)(n.code,{children:"admin-cli"})]}),"\n",(0,s.jsx)(n.p,{children:"Example token response (some fields omitted for readability)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "access_token": "eyJhbGciOi...7ocDHofUDQ",\n    "refresh_token": "eyJhbGciOi...otsEEi4eQA",\n    ...\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-extract-the-subject-id-from-jwt",children:"3. Extract the subject ID from JWT"}),"\n",(0,s.jsxs)(n.p,{children:["When creating a UMA permission, it is important to provide the subject ID to grant permission.\nTo get the subject ID of the tenant, one can inspect the JWT payload ",(0,s.jsx)(n.code,{children:"sub"})," claim."]}),"\n",(0,s.jsxs)(n.p,{children:["Run this command to extract the ",(0,s.jsx)(n.code,{children:"sub"})," claim of the token from previous step."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"echo 'eyJhbGciOi...7ocDHofUDQ' | cut --delimiter='.' --fields=2 | base64 --decode | jq -r '.sub'\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example result"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-log",children:"4a5c6ac9-12f5-4d1e-b8f2-667525c083fd\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-grant-the-user-permission-to-the-wallet",children:"4. Grant the user permission to the wallet"}),"\n",(0,s.jsxs)(n.p,{children:["UMA permission can be added to the current wallet, giving Keycloak users access.\nTo do this, invoke the ",(0,s.jsx)(n.code,{children:"POST /wallets/{walletId}/uma-permissions"})," endpoint on the agent."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl -X 'POST' \\\n  'http://localhost:8080/cloud-agent/wallets/99734c87-5c9d-4697-b5fd-dea4e9590ba7/uma-permissions' \\\n  -v \\\n  -H 'accept: */*' \\\n  -H \"apikey: my-tenant-token\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"subject\": \"205e04b7-0158-41b0-89c3-f91c3a09f89b\"\n  }'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Make sure to use the correct ",(0,s.jsx)(n.code,{children:"subject"})," for the user and the correct ",(0,s.jsx)(n.code,{children:"walletId"})," from the step earlier."]}),"\n",(0,s.jsxs)(n.p,{children:["The response should return the status ",(0,s.jsx)(n.code,{children:"200 OK"})," in case of successful permission creation."]}),"\n",(0,s.jsx)(n.h3,{id:"5-perform-a-simple-action-to-verify-access-to-the-cloud-agent",children:"5. Perform a simple action to verify access to the Cloud Agent"}),"\n",(0,s.jsxs)(n.p,{children:["After successful UMA permission creation, the user should be able to use the ",(0,s.jsx)(n.code,{children:"JWT"})," token to authenticate the wallet.\nList the wallet using a new ",(0,s.jsx)(n.code,{children:"Authorization"})," header. The listed wallets should contain the wallet with the same ID in step 1."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl -X 'GET' \\\n  'http://localhost:8080/cloud-agent/wallets' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer eyJhbGciOi...7ocDHofUDQ'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Make sure to use the correct ",(0,s.jsx)(n.code,{children:"JWT"})," from step 2."]}),"\n",(0,s.jsx)(n.p,{children:"Response Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "self": "/wallets",\n  "kind": "WalletPage",\n  "pageOf": "/wallets",\n  "contents": [\n    {\n      "id": "99734c87-5c9d-4697-b5fd-dea4e9590ba7",\n      "name": "my-wallet",\n      "createdAt": "2023-01-01T00:00:00Z",\n      "updatedAt": "2023-01-01T00:00:00Z"\n    }\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This response indicates that the user should be able to perform any wallet interaction with the ",(0,s.jsx)(n.code,{children:"JWT"})," and ",(0,s.jsx)(n.code,{children:"apikey"})," interchangeably."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var s=t(96540);const i={},a=s.createContext(i);function l(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);