"use strict";(self.webpackChunkidentus_documentation_portal=self.webpackChunkidentus_documentation_portal||[]).push([[3562],{45844:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var s=t(74848),i=t(28453);const r={},a="Secrets Storage",o={id:"identus/cloud-agent/secrets-storage",title:"Secrets Storage",description:"Introduction",source:"@site/documentation/docs/identus/cloud-agent/secrets-storage.md",sourceDirName:"identus/cloud-agent",slug:"/identus/cloud-agent/secrets-storage",permalink:"/identus-docs/docs/identus/cloud-agent/secrets-storage",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"DID management",permalink:"/identus-docs/docs/identus/cloud-agent/did-management"},next:{title:"Environment Variables",permalink:"/identus-docs/docs/identus/cloud-agent/environment-variables"}},d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Technical Overview",id:"technical-overview",level:2},{value:"Secrets Engine Configuration",id:"secrets-engine-configuration",level:3},{value:"Secrets Storage Sequence Diagram",id:"secrets-storage-sequence-diagram",level:3},{value:"Naming Convention for the Vault Assets",id:"naming-convention-for-the-vault-assets",level:3},{value:"Links:",id:"links",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"secrets-storage",children:"Secrets Storage"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(n.p,{children:["To ensure maximum security, storing sensitive information, including secrets, actively and securely in the ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary#secrets%20storage",children:"Secrets Storage"}),". The Cloud Agent manages the following types of secrets:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"seed"}),": a secret used to derive cryptographic keys"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"private key"}),": a secret used to sign and decrypt data"]}),"\n",(0,s.jsx)(n.li,{children:"any other sensitive data from entities' (for instance, credential definition and the link-secret used by the AnonCreds)"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The default secret storage for the Cloud Agent is the ",(0,s.jsx)(n.a,{href:"/docs/concepts/glossary#Vault%20Service",children:"HashiCorp Vault Service"}),". Other implementations of secret storage can be implemented based on the needs."]}),"\n",(0,s.jsx)(n.h2,{id:"technical-overview",children:"Technical Overview"}),"\n",(0,s.jsx)(n.h3,{id:"secrets-engine-configuration",children:"Secrets Engine Configuration"}),"\n",(0,s.jsx)(n.p,{children:"The Vault service uses a secrets engine to store secrets. KV2 secrets engine is used to keep secrets in the Vault service and provides the following features:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"encrypted at rest"}),"\n",(0,s.jsx)(n.li,{children:"encrypted in transit"}),"\n",(0,s.jsx)(n.li,{children:"versioned"}),"\n",(0,s.jsx)(n.li,{children:"can be deleted, restored, and rolled back to a previous version"}),"\n",(0,s.jsx)(n.li,{children:"available via REST API, WEB UI, and command client"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"secrets-storage-sequence-diagram",children:"Secrets Storage Sequence Diagram"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n    Application->>+Agent: REST API\n    Agent->>+Wallet: route the request\n    Wallet->>+Secrets Storage: get secrets\n    Secrets Storage->>+Wallet: secrets\n    Wallet->>+Wallet: business logic\n    Wallet->>+Agent: route the response\n    Agent->>+Application: REST API"}),"\n",(0,s.jsx)(n.h3,{id:"naming-convention-for-the-vault-assets",children:"Naming Convention for the Vault Assets"}),"\n",(0,s.jsx)(n.p,{children:"Each asset is assigned a unique name to store the assets in the Vault service. The Vault is a key/value store with metadata attached to the key and versioning."}),"\n",(0,s.jsx)(n.p,{children:"The naming convention for the Vault assets is a matter of implementation. For a multi-tenant configuration, the Wallet requires all the asset storage under the path containing the `wallet-id'."}),"\n",(0,s.jsxs)(n.p,{children:["As an example, the ",(0,s.jsx)(n.code,{children:"seed"})," could be stored in the path below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"<wallet-id>/seed value=<base64-encoded-value> <metadata>\n"})}),"\n",(0,s.jsx)(n.p,{children:"The following path can store the private keys for the DID:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"<wallet-id>/dids/prism/<did-ref>/keys/<key-purpose>/<key-index>/<operation-hash> value=<base64-encoded-value> <metadata>\n"})}),"\n",(0,s.jsx)(n.p,{children:"where:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"wallet-id"})," is the unique identity of the Wallet"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"did-ref"})," is the DID ref"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"key-purpose"})," is the key purpose according to the PRISM DID Method specification"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"key-index"})," is the key index. Starting from 0 and increasing incrementally after each key rotation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"operation-hash"})," is the reference to the updated DID document operation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"base64-encoded-value"})," is the base64-encoded value of the key"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"metadata"})," is the key/value metadata attached to the key used to store additional information about the key, such as ",(0,s.jsx)(n.code,{children:"seed"})," or ",(0,s.jsx)(n.code,{children:"key-derivation-path"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The following path can store the key material of the DID peer:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"<wallet-id>/dids/peer/<did-ref>/keys/<key-purpose> value=<base64-encoded-value> <metadata>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"links",children:"Links:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.vaultproject.io/",children:"HashiCorm Vault"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.vaultproject.io/docs/secrets/kv/kv-v2",children:"Vault KV Secrets Engine"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(96540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);