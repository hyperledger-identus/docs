"use strict";(self.webpackChunkidentus_documentation_portal=self.webpackChunkidentus_documentation_portal||[]).push([[3055],{96879:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(74848),s=n(28453);const r={},i="Routing Requests to the Correct Tenant",o={id:"decisions/message-routing-for-multi-tenant",title:"Routing Requests to the Correct Tenant",description:"- Status: accepted",source:"@site/documentation/adrs/decisions/20230509-message-routing-for-multi-tenant.md",sourceDirName:"decisions",slug:"/decisions/message-routing-for-multi-tenant",permalink:"/identus-docs/adrs/decisions/message-routing-for-multi-tenant",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:20230509,frontMatter:{},sidebar:"tutorialsSidebar",previous:{title:"Mediator message storage",permalink:"/identus-docs/adrs/decisions/mediator-message-storage"},next:{title:"Performance framework for the Identus platform",permalink:"/identus-docs/adrs/decisions/performance-framework-for-atala-prism"}},d={},c=[{value:"Context and Problem Statement",id:"context-and-problem-statement",level:2}];function l(e){const t={h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"routing-requests-to-the-correct-tenant",children:"Routing Requests to the Correct Tenant"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Status: accepted"}),"\n",(0,a.jsx)(t.li,{children:"Deciders: Yurii Shynbuiev,David Poltorak, Benjamin Voiturier, Shailesh Patil"}),"\n",(0,a.jsx)(t.li,{children:"Date: [2023-05-09]"}),"\n",(0,a.jsx)(t.li,{children:"Tags: multi-tenant, routing, message"}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"context-and-problem-statement",children:"Context and Problem Statement"}),"\n",(0,a.jsx)(t.p,{children:"The Cloud Agent in multi-tenancy is still a single agent running, however, some of the resources are now shared between the tenants of the agent.\nEach tenant has their own keys, with their own DIDs, connections. Transports and most of the settings are still shared between agents.\nAll the API endpoints are same from outside"}),"\n",(0,a.jsx)(t.p,{children:"Multi-tenancy, message routing can be used to ensure that messages are delivered only to the intended recipient or tenants, and not to unauthorized tenants."}),"\n",(0,a.jsx)(t.p,{children:"Backend services: Cloud Agent use PostgreSQL. Authentication and authorization"}),"\n",(0,a.jsx)("pre",{class:"mermaid",children:(0,a.jsxs)(t.p,{children:["sequenceDiagram\nautonumber\nactor H as Holder(DidComm)\nactor T as Tenant(Issuer)\nparticipant A as CloudAgent\nparticipant W as Wallet\nparticipant DB as Database[did <- tenantId]\nT->>A: Register Tenant\nactivate A\nA->>W: Create wallet\nactivate W\nnote over W: Each Tenant has his own wallet where keys and dids are stored\nW--\x3e>A: tenantId\ndeactivate W\nnote over T, A: Subsequent requests include JWT header\nactivate DB\nnote over DB: did -> tenantId or did -> walletId\nT->>A: Create PeerDID[JWT Header]\nA->>A: authorised token extract tenantID\nalt JWT validation\nA--\x3e>T: 200 OK & JWT\nelse No user\nA--\x3e>T: 401 Unauthorized\nend\nT--\x3e>A: If authorised Create PeerDID\nA--\x3e>DB: Update [DID(PeerDID) -> tenantID]\nA->>H: send DIDCOMM message to holder did\ndeactivate DB\ndeactivate A\nactivate H\nH->>A: DIDCOMMV2 message to Agent(did)\nA--\x3e>DB",":lookup"," to Agent DID identify tenantId\nA--\x3e>A",":decrypt"," message\ndeactivate H"]})}),"\n",(0,a.jsx)("script",{src:"https://cdnjs.cloudflare.com/ajax/libs/mermaid/9.2.1/mermaid.min.js"})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var a=n(96540);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);