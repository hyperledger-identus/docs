"use strict";(self.webpackChunkidentus_documentation_portal=self.webpackChunkidentus_documentation_portal||[]).push([[9155],{97270:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var s=t(74848),i=t(28453);const a={},r="Tenant Onboarding with External IAM",o={id:"multitenancy/tenant-onboarding-ext-iam",title:"Tenant Onboarding with External IAM",description:"In the Tenant Onboarding tutorial, we explored the basic IAM functionality out of the box.",source:"@site/cloud-agent/docs/docusaurus/multitenancy/tenant-onboarding-ext-iam.md",sourceDirName:"multitenancy",slug:"/multitenancy/tenant-onboarding-ext-iam",permalink:"/docs/tutorials/multitenancy/tenant-onboarding-ext-iam",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialsSidebar",previous:{title:"Tenant Onboarding",permalink:"/docs/tutorials/multitenancy/tenant-onboarding"},next:{title:"Tenant Onboarding Self-Service",permalink:"/docs/tutorials/multitenancy/tenant-onboarding-self-service"}},l={},c=[{value:"Roles",id:"roles",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Overview",id:"overview",level:2},{value:"Endpoints",id:"endpoints",level:2},{value:"Agent endpoints",id:"agent-endpoints",level:3},{value:"Keycloak endpoints",id:"keycloak-endpoints",level:3},{value:"Administrator interactions",id:"administrator-interactions",level:2},{value:"1. Check the existing wallets",id:"1-check-the-existing-wallets",level:3},{value:"2. Create a new wallet",id:"2-create-a-new-wallet",level:3},{value:"3. User registration on Keycloak",id:"3-user-registration-on-keycloak",level:3},{value:"4. Grant the user permission to the wallet",id:"4-grant-the-user-permission-to-the-wallet",level:3},{value:"Tenant interactions",id:"tenant-interactions",level:2},{value:"1. Obtain access token from Keycloak",id:"1-obtain-access-token-from-keycloak",level:3},{value:"2. Request RPT (requesting party token) from access token",id:"2-request-rpt-requesting-party-token-from-access-token",level:3},{value:"3. Perform a simple action to verify access to the Cloud Agent",id:"3-perform-a-simple-action-to-verify-access-to-the-cloud-agent",level:3},{value:"A note on RPT",id:"a-note-on-rpt",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"tenant-onboarding-with-external-iam",children:"Tenant Onboarding with External IAM"}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.a,{href:"/docs/tutorials/multitenancy/tenant-onboarding",children:"Tenant Onboarding"})," tutorial, we explored the basic ",(0,s.jsx)(n.a,{href:"/home/concepts/glossary#iam",children:"IAM"})," functionality out of the box.\nAlthough it is usable and straightforward, more featureful tools are available for handling identity and access management.\nThe agent can seamlessly connect with ",(0,s.jsx)(n.a,{href:"/home/concepts/glossary#keycloak-service",children:"Keycloak"})," as an external IAM system, allowing the application built on top to utilize the capabilities that come with Keycloak."]}),"\n",(0,s.jsxs)(n.p,{children:["The Cloud Agent leverages standard protocols like ",(0,s.jsx)(n.a,{href:"/home/concepts/glossary#oidc",children:"OIDC"})," and ",(0,s.jsx)(n.a,{href:"/home/concepts/glossary#uma",children:"UMA"})," for authentication and access management.\nThe user's identity gets established through the ID token, and wallet permissions are searchable using the ",(0,s.jsx)(n.a,{href:"/home/concepts/glossary#rpt",children:"RPT (requesting party token)"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"roles",children:"Roles"}),"\n",(0,s.jsx)(n.p,{children:"In tenant management with external IAM, there are 2 roles:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/home/concepts/glossary#administrator",children:"Administrator"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/home/concepts/glossary#tenant",children:"Tenant"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Keycloak up and running"}),"\n",(0,s.jsxs)(n.li,{children:["Keycloak is configured as follows","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["A realm called ",(0,s.jsx)(n.code,{children:"my-realm"})," is created"]}),"\n",(0,s.jsxs)(n.li,{children:["A client called ",(0,s.jsx)(n.code,{children:"cloud-agent"})," under ",(0,s.jsx)(n.code,{children:"my-realm"})," with ",(0,s.jsx)(n.strong,{children:"authorization"})," feature is created. (See ",(0,s.jsx)(n.a,{href:"https://www.keycloak.org/home/latest/authorization_services/index.html#_resource_server_create_client",children:"create client instruction"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Make sure the ",(0,s.jsx)(n.code,{children:"cloud-agent"})," client has ",(0,s.jsx)(n.strong,{children:"direct access grants"})," enabled to simplify the login process for this tutorial"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"the Cloud Agent is up and running"}),"\n",(0,s.jsxs)(n.li,{children:["the Cloud Agent is configured with the following environment variables:","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"ADMIN_TOKEN=my-admin-token"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"DEFAULT_WALLET_ENABLED=false"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"KEYCLOAK_ENABLED=true"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"KEYCLOAK_URL=http://localhost:9980"})," (replace with appropriate value)"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"KEYCLOAK_REALM=my-realm"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"KEYCLOAK_CLIENT_ID=cloud-agent"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"KEYCLOAK_CLIENT_SECRET=<KEYCLOAK_CLIENT_SECRET>"})," (replace with appropriate value)"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"KEYCLOAK_UMA_AUTO_UPGRADE_RPT=false"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"This tutorial illustrates the process of provisioning a wallet resource for the new tenant and creating a tenant in Keycloak.\nThe administrator can then create a UMA permission for the wallet, giving access to the tenant."}),"\n",(0,s.jsxs)(n.p,{children:["When setting up UMA permissions on the agent, the wallet resource, along with the UMA policy and permission\nare created on Keycloak according to a predefined convention.\nFor flexibility in defining custom policy and permission models,\nadministrators can manually create these UMA resources (resource, policy, permission) directly on Keycloak\nusing a set of UMA endpoints called ",(0,s.jsx)(n.a,{href:"/home/concepts/glossary#protection-api",children:"Protection API"}),"  (see ",(0,s.jsx)(n.a,{href:"https://www.keycloak.org/docs/latest/authorization_services/index.html#_service_protection_api",children:"Keycloak Protection API"}),").\nHowever, using Protection API to manage permissions is out of the scope of this tutorial."]}),"\n",(0,s.jsxs)(n.p,{children:["Once the registration is successful, the tenant can obtain an ID token from Keycloak using any available OIDC flow,\nsuch as the direct access grants (username & password). This ID token typically contains user claims such as username and subject ID.\nThe tenant can use Keycloak's token endpoint to convert this token to an RPT (requesting party token),\nanother token containing permissions information.\nThe tenant can access the multi-tenant agent by providing the RPT in the ",(0,s.jsx)(n.code,{children:"Authorization"})," header."]}),"\n",(0,s.jsx)(n.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,s.jsx)(n.h3,{id:"agent-endpoints",children:"Agent endpoints"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Endpoint"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Role"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"GET /wallets"})}),(0,s.jsx)(n.td,{children:"List the wallets on the Cloud Agent"}),(0,s.jsx)(n.td,{children:"Administrator"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"POST /wallets"})}),(0,s.jsx)(n.td,{children:"Create a new wallet on the Cloud Agent"}),(0,s.jsx)(n.td,{children:"Administrator"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"POST /wallets/{walletId}/uma-permissions"})}),(0,s.jsx)(n.td,{children:"Create a uma-permission for a wallet"}),(0,s.jsx)(n.td,{children:"Administrator"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"GET /did-registrar/dids"})}),(0,s.jsx)(n.td,{children:"List the DIDs inside the wallet"}),(0,s.jsx)(n.td,{children:"Tenant"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"keycloak-endpoints",children:"Keycloak endpoints"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Endpoint"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Role"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"POST /admin/realms/{realm}/users"})}),(0,s.jsx)(n.td,{children:"Create a new user on Keycloak"}),(0,s.jsx)(n.td,{children:"Administrator"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"POST /realms/{realm}/protocol/openid-connect/token"})}),(0,s.jsx)(n.td,{children:"Issue a new JWT token"}),(0,s.jsx)(n.td,{children:"Administrator, Tenant"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"administrator-interactions",children:"Administrator interactions"}),"\n",(0,s.jsx)(n.h3,{id:"1-check-the-existing-wallets",children:"1. Check the existing wallets"}),"\n",(0,s.jsx)(n.p,{children:"When running Cloud Agent using the configurations above, the Cloud Agent should start with an empty state.\nListing wallets on it should return empty results."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl -X 'GET' \\\n  'http://localhost:8080/cloud-agent/wallets' \\\n  -H 'accept: application/json' \\\n  -H 'x-admin-api-key: my-admin-token'\n"})}),"\n",(0,s.jsx)(n.p,{children:"Response Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "self": "/wallets",\n  "kind": "WalletPage",\n  "pageOf": "/wallets",\n  "contents": []\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-create-a-new-wallet",children:"2. Create a new wallet"}),"\n",(0,s.jsxs)(n.p,{children:["Create a wallet using a ",(0,s.jsx)(n.code,{children:"POST /wallets"})," endpoint.\nThis wallet will be a container for the tenant's assets (DIDs, VCs, Connections, etc.).\nProvide a wallet seed during the wallet creation or let the Agent generate one"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl -X 'POST' \\\n  'http://localhost:8080/cloud-agent/wallets' \\\n  -H 'accept: application/json' \\\n  -H 'x-admin-api-key: my-admin-token' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"seed\": \"c9994785ce6d548134020f610b76102ca1075d3bb672a75ec8c9a27a7b8607e3b9b384e43b77bb08f8d5159651ae38b98573f7ecc79f2d7e1f1cc371ce60cf8a\",\n    \"name\": \"my-wallet\"\n  }'\n"})}),"\n",(0,s.jsx)(n.p,{children:"Response Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "id": "99734c87-5c9d-4697-b5fd-dea4e9590ba7",\n  "name": "my-wallet",\n  "createdAt": "2023-01-01T00:00:00Z",\n  "updatedAt": "2023-01-01T00:00:00Z"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-user-registration-on-keycloak",children:"3. User registration on Keycloak"}),"\n",(0,s.jsx)(n.p,{children:"There are multiple ways to complete this step.\nThe goal is to ensure the user has registered on Keycloak.\nKeycloak offers great flexibility, allowing users to self-register,\nFor this tutorial, we will generate the user manually using Keycloak admin API for simplicity."}),"\n",(0,s.jsx)(n.p,{children:"The first step is to get an admin token from Keycloak using the username and password.\nThis token allows the admin to perform operations on Keycloak, such as creating a new user.\nRunning the provided command should return the admin access token."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl -X \'POST\' \\\n  \'http://localhost:9980/realms/master/protocol/openid-connect/token\' \\\n  -d "grant_type=password" \\\n  -d "client_id=admin-cli" \\\n  -d "username=$KEYCLOAK_ADMIN_USER" \\\n  -d "password=$KEYCLOAK_ADMIN_PASSWORD"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Make sure to replace the Keycloak variables with appropriate values."}),"\n",(0,s.jsx)(n.p,{children:"Example token response (some fields omitted for readability)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "access_token": "eyJhbGciOi...7ocDHofUDQ",\n    "refresh_token": "eyJhbGciOi...otsEEi4eQA",\n    ...\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["After obtaining the ",(0,s.jsx)(n.code,{children:"access_token"})," from Keycloak's admin, a new user can be created using this command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl -X \'POST\' \\\n  \'http://localhost:9980/admin/realms/my-realm/users\' \\\n  -v \\\n  -H \'Authorization: Bearer eyJhbGciOi...7ocDHofUDQ\' \\\n  -H \'Content-Type: application/json\' \\\n  --data-raw "{\n    \\"username\\": \\"alice\\",\n    \\"firstName\\": \\"Alice\\",\n    \\"enabled\\": true,\n    \\"credentials\\": [{\\"value\\": \\"1234\\", \\"temporary\\": false}]\n  }"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Make sure to use the correct ",(0,s.jsx)(n.code,{children:"access_token"})," in the ",(0,s.jsx)(n.code,{children:"Authorization"})," header from the previous command."]}),"\n",(0,s.jsx)(n.p,{children:"Example response log"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-log",children:"< HTTP/1.1 201 Created\n< Referrer-Policy: no-referrer\n< X-Frame-Options: SAMEORIGIN\n< Strict-Transport-Security: max-age=31536000; includeSubDomains\n< X-Content-Type-Options: nosniff\n< X-XSS-Protection: 1; mode=block\n< Location: http://localhost:9980/admin/realms/my-realm/users/205e04b7-0158-41b0-89c3-f91c3a09f89b\n< content-length: 0\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The response should return status ",(0,s.jsx)(n.code,{children:"201 Created"})," indicating the new user is registered with username ",(0,s.jsx)(n.code,{children:"alice"})," with a password ",(0,s.jsx)(n.code,{children:"1234"}),".\nThe user ID can be observed from ",(0,s.jsx)(n.code,{children:"Location"})," header of the response. This ID will be used for creating permission later in this tutorial."]}),"\n",(0,s.jsxs)(n.p,{children:["For in-depth user management, please consult the official Keycloak administration documentation on ",(0,s.jsx)(n.a,{href:"https://www.keycloak.org/docs/latest/server_admin/index.html#assembly-managing-users_server_administration_guide",children:"managing users section"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"4-grant-the-user-permission-to-the-wallet",children:"4. Grant the user permission to the wallet"}),"\n",(0,s.jsxs)(n.p,{children:["Once the user and wallet have been successfully created, the permissions can be created giving the user access to the wallet.\nThis can be done by invoking the ",(0,s.jsx)(n.code,{children:"POST /wallets/{walletId}/uma-permissions"})," endpoint on the agent."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl -X 'POST' \\\n  'http://localhost:8080/cloud-agent/wallets/99734c87-5c9d-4697-b5fd-dea4e9590ba7/uma-permissions' \\\n  -v \\\n  -H 'accept: */*' \\\n  -H 'x-admin-api-key: my-admin-token' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"subject\": \"205e04b7-0158-41b0-89c3-f91c3a09f89b\"\n  }'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Make sure to use the correct ",(0,s.jsx)(n.code,{children:"subject"})," for the user and the correct ",(0,s.jsx)(n.code,{children:"walletId"})," from the step earlier.\nThe user ID can be observed from the response header from the previous step or in the ",(0,s.jsx)(n.strong,{children:"User"})," menu in Keycloak Admin UI."]}),"\n",(0,s.jsxs)(n.p,{children:["The response should return status ",(0,s.jsx)(n.code,{children:"200 OK"})," in case of successful permission creation."]}),"\n",(0,s.jsx)(n.h2,{id:"tenant-interactions",children:"Tenant interactions"}),"\n",(0,s.jsx)(n.p,{children:"After the user is registered on Keycloak and the required permission is created by admin,\nthe tenant can log in and utilize the agent by using the token issued by Keycloak."}),"\n",(0,s.jsx)(n.h3,{id:"1-obtain-access-token-from-keycloak",children:"1. Obtain access token from Keycloak"}),"\n",(0,s.jsx)(n.p,{children:"The first step is to authenticate via Keycloak through any applicable authentication method.\nUsually, the tenant will use some frontend application that follows the standard flow for logging in.\nFor simplicity, we use a flow for username and password in this tutorial.\nThe administrator has already set up the username and password for the tenant.\nTo get the access token, the tenant can call the Keycloak token endpoint directly with those credentials."}),"\n",(0,s.jsx)(n.p,{children:"Run the command to log in"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl -X \'POST\' \\\n  \'http://localhost:9980/realms/my-realm/protocol/openid-connect/token\' \\\n  -d "grant_type=password" \\\n  -d "client_id=admin-cli" \\\n  -d "username=alice" \\\n  -d "password=1234"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Special attention on the ",(0,s.jsx)(n.code,{children:"client_id"}),"; this should be the actual ",(0,s.jsx)(n.code,{children:"client_id"})," of the frontend application that logs the user in.\nFor this tutorial, it is OK to use ",(0,s.jsx)(n.code,{children:"admin-cli"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Example token response (some fields omitted for readability)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "access_token": "eyJhbGciOi...7ocDHofUDQ",\n    "refresh_token": "eyJhbGciOi...otsEEi4eQA",\n    ...\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"2-request-rpt-requesting-party-token-from-access-token",children:["2. Request ",(0,s.jsx)(n.a,{href:"/home/concepts/glossary#rpt",children:"RPT (requesting party token)"})," from access token"]}),"\n",(0,s.jsx)(n.p,{children:"After the access token is acquired, the next step is to get the RPT token, which holds information about the permissions.\nIt is possible to request the RPT by running this command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl -X POST \\\n  \'http://localhost:9980/realms/my-realm/protocol/openid-connect/token\' \\\n  -H "Authorization: Bearer eyJhbGciOi...7ocDHofUDQ" \\\n  -d "grant_type=urn:ietf:params:oauth:grant-type:uma-ticket" \\\n  -d "audience=cloud-agent"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Example token response (some fields omitted for readability)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "access_token": "eyJhbGciOi...e7H6W8RUvA",\n    "refresh_token": "eyJhbGciOi...W1_y1AF_YY",\n    ...\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["After inspecting the response token, a new claim named ",(0,s.jsx)(n.code,{children:"authorization"})," should appear in the JWT payload."]}),"\n",(0,s.jsx)(n.p,{children:"Example RPT payload (some fields omitted for readability)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  ...\n  "authorization": {\n    "permissions": [\n      {\n        "rsid": "99734c87-5c9d-4697-b5fd-dea4e9590ba7",\n        "rsname": "<WALLET_RESOURCE_NAME>"\n      },\n      ...\n    ]\n  },\n  ...\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-perform-a-simple-action-to-verify-access-to-the-cloud-agent",children:"3. Perform a simple action to verify access to the Cloud Agent"}),"\n",(0,s.jsxs)(n.p,{children:["To prove that the tenant can access the wallet using RPT,\ntry listing the DIDs in the wallet using RPT in the ",(0,s.jsx)(n.code,{children:"Authorization"})," header."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl --location --request GET 'http://localhost:8080/cloud-agent/did-registrar/dids' \\\n  -H 'Authorization: Bearer eyJhbGciOi...e7H6W8RUvA' \\\n  -H 'Accept: application/json'\n"})}),"\n",(0,s.jsx)(n.p,{children:"Make sure to replace the token with RPT from previous step."}),"\n",(0,s.jsx)(n.p,{children:"The result should show 200 status with an empty list.\nThis means that the wallet has been created and does not contain any DIDs.\nAll actions carried out by the tenant must be limited to this specific wallet."}),"\n",(0,s.jsx)(n.h3,{id:"a-note-on-rpt",children:"A note on RPT"}),"\n",(0,s.jsxs)(n.p,{children:["In this tutorial, there is an additional step for the tenant to request the RPT from the access token.\nThis process aligns with the standard UMA interaction, where the handling of RPT typically occurs on the client side.\nTo simplify the experience, the agent has a feature allowing users to bypass this process.\nBy setting the variable ",(0,s.jsx)(n.code,{children:"KEYCLOAK_UMA_AUTO_UPGRADE_RPT=true"}),", tenants can utilize the access token\nobtained in step 1 directly in the ",(0,s.jsx)(n.code,{children:"Authorization"})," header, eliminating the need for additional RPT request step."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(96540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);