"use strict";(self.webpackChunkidentus_documentation_portal=self.webpackChunkidentus_documentation_portal||[]).push([[7056],{64446:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>c});var o=t(74848),i=t(28453);const d={},a="Update DID",r={id:"dids/update",title:"Update DID",description:"PRISM DID method allows DID Controller to update the content of the DID document by constructing a DID update-operation.",source:"@site/cloud-agent/docs/docusaurus/dids/update.md",sourceDirName:"dids",slug:"/dids/update",permalink:"/docs/tutorials/dids/update",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialsSidebar",previous:{title:"Create DID",permalink:"/docs/tutorials/dids/create"},next:{title:"Publish DID",permalink:"/docs/tutorials/dids/publish"}},s={},c=[{value:"Roles",id:"roles",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Overview",id:"overview",level:2},{value:"Endpoints",id:"endpoints",level:2},{value:"DID Controller interactions",id:"did-controller-interactions",level:2},{value:"1. Check the current state of the DID document",id:"1-check-the-current-state-of-the-did-document",level:3},{value:"2. Add a new key and remove the existing key",id:"2-add-a-new-key-and-remove-the-existing-key",level:3},{value:"3. Wait for the confirmation and observe the change on the DID document",id:"3-wait-for-the-confirmation-and-observe-the-change-on-the-did-document",level:3},{value:"Future work",id:"future-work",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"update-did",children:"Update DID"}),"\n",(0,o.jsxs)(n.p,{children:["PRISM DID method allows ",(0,o.jsx)(n.a,{href:"/home/concepts/glossary#did-controller",children:"DID Controller"})," to update the content of the ",(0,o.jsx)(n.a,{href:"/home/concepts/glossary#did-document",children:"DID document"})," by constructing a DID update-operation.\nThe update-operation describes the update action on the DID document.\nFor example, DID Controller can add a new key to the DID document by constructing an update-operation containing the ",(0,o.jsx)(n.code,{children:"AddKeyAction"}),".\nIt is also possible for DID Controller to compose multiple actions in the same update-operation.\nThe ",(0,o.jsx)(n.a,{href:"https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#update-did",children:"PRISM DID method - Update DID section"})," includes a complete list of supported update actions.\nThe PRISM DID method only allows published ",(0,o.jsx)(n.a,{href:"/home/concepts/glossary#decentralized-identifier",children:"DID"})," to be updated."]}),"\n",(0,o.jsx)(n.p,{children:"When updating a DID, each operation is connected through cryptography,\nforming a sequence of operations known as the lineage.\nIt's important to note that the lineage should not have any forks,\nmeaning that the operations should follow a single, uninterrupted path.\nOnly the operations within the valid lineage are considered when updating the data on\nthe DID document, while any operations on a forked lineage are disregarded and discarded by the protocol."}),"\n",(0,o.jsxs)(n.p,{children:["Please refer to ",(0,o.jsx)(n.a,{href:"https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#processing-of-updatedidoperations",children:"PRISM DID method - processing of update operation"})," for more detail about how a DID update-operation is processed.\nIt has an important implication on how the operation lineage is determined."]}),"\n",(0,o.jsx)(n.h2,{id:"roles",children:"Roles"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"DID Controller is the organization or individual who has control of the DID."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"DID Controller Cloud Agent is up and running"}),"\n",(0,o.jsxs)(n.li,{children:["DID Controller has a DID created by the Cloud Agent (see ",(0,o.jsx)(n.a,{href:"/docs/tutorials/dids/create",children:"Create DID"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:["DID Controller has a DID published to the blockchain (see ",(0,o.jsx)(n.a,{href:"/docs/tutorials/dids/publish",children:"Publish DID"}),")"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"The Cloud Agent allows the DID Controller to update the DID easily. This update mechanism is implementation specific and links the DID update-operation from the last confirmed operation observed on the blockchain."}),"\n",(0,o.jsx)(n.p,{children:"When updating a DID, there is a waiting period for the update to be confirmed on the blockchain.\nIf the DID Controller updates the DID before the previous update is confirmed,\nit can create a situation where the sequence of updates splits into two separate paths,\nwhich is not allowed according to the protocol. This happens because the Cloud Agent connects\nthe update operation to the latest confirmed update. Once the pending update operation is confirmed,\nany other pending operation that does not link to the latest confirmed operation will be discarded.\nThe subsequent updates continuing from that operation will also be discarded.\nHowever, the Cloud Agent has a safeguard in place to prevent this issue by rejecting\nmultiple updates submitted on the same DID while previous updates are still being processed."}),"\n",(0,o.jsxs)(n.p,{children:["Please refer to the ",(0,o.jsx)(n.code,{children:"SECURE_DEPTH"})," parameter in ",(0,o.jsx)(n.a,{href:"https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#versioning-and-protocol-parameters",children:"PRISM method - protocol parameters"})," for the number of confirmation blocks.\nAt the time of writing, this number is 112 blocks."]}),"\n",(0,o.jsx)(n.p,{children:"This example shows the DID update capability on the Cloud Agent and the steps to verify that the update has been confirmed and applied."}),"\n",(0,o.jsx)(n.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,o.jsx)(n.p,{children:"The example uses the following endpoints"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Endpoint"}),(0,o.jsx)(n.th,{children:"Description"}),(0,o.jsx)(n.th,{children:"Role"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.a,{href:"/agent-api/#tag/DID-Registrar/operation/updateManagedDid",children:(0,o.jsx)(n.code,{children:"POST /did-registrar/dids/{didRef}/updates"})})}),(0,o.jsx)(n.td,{children:"Update a PRISM DID"}),(0,o.jsx)(n.td,{children:"DID Controller"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.a,{href:"/agent-api/#tag/DID/operation/getDid",children:(0,o.jsx)(n.code,{children:"GET /dids/{didRef}"})})}),(0,o.jsx)(n.td,{children:"Resolve a DID to DID document representation"}),(0,o.jsx)(n.td,{children:"DID Controller"})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"did-controller-interactions",children:"DID Controller interactions"}),"\n",(0,o.jsx)(n.h3,{id:"1-check-the-current-state-of-the-did-document",children:"1. Check the current state of the DID document"}),"\n",(0,o.jsx)(n.p,{children:"Given the DID Controller has a DID on the Cloud Agent and that DID is published, he can resolve the DID document using short-form DID."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"curl --location --request GET 'http://localhost:8080/cloud-agent/dids/{didRef}' \\\n--header \"apikey: $API_KEY\" \\\n--header 'Accept: */*'\n"})}),"\n",(0,o.jsx)(n.p,{children:"Example DID document response (some fields omitted for readability)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n    "@context": "https://w3id.org/did-resolution/v1",\n    "didDocument": {\n        "@context": ["https://www.w3.org/ns/did/v1"],\n        ...\n        "verificationMethod": [\n            {\n                "controller": "did:prism:4262377859267f308a06ec6acf211fbe4d6745aa9e637e04548771169616fb86",\n                "id": "did:prism:4262377859267f308a06ec6acf211fbe4d6745aa9e637e04548771169616fb86#key-1",\n                "publicKeyJwk": {\n                    "crv": "secp256k1",\n                    "kty": "EC",\n                    "x": "biEpgXMrmKMghF8LsXbIR0VDyIO31mnPkbJBpGDYH1g",\n                    "y": "0YLIMfxY0_3J8Db6W0I1wcHZG3vRCRndNEnVn4h2V7Y"\n                },\n                "type": "EcdsaSecp256k1VerificationKey2019"\n            }\n        ]\n        ...\n    },\n    "didDocumentMetadata": {...},\n    "didResolutionMetadata": {...}\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"verificationMethod"})," in the DID document only shows one public key called ",(0,o.jsx)(n.code,{children:"key-1"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"2-add-a-new-key-and-remove-the-existing-key",children:"2. Add a new key and remove the existing key"}),"\n",(0,o.jsxs)(n.p,{children:["The current DID document contains a key called ",(0,o.jsx)(n.code,{children:"key-1"}),".\nThe DID Controller wishes to remove that key and add a new key called ",(0,o.jsx)(n.code,{children:"key-2"})]}),"\n",(0,o.jsxs)(n.p,{children:["The DID Controller submits a DID update request to ",(0,o.jsx)(n.code,{children:"POST /did-registrar/dids/{didRef}/updates"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'curl --location --request POST \'http://localhost:8080/cloud-agent/did-registrar/dids/did:prism:4262377859267f308a06ec6acf211fbe4d6745aa9e637e04548771169616fb86/updates\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Accept: application/json\' \\\n--header "apikey: $API_KEY" \\\n--data-raw \'{\n    "actions": [\n        {\n            "actionType": "REMOVE_KEY",\n            "removeKey": {\n                "id": "key-1"\n            }\n        },\n        {\n            "actionType": "ADD_KEY",\n            "addKey": {\n                "id": "key-2",\n                "purpose": "authentication",\n                "curve": "secp256k1"\n            }\n        }\n    ]\n}\'\n'})}),"\n",(0,o.jsx)(n.p,{children:"Under the hood, the Cloud Agent constructs the DID update-operation from the last confirmed operation observed on the blockchain.\nThe DID Controller should receive a response about the scheduled operation, waiting for confirmation on the blockchain."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n    "scheduledOperation": {\n        "didRef": "did:prism:4262377859267f308a06ec6acf211fbe4d6745aa9e637e04548771169616fb86",\n        "id": "cb61cff083e27e2f8bc35b0e561780dc027c4f0072d2a2e478b2e0f26e3783b0"\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"3-wait-for-the-confirmation-and-observe-the-change-on-the-did-document",children:"3. Wait for the confirmation and observe the change on the DID document"}),"\n",(0,o.jsx)(n.p,{children:"When the DID Controller tries to resolve the DID again using the example in Step 1,\nthe content might remain the same because the operation still needs to be confirmed and applied."}),"\n",(0,o.jsxs)(n.p,{children:["The DID Controller keeps polling this endpoint until the new key, ",(0,o.jsx)(n.code,{children:"key-2"}),", gets observed."]}),"\n",(0,o.jsx)(n.p,{children:"Example response of updated DID document (some fields omitted for readability)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n    "@context": "https://w3id.org/did-resolution/v1",\n    "didDocument": {\n        "@context": ["https://www.w3.org/ns/did/v1"],\n        ...\n        "verificationMethod": [\n            {\n                "controller": "did:prism:4262377859267f308a06ec6acf211fbe4d6745aa9e637e04548771169616fb86",\n                "id": "did:prism:4262377859267f308a06ec6acf211fbe4d6745aa9e637e04548771169616fb86#key-2",\n                "publicKeyJwk": {\n                    "crv": "secp256k1",\n                    "kty": "EC",\n                    "x": "sg5X06yRDNaW2YcuMuOPwrDPp_vqOtKng0hMHxaME10",\n                    "y": "uAKJanSsNoC_bcL4YS93qIqu_Qwdsr_80DzRTzI8RLU"\n                },\n                "type": "EcdsaSecp256k1VerificationKey2019"\n            }\n        ]\n        ...\n    },\n    "didDocumentMetadata": {...},\n    "didResolutionMetadata": {...}\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["A new key, called ",(0,o.jsx)(n.code,{children:"key-2"}),", gets observed, and ",(0,o.jsx)(n.code,{children:"key-1"}),", now removed, has disappeared from the ",(0,o.jsx)(n.code,{children:"verificationMethod"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"future-work",children:"Future work"}),"\n",(0,o.jsx)(n.p,{children:"The example only shows the case of a successful update.\nIn case of failure, the Cloud Agent will provide the capability to retrieve the low-level operation status and failure detail in the future."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var o=t(96540);const i={},d=o.createContext(i);function a(e){const n=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(d.Provider,{value:n},e.children)}}}]);