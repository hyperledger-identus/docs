"use strict";(self.webpackChunkidentus_documentation_portal=self.webpackChunkidentus_documentation_portal||[]).push([[51276],{50029:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=t(74848),s=t(28453);const r={},a="Connectionless Credential Offer",o={id:"examples/connectionless/ConnectionlessOffer",title:"Connectionless Credential Offer",description:"Description",source:"@site/sdk-ts/docs/examples/connectionless/ConnectionlessOffer.md",sourceDirName:"examples/connectionless",slug:"/examples/connectionless/ConnectionlessOffer",permalink:"/docs/sdk-ts/examples/connectionless/ConnectionlessOffer",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialsSidebar",previous:{title:"Verification",permalink:"/docs/sdk-ts/examples/SDKVerification"},next:{title:"Presentation",permalink:"/docs/sdk-ts/examples/connectionless/ConnectionlessPresentation"}},l={},d=[{value:"Description",id:"description",level:2},{value:"For Issuers",id:"for-issuers",level:2},{value:"Using the Cloud Agent",id:"using-the-cloud-agent",level:3},{value:"Using TS SDK",id:"using-ts-sdk",level:3},{value:"For Holders",id:"for-holders",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",mermaid:"mermaid",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"connectionless-credential-offer",children:"Connectionless Credential Offer"}),"\n",(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["A Connectionless Credential Offer is an Out of Band Invitation with a Credential Offer Attachment.\nThis should be a URI with a single query parameter ",(0,i.jsx)(n.code,{children:"_oob"}),", which is an encoded JSON.\nIt should look similar to:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"https://my.domain.com/path?_oob=eyJpZCI6ImY5NmUzNjk5LTU5MWMtNGFlNy1iNWU2LTZlZmU2ZDI2MjU1YiIsInR5cGUiOiJodHRwczovL2RpZGNvbW0ub3JnL291dC1vZi1iYW5kLzIuMC9pbnZpdGF0aW9uIiwiZnJvbSI6ImRpZDpwZWVyOjIuRXo2TFNmc0tNZTh2U1NXa1lkWkNwbjRZVmlQRVJmZEdBaGRMQUdIZ3gyTEdKd2ZtQS5WejZNa3B3MWtTYWJCTXprQTN2NTl0UUZuaDNGdGtLeTZ4TGhMeGQ5UzZCQW9hQmcyLlNleUowSWpvaVpHMGlMQ0p6SWpwN0luVnlhU0k2SW1oMGRIQTZMeTh4T1RJdU1UWTRMakV1TXpjNk9EQTRNQzlrYVdSamIyMXRJaXdpY2lJNlcxMHNJbUVpT2xzaVpHbGtZMjl0YlM5Mk1pSmRmWDAiLCJib2R5Ijp7ImdvYWxfY29kZSI6Imlzc3VlLXZjIiwiZ29hbCI6IlRlc3QgT09CIiwiYWNjZXB0IjpbImRpZGNvbW0vdjIiXX0sImNyZWF0ZWRfdGltZSI6MTcyNDg1MTEzOSwiZXhwaXJlc190aW1lIjo5OTI0ODUxNDM5LCJhdHRhY2htZW50cyI6W3siaWQiOiIwMGNkYzkwYy05YTk5LTRjZGEtODdmZS00ZjRiMjU5NTExMmEiLCJtZWRpYV90eXBlIjoiYXBwbGljYXRpb24vanNvbiIsImRhdGEiOnsianNvbiI6eyJpZCI6IjY1NWU5YTJjLTQ4ZWQtNDU5Yi1iM2RhLTZiMzY4NjY1NTU2NCIsInR5cGUiOiJodHRwczovL2RpZGNvbW0ub3JnL2lzc3VlLWNyZWRlbnRpYWwvMy4wL29mZmVyLWNyZWRlbnRpYWwiLCJib2R5Ijp7ImdvYWxfY29kZSI6Ik9mZmVyIENyZWRlbnRpYWwiLCJjcmVkZW50aWFsX3ByZXZpZXciOnsidHlwZSI6Imh0dHBzOi8vZGlkY29tbS5vcmcvaXNzdWUtY3JlZGVudGlhbC8zLjAvY3JlZGVudGlhbC1jcmVkZW50aWFsIiwiYm9keSI6eyJhdHRyaWJ1dGVzIjpbeyJuYW1lIjoiZmFtaWx5TmFtZSIsInZhbHVlIjoiV29uZGVybGFuZCJ9XX19fSwiYXR0YWNobWVudHMiOlt7ImlkIjoiODQwNDY3OGItOWEzNi00OTg5LWFmMWQtMGY0NDUzNDdlMGUzIiwibWVkaWFfdHlwZSI6ImFwcGxpY2F0aW9uL2pzb24iLCJkYXRhIjp7Impzb24iOnsib3B0aW9ucyI6eyJjaGFsbGVuZ2UiOiJhZDBmNDNhZC04NTM4LTQxZDQtOWNiOC0yMDk2N2JjNjg1YmMiLCJkb21haW4iOiJkb21haW4ifSwicHJlc2VudGF0aW9uX2RlZmluaXRpb24iOnsiaWQiOiI3NDhlZmE1OC0yYmNlLTQ0MGQtOTIxZi0yNTIwYTg0NDY2NjMiLCJpbnB1dF9kZXNjcmlwdG9ycyI6W10sImZvcm1hdCI6eyJqd3QiOnsiYWxnIjpbIkVTMjU2SyJdLCJwcm9vZl90eXBlIjpbXX19fX19LCJmb3JtYXQiOiJwcmlzbS9qd3QifV0sInRoaWQiOiJmOTZlMzY5OS01OTFjLTRhZTctYjVlNi02ZWZlNmQyNjI1NWIiLCJmcm9tIjoiZGlkOnBlZXI6Mi5FejZMU2ZzS01lOHZTU1drWWRaQ3BuNFlWaVBFUmZkR0FoZExBR0hneDJMR0p3Zm1BLlZ6Nk1rcHcxa1NhYkJNemtBM3Y1OXRRRm5oM0Z0a0t5NnhMaEx4ZDlTNkJBb2FCZzIuU2V5SjBJam9pWkcwaUxDSnpJanA3SW5WeWFTSTZJbWgwZEhBNkx5OHhPVEl1TVRZNExqRXVNemM2T0RBNE1DOWthV1JqYjIxdElpd2ljaUk2VzEwc0ltRWlPbHNpWkdsa1kyOXRiUzkyTWlKZGZYMCJ9fX1dfQ==\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The Issuer creates a CredentialOffer and shares it with the Holder as an out-of-band URL. The Holder can then decode the ",(0,i.jsx)(n.code,{children:"CredentialOffer"})," and use the SDK to either approve or reject it."]}),"\n",(0,i.jsxs)(n.p,{children:["If the Holder accepts the offer, a ",(0,i.jsx)(n.code,{children:"CredentialRequest"})," is sent to the Issuer. The Issuer then issues the final ",(0,i.jsx)(n.code,{children:"Credential"})," to the Holder. All communications are performed using DIDComm v2."]}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Issuer\n    participant Holder\n\n    Issuer->>Holder: Shares Out of Band URL (containing CredentialOffer)\n    Note right of Holder: Holder scans QRCode or opens link\n    Holder->>Holder: Decodes URL and parses CredentialOffer (OOB)\n    Holder->>Holder: Approves CredentialOffer (via SDK)\n    Holder->>Issuer: Sends CredentialRequest (DIDCommV2)\n    Issuer->>Issuer: Verifies CredentialRequest and creates Credential\n    Issuer->>Holder: Issues Verifiable Credential (DIDCommV2)"}),"\n",(0,i.jsx)(n.h2,{id:"for-issuers",children:"For Issuers"}),"\n",(0,i.jsx)(n.h3,{id:"using-the-cloud-agent",children:"Using the Cloud Agent"}),"\n",(0,i.jsxs)(n.p,{children:["Creating a Credential Offer OOB Url through the Cloud Agent is pretty straight forward, do ",(0,i.jsx)(n.a,{href:"/docs/agent-api/#tag/Issue-Credentials-Protocol/operation/createCredentialOfferInvitation",children:"POST request to /issue-credentials/credential-offers/invitation"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"curl --location 'http:///cloud-agent/issue-credentials/credential-offers/invitation' \\\n--header 'Content-Type: application/json' \\\n--data '.......'\n"})}),"\n",(0,i.jsx)(n.p,{children:"A successful response will contain (string) invitation.invitationUrl."}),"\n",(0,i.jsx)(n.h3,{id:"using-ts-sdk",children:"Using TS SDK"}),"\n",(0,i.jsxs)(n.p,{children:["The SDK provides everything that is needed by issuers, creating and publishing prism",":dids",", resolving those onChain, creating OOB Credential Offers, OOB Presentation requests."]}),"\n",(0,i.jsx)(n.p,{children:"Add the required imports"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import SDK from "@hyperledger/identus-sdk";\n'})}),"\n",(0,i.jsx)(n.p,{children:"Here's the types we are going to be using"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"type Claims = {name: string, value: any}\ntype Request = {\n    id: string;\n    claims: Claims[];\n    credentialFormat: string;\n    automaticIssuance: boolean;\n    issuingDID: string;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Let's create the function to create the OOB Credential Offer URL"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'\nasync function createCredentialOffer(agent: SDK.Agent, request: Request, baseUrl: string) {\n    const peerDID = await agent.createNewPeerDID([], true)\n    const oobTask = new SDK.Tasks.CreateOOBOffer({\n        from: peerDID,\n        offer: new SDK.OfferCredential(\n            {\n                goal_code: "Offer Credential",\n                credential_preview: {\n                    type: SDK.ProtocolType.DidcommCredentialPreview,\n                    body: {  attributes: request.claims },\n                },\n            },\n            [\n                new SDK.Domain.AttachmentDescriptor(\n                    {\n                        json: {\n                            id: crypto.randomUUID(),\n                            media_type: "application/json",\n                            options: { challenge: crypto.randomUUID(), domain: baseUrl },\n                            thid: request.id,\n                            presentation_definition: {\n                                id: crypto.randomUUID(),\n                                input_descriptors: [],\n                                format: {\n                                    jwt: { alg: [ SDK.Domain.JWT_ALG.EdDSA ], proof_type: [] },\n                                },\n                            },\n                            format: request.credentialFormat,\n                        },\n                    },\n                    "application/json",\n                    request.id,\n                    undefined,\n                    request.credentialFormat\n                )\n            ],\n            undefined,\n            undefined,\n            request.id\n        )\n    });\n    const oob = await agent.runTask(oobTask);\n    return `${baseUrl}/?oob=${oob}`;\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Calling the function is pretty straight forward, you will need an instance of the Agent (",(0,i.jsx)(n.code,{children:"SDK.Agent"}),") and pass the required parameters, await for the response that will already be the string with the oob url."]}),"\n",(0,i.jsx)(n.h2,{id:"for-holders",children:"For Holders"}),"\n",(0,i.jsx)(n.p,{children:"Holders will scan the qrcode, and extract the CredentialOffer from the OutOfBandInvitation Message."}),"\n",(0,i.jsx)(n.p,{children:"Parsing the OOB Url is very easy in the SDK:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import SDK from "@hyperledger/identus-sdk";\nasync function parseOOB(agent: SDK.Agent, url: string): Promise<SDK.InvitationType> {\n    return agent.parseInvitation(url)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"We would then build the complete CredentialOffer message, holder at this point should accept or reject:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import SDK from "@hyperledger/identus-sdk";\nconst oobMessage: SDK.OutOfBandInvitation = await parseOOB(agent, oobURL);\nconst selfPeerDID = await agent.createPeerDID([], true)\nconst oobOfferMessage:SDK.Domain.Message = SDK.Domain.Message.fromJSON({\n    ...oobMessage.attachments.at(0)?.pasyload,\n    from: oobMessage.from,\n    to: selfPeerDID\n})\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Accepting the Offer using ",(0,i.jsx)(n.code,{children:"oobOfferMessage"}),", which will Create ",(0,i.jsx)(n.code,{children:"SDK.Domain.Message"})," and send it back to the Issuer for its acceptance. (If automatic issuance was implemented then the Credential should come right after receiving the appropiate credential request)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const requestCredential = await agent.handle(oobOfferMessage)\nawait agent.send(requestCredential.makeMessage());\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);